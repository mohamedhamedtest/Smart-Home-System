
Smart_Home_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004452  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002aa  00800060  00004452  000044e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080030a  0080030a  00004790  2**0
                  ALLOC
  3 .stab         00004518  00000000  00000000  00004790  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019e6  00000000  00000000  00008ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000a68e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  0000a80e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  0000a9df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  0000c9ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000db50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000eb54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000ecf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000efb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f8c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	f4 e4       	ldi	r31, 0x44	; 68
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 30       	cpi	r26, 0x0A	; 10
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	aa e0       	ldi	r26, 0x0A	; 10
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 30       	cpi	r26, 0x0C	; 12
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 43 12 	call	0x2486	; 0x2486 <main>
      8a:	0c 94 27 22 	jmp	0x444e	; 0x444e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4f 1f 	jmp	0x3e9e	; 0x3e9e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 ee       	ldi	r26, 0xE9	; 233
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4f 1f 	jmp	0x3e9e	; 0x3e9e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 ee       	ldi	r24, 0xE9	; 233
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5b 1f 	jmp	0x3eb6	; 0x3eb6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 58 1f 	jmp	0x3eb0	; 0x3eb0 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 74 1f 	jmp	0x3ee8	; 0x3ee8 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 5f 1f 	jmp	0x3ebe	; 0x3ebe <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 7b 1f 	jmp	0x3ef6	; 0x3ef6 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	ef 50       	subi	r30, 0x0F	; 15
     93c:	fe 4f       	sbci	r31, 0xFE	; 254
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <EEPROM_voidWriteByte>:

#include"EEPROM.h"
#include<avr/io.h>

void EEPROM_voidWriteByte( const u16 Copy_u16Address, const u8 Copy_u8Data)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <EEPROM_voidWriteByte+0x6>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	9a 83       	std	Y+2, r25	; 0x02
     cae:	89 83       	std	Y+1, r24	; 0x01
     cb0:	6b 83       	std	Y+3, r22	; 0x03
	/* Wait for completion of previous write process*/
	while ( ( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
     cb2:	ec e3       	ldi	r30, 0x3C	; 60
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	88 2f       	mov	r24, r24
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	82 70       	andi	r24, 0x02	; 2
     cbe:	90 70       	andi	r25, 0x00	; 0
     cc0:	95 95       	asr	r25
     cc2:	87 95       	ror	r24
     cc4:	81 30       	cpi	r24, 0x01	; 1
     cc6:	91 05       	cpc	r25, r1
     cc8:	a1 f3       	breq	.-24     	; 0xcb2 <EEPROM_voidWriteByte+0x12>
		;
	/* Set up address register */
	EEAR = Copy_u16Address;
     cca:	ee e3       	ldi	r30, 0x3E	; 62
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	9a 81       	ldd	r25, Y+2	; 0x02
     cd2:	91 83       	std	Z+1, r25	; 0x01
     cd4:	80 83       	st	Z, r24

	/* Read the byte in the address of EEAR */
	EECR |= (1 << EERE);
     cd6:	ac e3       	ldi	r26, 0x3C	; 60
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	ec e3       	ldi	r30, 0x3C	; 60
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	81 60       	ori	r24, 0x01	; 1
     ce2:	8c 93       	st	X, r24
	if (EEDR != Copy_u8Data)//compare the value read to the value to be written
     ce4:	ed e3       	ldi	r30, 0x3D	; 61
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	90 81       	ld	r25, Z
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	98 17       	cp	r25, r24
     cee:	91 f0       	breq	.+36     	; 0xd14 <EEPROM_voidWriteByte+0x74>
	{//if they are not equal then write the data
		EEDR = Copy_u8Data;//move the data to EEDR
     cf0:	ed e3       	ldi	r30, 0x3D	; 61
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	80 83       	st	Z, r24

		/* Write logical one to EEMWE */
		EECR |= (1 << EEMWE);
     cf8:	ac e3       	ldi	r26, 0x3C	; 60
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	ec e3       	ldi	r30, 0x3C	; 60
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	84 60       	ori	r24, 0x04	; 4
     d04:	8c 93       	st	X, r24
		/* Start EEPROM write by setting EEWE */
		EECR |= (1 << EEWE);
     d06:	ac e3       	ldi	r26, 0x3C	; 60
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	ec e3       	ldi	r30, 0x3C	; 60
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	82 60       	ori	r24, 0x02	; 2
     d12:	8c 93       	st	X, r24
	else
	{

	}

}
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <EEPROM_voidWriteBlock>:

void EEPROM_voidWriteBlock( const u16 Copy_u16Address, const u8* P_u8DataArray,const u16 Copy_u16Size)
{
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	28 97       	sbiw	r28, 0x08	; 8
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
     d34:	9c 83       	std	Y+4, r25	; 0x04
     d36:	8b 83       	std	Y+3, r24	; 0x03
     d38:	7e 83       	std	Y+6, r23	; 0x06
     d3a:	6d 83       	std	Y+5, r22	; 0x05
     d3c:	58 87       	std	Y+8, r21	; 0x08
     d3e:	4f 83       	std	Y+7, r20	; 0x07

	u16 counter = 0;//Bytes write counter
     d40:	1a 82       	std	Y+2, r1	; 0x02
     d42:	19 82       	std	Y+1, r1	; 0x01
     d44:	48 c0       	rjmp	.+144    	; 0xdd6 <EEPROM_voidWriteBlock+0xb6>
	while (counter < Copy_u16Size)
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
     d46:	ec e3       	ldi	r30, 0x3C	; 60
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	88 2f       	mov	r24, r24
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	82 70       	andi	r24, 0x02	; 2
     d52:	90 70       	andi	r25, 0x00	; 0
     d54:	95 95       	asr	r25
     d56:	87 95       	ror	r24
     d58:	81 30       	cpi	r24, 0x01	; 1
     d5a:	91 05       	cpc	r25, r1
     d5c:	a1 f3       	breq	.-24     	; 0xd46 <EEPROM_voidWriteBlock+0x26>
			;
		/* Set up address register */
		EEAR = Copy_u16Address + counter;
     d5e:	ee e3       	ldi	r30, 0x3E	; 62
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	2b 81       	ldd	r18, Y+3	; 0x03
     d64:	3c 81       	ldd	r19, Y+4	; 0x04
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	9a 81       	ldd	r25, Y+2	; 0x02
     d6a:	82 0f       	add	r24, r18
     d6c:	93 1f       	adc	r25, r19
     d6e:	91 83       	std	Z+1, r25	; 0x01
     d70:	80 83       	st	Z, r24

		/* Read the byte in the address of EEAR */
		EECR |= (1 << EERE);
     d72:	ac e3       	ldi	r26, 0x3C	; 60
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	ec e3       	ldi	r30, 0x3C	; 60
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	81 60       	ori	r24, 0x01	; 1
     d7e:	8c 93       	st	X, r24
		if (EEDR != (*(P_u8DataArray + counter)))//compare the value read to the value to be written
     d80:	ed e3       	ldi	r30, 0x3D	; 61
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	40 81       	ld	r20, Z
     d86:	2d 81       	ldd	r18, Y+5	; 0x05
     d88:	3e 81       	ldd	r19, Y+6	; 0x06
     d8a:	89 81       	ldd	r24, Y+1	; 0x01
     d8c:	9a 81       	ldd	r25, Y+2	; 0x02
     d8e:	f9 01       	movw	r30, r18
     d90:	e8 0f       	add	r30, r24
     d92:	f9 1f       	adc	r31, r25
     d94:	80 81       	ld	r24, Z
     d96:	48 17       	cp	r20, r24
     d98:	c9 f0       	breq	.+50     	; 0xdcc <EEPROM_voidWriteBlock+0xac>
		{//if they are not equal then write the data
			EEDR = *(P_u8DataArray + counter);//move the data to EEDR
     d9a:	ad e3       	ldi	r26, 0x3D	; 61
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	2d 81       	ldd	r18, Y+5	; 0x05
     da0:	3e 81       	ldd	r19, Y+6	; 0x06
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	9a 81       	ldd	r25, Y+2	; 0x02
     da6:	f9 01       	movw	r30, r18
     da8:	e8 0f       	add	r30, r24
     daa:	f9 1f       	adc	r31, r25
     dac:	80 81       	ld	r24, Z
     dae:	8c 93       	st	X, r24

			/* Write logical one to EEMWE */
			EECR |= (1 << EEMWE);
     db0:	ac e3       	ldi	r26, 0x3C	; 60
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	ec e3       	ldi	r30, 0x3C	; 60
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	84 60       	ori	r24, 0x04	; 4
     dbc:	8c 93       	st	X, r24
			/* Start EEPROM write by setting EEWE */
			EECR |= (1 << EEWE);
     dbe:	ac e3       	ldi	r26, 0x3C	; 60
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	ec e3       	ldi	r30, 0x3C	; 60
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	82 60       	ori	r24, 0x02	; 2
     dca:	8c 93       	st	X, r24
		}
		else
		{

		}
		counter++;//increase bytes counter
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	9a 81       	ldd	r25, Y+2	; 0x02
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	9a 83       	std	Y+2, r25	; 0x02
     dd4:	89 83       	std	Y+1, r24	; 0x01

void EEPROM_voidWriteBlock( const u16 Copy_u16Address, const u8* P_u8DataArray,const u16 Copy_u16Size)
{

	u16 counter = 0;//Bytes write counter
	while (counter < Copy_u16Size)
     dd6:	29 81       	ldd	r18, Y+1	; 0x01
     dd8:	3a 81       	ldd	r19, Y+2	; 0x02
     dda:	8f 81       	ldd	r24, Y+7	; 0x07
     ddc:	98 85       	ldd	r25, Y+8	; 0x08
     dde:	28 17       	cp	r18, r24
     de0:	39 07       	cpc	r19, r25
     de2:	08 f4       	brcc	.+2      	; 0xde6 <EEPROM_voidWriteBlock+0xc6>
     de4:	b0 cf       	rjmp	.-160    	; 0xd46 <EEPROM_voidWriteBlock+0x26>
		{

		}
		counter++;//increase bytes counter
	}
}
     de6:	28 96       	adiw	r28, 0x08	; 8
     de8:	0f b6       	in	r0, 0x3f	; 63
     dea:	f8 94       	cli
     dec:	de bf       	out	0x3e, r29	; 62
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	cd bf       	out	0x3d, r28	; 61
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	08 95       	ret

00000df8 <EEPROM_u8ReadByte>:

u8 EEPROM_u8ReadByte(const u16 Copy_u16Address)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <EEPROM_u8ReadByte+0x6>
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	9a 83       	std	Y+2, r25	; 0x02
     e04:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
     e06:	ec e3       	ldi	r30, 0x3C	; 60
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	88 2f       	mov	r24, r24
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	82 70       	andi	r24, 0x02	; 2
     e12:	90 70       	andi	r25, 0x00	; 0
     e14:	95 95       	asr	r25
     e16:	87 95       	ror	r24
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	91 05       	cpc	r25, r1
     e1c:	a1 f3       	breq	.-24     	; 0xe06 <EEPROM_u8ReadByte+0xe>
		;
	/* Set up address register */
	EEAR = Copy_u16Address;
     e1e:	ee e3       	ldi	r30, 0x3E	; 62
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	89 81       	ldd	r24, Y+1	; 0x01
     e24:	9a 81       	ldd	r25, Y+2	; 0x02
     e26:	91 83       	std	Z+1, r25	; 0x01
     e28:	80 83       	st	Z, r24
	/* Start EEPROM read by writing EERE */
	EECR |= (1 << EERE);
     e2a:	ac e3       	ldi	r26, 0x3C	; 60
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	ec e3       	ldi	r30, 0x3C	; 60
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	81 60       	ori	r24, 0x01	; 1
     e36:	8c 93       	st	X, r24
	/* Return data from data register */
	return EEDR;
     e38:	ed e3       	ldi	r30, 0x3D	; 61
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
}
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	08 95       	ret

00000e48 <EEPROM_voidReadBlock>:

void EEPROM_voidReadBlock(const u16 Copy_u16Address, u8* P_u8DataArray,const u16 Copy_u16Size)
{
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	28 97       	sbiw	r28, 0x08	; 8
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	9c 83       	std	Y+4, r25	; 0x04
     e5e:	8b 83       	std	Y+3, r24	; 0x03
     e60:	7e 83       	std	Y+6, r23	; 0x06
     e62:	6d 83       	std	Y+5, r22	; 0x05
     e64:	58 87       	std	Y+8, r21	; 0x08
     e66:	4f 83       	std	Y+7, r20	; 0x07
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
     e68:	ec e3       	ldi	r30, 0x3C	; 60
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	88 2f       	mov	r24, r24
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	82 70       	andi	r24, 0x02	; 2
     e74:	90 70       	andi	r25, 0x00	; 0
     e76:	95 95       	asr	r25
     e78:	87 95       	ror	r24
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	91 05       	cpc	r25, r1
     e7e:	a1 f3       	breq	.-24     	; 0xe68 <EEPROM_voidReadBlock+0x20>
		;

	u16 counter = 0;//the counter of bytes that are read
     e80:	1a 82       	std	Y+2, r1	; 0x02
     e82:	19 82       	std	Y+1, r1	; 0x01
     e84:	21 c0       	rjmp	.+66     	; 0xec8 <EEPROM_voidReadBlock+0x80>

	while (counter < Copy_u16Size) //loop until move all bytes to the given array
	{
		/* Set up address register */
		EEAR = Copy_u16Address + counter;
     e86:	ee e3       	ldi	r30, 0x3E	; 62
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	2b 81       	ldd	r18, Y+3	; 0x03
     e8c:	3c 81       	ldd	r19, Y+4	; 0x04
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	9a 81       	ldd	r25, Y+2	; 0x02
     e92:	82 0f       	add	r24, r18
     e94:	93 1f       	adc	r25, r19
     e96:	91 83       	std	Z+1, r25	; 0x01
     e98:	80 83       	st	Z, r24
		/* Start EEPROM read by writing EERE */
		EECR |= (1 << EERE);
     e9a:	ac e3       	ldi	r26, 0x3C	; 60
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	ec e3       	ldi	r30, 0x3C	; 60
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	81 60       	ori	r24, 0x01	; 1
     ea6:	8c 93       	st	X, r24
		/* move data from data register to the array */
		*(P_u8DataArray + counter) = EEDR;
     ea8:	2d 81       	ldd	r18, Y+5	; 0x05
     eaa:	3e 81       	ldd	r19, Y+6	; 0x06
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	d9 01       	movw	r26, r18
     eb2:	a8 0f       	add	r26, r24
     eb4:	b9 1f       	adc	r27, r25
     eb6:	ed e3       	ldi	r30, 0x3D	; 61
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	8c 93       	st	X, r24

		counter++;//increase the bytes counter
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	9a 81       	ldd	r25, Y+2	; 0x02
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	9a 83       	std	Y+2, r25	; 0x02
     ec6:	89 83       	std	Y+1, r24	; 0x01
	while (((EECR & (1 << EEWE))>>EEWE)==1)
		;

	u16 counter = 0;//the counter of bytes that are read

	while (counter < Copy_u16Size) //loop until move all bytes to the given array
     ec8:	29 81       	ldd	r18, Y+1	; 0x01
     eca:	3a 81       	ldd	r19, Y+2	; 0x02
     ecc:	8f 81       	ldd	r24, Y+7	; 0x07
     ece:	98 85       	ldd	r25, Y+8	; 0x08
     ed0:	28 17       	cp	r18, r24
     ed2:	39 07       	cpc	r19, r25
     ed4:	c0 f2       	brcs	.-80     	; 0xe86 <EEPROM_voidReadBlock+0x3e>
		/* move data from data register to the array */
		*(P_u8DataArray + counter) = EEDR;

		counter++;//increase the bytes counter
	}
}
     ed6:	28 96       	adiw	r28, 0x08	; 8
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cd bf       	out	0x3d, r28	; 61
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	08 95       	ret

00000ee8 <TIMER0_Init>:

//timer0
void (*TIMER0_pvCallBackFunc)(void) = NULL;

void TIMER0_Init(void)
{
     ee8:	df 93       	push	r29
     eea:	cf 93       	push	r28
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 78; //to achieve tick equal to 10 msec
     ef0:	ec e5       	ldi	r30, 0x5C	; 92
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	8e e4       	ldi	r24, 0x4E	; 78
     ef6:	80 83       	st	Z, r24

	//Set timer mode
	//Set the mode as Compare match
	Set_Bit(TCCR0, TCCR0_WGM01);
     ef8:	a3 e5       	ldi	r26, 0x53	; 83
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e3 e5       	ldi	r30, 0x53	; 83
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	88 60       	ori	r24, 0x08	; 8
     f04:	8c 93       	st	X, r24
	Clear_Bit(TCCR0, TCCR0_WGM00);
     f06:	a3 e5       	ldi	r26, 0x53	; 83
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e3 e5       	ldi	r30, 0x53	; 83
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	8f 7b       	andi	r24, 0xBF	; 191
     f12:	8c 93       	st	X, r24

	//Configure clock
	//set as clk/1024
	Set_Bit(TCCR0, TCCR0_CS00);
     f14:	a3 e5       	ldi	r26, 0x53	; 83
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e3 e5       	ldi	r30, 0x53	; 83
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	81 60       	ori	r24, 0x01	; 1
     f20:	8c 93       	st	X, r24
	Clear_Bit(TCCR0, TCCR0_CS01);
     f22:	a3 e5       	ldi	r26, 0x53	; 83
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e3 e5       	ldi	r30, 0x53	; 83
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	8d 7f       	andi	r24, 0xFD	; 253
     f2e:	8c 93       	st	X, r24
	Set_Bit(TCCR0, TCCR0_CS02);
     f30:	a3 e5       	ldi	r26, 0x53	; 83
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e3 e5       	ldi	r30, 0x53	; 83
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	84 60       	ori	r24, 0x04	; 4
     f3c:	8c 93       	st	X, r24

	//Enable timer 0 interrupt for compare match
	Set_Bit(TIMSK, TIMSK_OCIE0);
     f3e:	a9 e5       	ldi	r26, 0x59	; 89
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e9 e5       	ldi	r30, 0x59	; 89
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	82 60       	ori	r24, 0x02	; 2
     f4a:	8c 93       	st	X, r24

}
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <TIMER0_STOP>:

void TIMER0_STOP(void)
{
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
	//disable the clock to stop the counter
	Clear_Bit(TCCR0, TCCR0_CS00);
     f5a:	a3 e5       	ldi	r26, 0x53	; 83
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e3 e5       	ldi	r30, 0x53	; 83
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	8e 7f       	andi	r24, 0xFE	; 254
     f66:	8c 93       	st	X, r24
	Clear_Bit(TCCR0, TCCR0_CS01);
     f68:	a3 e5       	ldi	r26, 0x53	; 83
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e3 e5       	ldi	r30, 0x53	; 83
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	8d 7f       	andi	r24, 0xFD	; 253
     f74:	8c 93       	st	X, r24
	Clear_Bit(TCCR0, TCCR0_CS02);
     f76:	a3 e5       	ldi	r26, 0x53	; 83
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e3 e5       	ldi	r30, 0x53	; 83
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	8b 7f       	andi	r24, 0xFB	; 251
     f82:	8c 93       	st	X, r24
}
     f84:	cf 91       	pop	r28
     f86:	df 91       	pop	r29
     f88:	08 95       	ret

00000f8a <TIMER0_u8SetCallBack>:

u8 TIMER0_u8SetCallBack(void(*Copy_pvCallBackFunc)(void))
{
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	00 d0       	rcall	.+0      	; 0xf90 <TIMER0_u8SetCallBack+0x6>
     f90:	0f 92       	push	r0
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	9b 83       	std	Y+3, r25	; 0x03
     f98:	8a 83       	std	Y+2, r24	; 0x02
	u8 u8ErrorState_Local = OK;
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pvCallBackFunc != NULL)
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	9b 81       	ldd	r25, Y+3	; 0x03
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	39 f0       	breq	.+14     	; 0xfb4 <TIMER0_u8SetCallBack+0x2a>
	{
		TIMER0_pvCallBackFunc = Copy_pvCallBackFunc;
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	9b 81       	ldd	r25, Y+3	; 0x03
     faa:	90 93 0b 03 	sts	0x030B, r25
     fae:	80 93 0a 03 	sts	0x030A, r24
     fb2:	01 c0       	rjmp	.+2      	; 0xfb6 <TIMER0_u8SetCallBack+0x2c>
	}
	else
	{
		u8ErrorState_Local = NOT_OK;
     fb4:	19 82       	std	Y+1, r1	; 0x01
	}
	return u8ErrorState_Local;
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <TIMER1_Init>:


//timer1
void TIMER1_Init(void)
{
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
	//Clear OC1A on compare match
	Set_Bit(TCCR1A, TCCR1A_COM1A1);
     fcc:	af e4       	ldi	r26, 0x4F	; 79
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	ef e4       	ldi	r30, 0x4F	; 79
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	80 68       	ori	r24, 0x80	; 128
     fd8:	8c 93       	st	X, r24
	Clear_Bit(TCCR1A, TCCR1A_COM1A0);
     fda:	af e4       	ldi	r26, 0x4F	; 79
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	ef e4       	ldi	r30, 0x4F	; 79
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	8f 7b       	andi	r24, 0xBF	; 191
     fe6:	8c 93       	st	X, r24
	//Clear OC1B on compare match
	Set_Bit(TCCR1A, TCCR1A_COM1B1);
     fe8:	af e4       	ldi	r26, 0x4F	; 79
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	ef e4       	ldi	r30, 0x4F	; 79
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	80 62       	ori	r24, 0x20	; 32
     ff4:	8c 93       	st	X, r24
	Clear_Bit(TCCR1A, TCCR1A_COM1B0);
     ff6:	af e4       	ldi	r26, 0x4F	; 79
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	ef e4       	ldi	r30, 0x4F	; 79
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	8f 7e       	andi	r24, 0xEF	; 239
    1002:	8c 93       	st	X, r24
	//Fast PWM, TOP in ICR1
	Set_Bit(TCCR1A, TCCR1A_WGM11);
    1004:	af e4       	ldi	r26, 0x4F	; 79
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	ef e4       	ldi	r30, 0x4F	; 79
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	82 60       	ori	r24, 0x02	; 2
    1010:	8c 93       	st	X, r24
	Clear_Bit(TCCR1A, TCCR1A_WGM10);
    1012:	af e4       	ldi	r26, 0x4F	; 79
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	ef e4       	ldi	r30, 0x4F	; 79
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	8e 7f       	andi	r24, 0xFE	; 254
    101e:	8c 93       	st	X, r24
	Set_Bit(TCCR1B, TCCR1B_WGM12);
    1020:	ae e4       	ldi	r26, 0x4E	; 78
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	ee e4       	ldi	r30, 0x4E	; 78
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	88 60       	ori	r24, 0x08	; 8
    102c:	8c 93       	st	X, r24
	Set_Bit(TCCR1B, TCCR1B_WGM13);
    102e:	ae e4       	ldi	r26, 0x4E	; 78
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	ee e4       	ldi	r30, 0x4E	; 78
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	80 61       	ori	r24, 0x10	; 16
    103a:	8c 93       	st	X, r24
	//prescalar -> 8
	TCCR1B &= PRESCALLER_FREQ;
    103c:	ae e4       	ldi	r26, 0x4E	; 78
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	ee e4       	ldi	r30, 0x4E	; 78
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	88 7f       	andi	r24, 0xF8	; 248
    1048:	8c 93       	st	X, r24
	TCCR1B |= Divide_by_8;
    104a:	ae e4       	ldi	r26, 0x4E	; 78
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	ee e4       	ldi	r30, 0x4E	; 78
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	82 60       	ori	r24, 0x02	; 2
    1056:	8c 93       	st	X, r24

}
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <TIMER1_voidSetChannelAtCompMatch>:

void TIMER1_voidSetChannelAtCompMatch(u16 Copy_u16CompareMatch)
{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	00 d0       	rcall	.+0      	; 0x1064 <TIMER1_voidSetChannelAtCompMatch+0x6>
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	9a 83       	std	Y+2, r25	; 0x02
    106a:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = Copy_u16CompareMatch;
    106c:	ea e4       	ldi	r30, 0x4A	; 74
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	9a 81       	ldd	r25, Y+2	; 0x02
    1074:	91 83       	std	Z+1, r25	; 0x01
    1076:	80 83       	st	Z, r24
}
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <TIMER1_voidSetChanne2AtCompMatch>:

void TIMER1_voidSetChanne2AtCompMatch(u16 Copy_u16CompareMatch)
{
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	00 d0       	rcall	.+0      	; 0x1088 <TIMER1_voidSetChanne2AtCompMatch+0x6>
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	9a 83       	std	Y+2, r25	; 0x02
    108e:	89 83       	std	Y+1, r24	; 0x01
	OCR1B = Copy_u16CompareMatch;
    1090:	e8 e4       	ldi	r30, 0x48	; 72
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	9a 81       	ldd	r25, Y+2	; 0x02
    1098:	91 83       	std	Z+1, r25	; 0x01
    109a:	80 83       	st	Z, r24
}
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <TIMER1_voidSetISR>:


void TIMER1_voidSetISR(u16 Copy_u16Top)
{
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <TIMER1_voidSetISR+0x6>
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
    10b0:	9a 83       	std	Y+2, r25	; 0x02
    10b2:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16Top;
    10b4:	e6 e4       	ldi	r30, 0x46	; 70
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
    10bc:	91 83       	std	Z+1, r25	; 0x01
    10be:	80 83       	st	Z, r24
}
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <SPI_vInitMaster>:
#include "../../libs/util.h"
#include"SPI.h"
#include<avr/io.h>

void SPI_vInitMaster (void)
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
	DDRB |=(1<<SPI_MOSI) |(1<<SPI_SS)|(1<<SPI_SCK);//Set the port B mosi(master out slave in ) ,port B ss(slave select),sck(spi clock)  pins as output
    10d2:	a7 e3       	ldi	r26, 0x37	; 55
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e7 e3       	ldi	r30, 0x37	; 55
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	80 6b       	ori	r24, 0xB0	; 176
    10de:	8c 93       	st	X, r24
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//Enable the SPI,master mode ,Set the clock speed to F/16
    10e0:	ad e2       	ldi	r26, 0x2D	; 45
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	ed e2       	ldi	r30, 0x2D	; 45
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	81 65       	ori	r24, 0x51	; 81
    10ec:	8c 93       	st	X, r24
}
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <SPI_vInitSlave>:

void SPI_vInitSlave (void)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
    10fc:	a7 e3       	ldi	r26, 0x37	; 55
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e7 e3       	ldi	r30, 0x37	; 55
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	80 64       	ori	r24, 0x40	; 64
    1108:	8c 93       	st	X, r24
	SPCR |= (1<<SPE);//Enable the SPI
    110a:	ad e2       	ldi	r26, 0x2D	; 45
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	ed e2       	ldi	r30, 0x2D	; 45
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	80 64       	ori	r24, 0x40	; 64
    1116:	8c 93       	st	X, r24
}
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <SPI_ui8TransmitRecive>:

u8 SPI_ui8TransmitRecive (u8 data)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	0f 92       	push	r0
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;//move the given data to SPI Data register
    112a:	ef e2       	ldi	r30, 0x2F	; 47
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	80 83       	st	Z, r24

	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0);//wait till the transmitting is done
    1132:	ee e2       	ldi	r30, 0x2E	; 46
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	88 1f       	adc	r24, r24
    113a:	88 27       	eor	r24, r24
    113c:	88 1f       	adc	r24, r24
    113e:	88 2f       	mov	r24, r24
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	90 70       	andi	r25, 0x00	; 0
    1144:	00 97       	sbiw	r24, 0x00	; 0
    1146:	a9 f3       	breq	.-22     	; 0x1132 <SPI_ui8TransmitRecive+0x14>
										//SPI flag is set to one if the transmission is done

	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
    1148:	ef e2       	ldi	r30, 0x2F	; 47
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
}
    114e:	0f 90       	pop	r0
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <GIE_voidEnable>:
#include"GIE.h"
#include "../../libs/util.h"
#include<avr/io.h>

void GIE_voidEnable(void)
{
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG, SREG_I);
    115e:	af e5       	ldi	r26, 0x5F	; 95
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	ef e5       	ldi	r30, 0x5F	; 95
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	80 68       	ori	r24, 0x80	; 128
    116a:	8c 93       	st	X, r24
}
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(SREG, SREG_I);
    117a:	af e5       	ldi	r26, 0x5F	; 95
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	ef e5       	ldi	r30, 0x5F	; 95
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	8f 77       	andi	r24, 0x7F	; 127
    1186:	8c 93       	st	X, r24
}
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <DIO_SetPortDirection>:
#include"DIO.h"


//set port direction
void DIO_SetPortDirection(u8 u8PortIdCopy,u8 u8PortDirCopy)
{
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	00 d0       	rcall	.+0      	; 0x1194 <DIO_SetPortDirection+0x6>
    1194:	00 d0       	rcall	.+0      	; 0x1196 <DIO_SetPortDirection+0x8>
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	89 83       	std	Y+1, r24	; 0x01
    119c:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortIdCopy)
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	3c 83       	std	Y+4, r19	; 0x04
    11a6:	2b 83       	std	Y+3, r18	; 0x03
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	9c 81       	ldd	r25, Y+4	; 0x04
    11ac:	81 30       	cpi	r24, 0x01	; 1
    11ae:	91 05       	cpc	r25, r1
    11b0:	d1 f0       	breq	.+52     	; 0x11e6 <DIO_SetPortDirection+0x58>
    11b2:	2b 81       	ldd	r18, Y+3	; 0x03
    11b4:	3c 81       	ldd	r19, Y+4	; 0x04
    11b6:	22 30       	cpi	r18, 0x02	; 2
    11b8:	31 05       	cpc	r19, r1
    11ba:	2c f4       	brge	.+10     	; 0x11c6 <DIO_SetPortDirection+0x38>
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	9c 81       	ldd	r25, Y+4	; 0x04
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	61 f0       	breq	.+24     	; 0x11dc <DIO_SetPortDirection+0x4e>
    11c4:	1e c0       	rjmp	.+60     	; 0x1202 <DIO_SetPortDirection+0x74>
    11c6:	2b 81       	ldd	r18, Y+3	; 0x03
    11c8:	3c 81       	ldd	r19, Y+4	; 0x04
    11ca:	22 30       	cpi	r18, 0x02	; 2
    11cc:	31 05       	cpc	r19, r1
    11ce:	81 f0       	breq	.+32     	; 0x11f0 <DIO_SetPortDirection+0x62>
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	83 30       	cpi	r24, 0x03	; 3
    11d6:	91 05       	cpc	r25, r1
    11d8:	81 f0       	breq	.+32     	; 0x11fa <DIO_SetPortDirection+0x6c>
    11da:	13 c0       	rjmp	.+38     	; 0x1202 <DIO_SetPortDirection+0x74>
	{
	case DIO_PORTA: DDRA = u8PortDirCopy; break;
    11dc:	ea e3       	ldi	r30, 0x3A	; 58
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	80 83       	st	Z, r24
    11e4:	0e c0       	rjmp	.+28     	; 0x1202 <DIO_SetPortDirection+0x74>
	case DIO_PORTB: DDRB = u8PortDirCopy; break;
    11e6:	e7 e3       	ldi	r30, 0x37	; 55
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	8a 81       	ldd	r24, Y+2	; 0x02
    11ec:	80 83       	st	Z, r24
    11ee:	09 c0       	rjmp	.+18     	; 0x1202 <DIO_SetPortDirection+0x74>
	case DIO_PORTC: DDRC = u8PortDirCopy; break;
    11f0:	e4 e3       	ldi	r30, 0x34	; 52
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	80 83       	st	Z, r24
    11f8:	04 c0       	rjmp	.+8      	; 0x1202 <DIO_SetPortDirection+0x74>
	case DIO_PORTD: DDRD = u8PortDirCopy; break;
    11fa:	e1 e3       	ldi	r30, 0x31	; 49
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	80 83       	st	Z, r24
	}
}
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <DIO_SetPinDirection>:

//set pin direction
void DIO_SetPinDirection(u8 u8PortIdCopy,u8 u8PinIdCopy, u8 u8PinDirCopy )
{
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	27 97       	sbiw	r28, 0x07	; 7
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	de bf       	out	0x3e, r29	; 62
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	cd bf       	out	0x3d, r28	; 61
    1224:	89 83       	std	Y+1, r24	; 0x01
    1226:	6a 83       	std	Y+2, r22	; 0x02
    1228:	4b 83       	std	Y+3, r20	; 0x03
	if((u8PortIdCopy <= DIO_PORTD)&&(u8PinIdCopy <= DIO_PIN7))
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	84 30       	cpi	r24, 0x04	; 4
    122e:	08 f0       	brcs	.+2      	; 0x1232 <DIO_SetPinDirection+0x22>
    1230:	ee c0       	rjmp	.+476    	; 0x140e <DIO_SetPinDirection+0x1fe>
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	88 30       	cpi	r24, 0x08	; 8
    1236:	08 f0       	brcs	.+2      	; 0x123a <DIO_SetPinDirection+0x2a>
    1238:	ea c0       	rjmp	.+468    	; 0x140e <DIO_SetPinDirection+0x1fe>
	{
		if(u8PinDirCopy==DIO_PIN_OUTPUT)
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	09 f0       	breq	.+2      	; 0x1242 <DIO_SetPinDirection+0x32>
    1240:	6f c0       	rjmp	.+222    	; 0x1320 <DIO_SetPinDirection+0x110>
		{
			switch(u8PortIdCopy)
    1242:	89 81       	ldd	r24, Y+1	; 0x01
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	3f 83       	std	Y+7, r19	; 0x07
    124a:	2e 83       	std	Y+6, r18	; 0x06
    124c:	8e 81       	ldd	r24, Y+6	; 0x06
    124e:	9f 81       	ldd	r25, Y+7	; 0x07
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	91 05       	cpc	r25, r1
    1254:	49 f1       	breq	.+82     	; 0x12a8 <DIO_SetPinDirection+0x98>
    1256:	2e 81       	ldd	r18, Y+6	; 0x06
    1258:	3f 81       	ldd	r19, Y+7	; 0x07
    125a:	22 30       	cpi	r18, 0x02	; 2
    125c:	31 05       	cpc	r19, r1
    125e:	2c f4       	brge	.+10     	; 0x126a <DIO_SetPinDirection+0x5a>
    1260:	8e 81       	ldd	r24, Y+6	; 0x06
    1262:	9f 81       	ldd	r25, Y+7	; 0x07
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	61 f0       	breq	.+24     	; 0x1280 <DIO_SetPinDirection+0x70>
    1268:	d2 c0       	rjmp	.+420    	; 0x140e <DIO_SetPinDirection+0x1fe>
    126a:	2e 81       	ldd	r18, Y+6	; 0x06
    126c:	3f 81       	ldd	r19, Y+7	; 0x07
    126e:	22 30       	cpi	r18, 0x02	; 2
    1270:	31 05       	cpc	r19, r1
    1272:	71 f1       	breq	.+92     	; 0x12d0 <DIO_SetPinDirection+0xc0>
    1274:	8e 81       	ldd	r24, Y+6	; 0x06
    1276:	9f 81       	ldd	r25, Y+7	; 0x07
    1278:	83 30       	cpi	r24, 0x03	; 3
    127a:	91 05       	cpc	r25, r1
    127c:	e9 f1       	breq	.+122    	; 0x12f8 <DIO_SetPinDirection+0xe8>
    127e:	c7 c0       	rjmp	.+398    	; 0x140e <DIO_SetPinDirection+0x1fe>
			{
			case DIO_PORTA: Set_Bit(DDRA, u8PinIdCopy); break;
    1280:	aa e3       	ldi	r26, 0x3A	; 58
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	ea e3       	ldi	r30, 0x3A	; 58
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	48 2f       	mov	r20, r24
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 2e       	mov	r0, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <DIO_SetPinDirection+0x8e>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <DIO_SetPinDirection+0x8a>
    12a2:	84 2b       	or	r24, r20
    12a4:	8c 93       	st	X, r24
    12a6:	b3 c0       	rjmp	.+358    	; 0x140e <DIO_SetPinDirection+0x1fe>
			case DIO_PORTB: Set_Bit(DDRB, u8PinIdCopy); break;
    12a8:	a7 e3       	ldi	r26, 0x37	; 55
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e7 e3       	ldi	r30, 0x37	; 55
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	48 2f       	mov	r20, r24
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 2e       	mov	r0, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <DIO_SetPinDirection+0xb6>
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	0a 94       	dec	r0
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <DIO_SetPinDirection+0xb2>
    12ca:	84 2b       	or	r24, r20
    12cc:	8c 93       	st	X, r24
    12ce:	9f c0       	rjmp	.+318    	; 0x140e <DIO_SetPinDirection+0x1fe>
			case DIO_PORTC: Set_Bit(DDRC, u8PinIdCopy); break;
    12d0:	a4 e3       	ldi	r26, 0x34	; 52
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e4 e3       	ldi	r30, 0x34	; 52
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 2e       	mov	r0, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <DIO_SetPinDirection+0xde>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <DIO_SetPinDirection+0xda>
    12f2:	84 2b       	or	r24, r20
    12f4:	8c 93       	st	X, r24
    12f6:	8b c0       	rjmp	.+278    	; 0x140e <DIO_SetPinDirection+0x1fe>
			case DIO_PORTD: Set_Bit(DDRD, u8PinIdCopy); break;
    12f8:	a1 e3       	ldi	r26, 0x31	; 49
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e1 e3       	ldi	r30, 0x31	; 49
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIO_SetPinDirection+0x106>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <DIO_SetPinDirection+0x102>
    131a:	84 2b       	or	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	77 c0       	rjmp	.+238    	; 0x140e <DIO_SetPinDirection+0x1fe>
			}
		}
		else if(u8PinDirCopy==DIO_PIN_INPUT)
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	88 23       	and	r24, r24
    1324:	09 f0       	breq	.+2      	; 0x1328 <DIO_SetPinDirection+0x118>
    1326:	73 c0       	rjmp	.+230    	; 0x140e <DIO_SetPinDirection+0x1fe>
		{
			switch(u8PortIdCopy)
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	3d 83       	std	Y+5, r19	; 0x05
    1330:	2c 83       	std	Y+4, r18	; 0x04
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	9d 81       	ldd	r25, Y+5	; 0x05
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	91 05       	cpc	r25, r1
    133a:	59 f1       	breq	.+86     	; 0x1392 <DIO_SetPinDirection+0x182>
    133c:	2c 81       	ldd	r18, Y+4	; 0x04
    133e:	3d 81       	ldd	r19, Y+5	; 0x05
    1340:	22 30       	cpi	r18, 0x02	; 2
    1342:	31 05       	cpc	r19, r1
    1344:	2c f4       	brge	.+10     	; 0x1350 <DIO_SetPinDirection+0x140>
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	9d 81       	ldd	r25, Y+5	; 0x05
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	69 f0       	breq	.+26     	; 0x1368 <DIO_SetPinDirection+0x158>
    134e:	5f c0       	rjmp	.+190    	; 0x140e <DIO_SetPinDirection+0x1fe>
    1350:	2c 81       	ldd	r18, Y+4	; 0x04
    1352:	3d 81       	ldd	r19, Y+5	; 0x05
    1354:	22 30       	cpi	r18, 0x02	; 2
    1356:	31 05       	cpc	r19, r1
    1358:	89 f1       	breq	.+98     	; 0x13bc <DIO_SetPinDirection+0x1ac>
    135a:	8c 81       	ldd	r24, Y+4	; 0x04
    135c:	9d 81       	ldd	r25, Y+5	; 0x05
    135e:	83 30       	cpi	r24, 0x03	; 3
    1360:	91 05       	cpc	r25, r1
    1362:	09 f4       	brne	.+2      	; 0x1366 <DIO_SetPinDirection+0x156>
    1364:	40 c0       	rjmp	.+128    	; 0x13e6 <DIO_SetPinDirection+0x1d6>
    1366:	53 c0       	rjmp	.+166    	; 0x140e <DIO_SetPinDirection+0x1fe>
			{
			case DIO_PORTA: Clear_Bit(DDRA, u8PinIdCopy); break;
    1368:	aa e3       	ldi	r26, 0x3A	; 58
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	ea e3       	ldi	r30, 0x3A	; 58
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 2e       	mov	r0, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <DIO_SetPinDirection+0x176>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	0a 94       	dec	r0
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <DIO_SetPinDirection+0x172>
    138a:	80 95       	com	r24
    138c:	84 23       	and	r24, r20
    138e:	8c 93       	st	X, r24
    1390:	3e c0       	rjmp	.+124    	; 0x140e <DIO_SetPinDirection+0x1fe>
			case DIO_PORTB: Clear_Bit(DDRB, u8PinIdCopy); break;
    1392:	a7 e3       	ldi	r26, 0x37	; 55
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e7 e3       	ldi	r30, 0x37	; 55
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	48 2f       	mov	r20, r24
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 2e       	mov	r0, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <DIO_SetPinDirection+0x1a0>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	0a 94       	dec	r0
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <DIO_SetPinDirection+0x19c>
    13b4:	80 95       	com	r24
    13b6:	84 23       	and	r24, r20
    13b8:	8c 93       	st	X, r24
    13ba:	29 c0       	rjmp	.+82     	; 0x140e <DIO_SetPinDirection+0x1fe>
			case DIO_PORTC: Clear_Bit(DDRC, u8PinIdCopy); break;
    13bc:	a4 e3       	ldi	r26, 0x34	; 52
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e4 e3       	ldi	r30, 0x34	; 52
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	48 2f       	mov	r20, r24
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 2e       	mov	r0, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DIO_SetPinDirection+0x1ca>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	0a 94       	dec	r0
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <DIO_SetPinDirection+0x1c6>
    13de:	80 95       	com	r24
    13e0:	84 23       	and	r24, r20
    13e2:	8c 93       	st	X, r24
    13e4:	14 c0       	rjmp	.+40     	; 0x140e <DIO_SetPinDirection+0x1fe>
			case DIO_PORTD: Clear_Bit(DDRD, u8PinIdCopy); break;
    13e6:	a1 e3       	ldi	r26, 0x31	; 49
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e1 e3       	ldi	r30, 0x31	; 49
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	48 2f       	mov	r20, r24
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	02 2e       	mov	r0, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <DIO_SetPinDirection+0x1f4>
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	0a 94       	dec	r0
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <DIO_SetPinDirection+0x1f0>
    1408:	80 95       	com	r24
    140a:	84 23       	and	r24, r20
    140c:	8c 93       	st	X, r24
			}
		}
	}
}
    140e:	27 96       	adiw	r28, 0x07	; 7
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	cf 91       	pop	r28
    141c:	df 91       	pop	r29
    141e:	08 95       	ret

00001420 <DIO_SetPortValue>:
//set port value
void DIO_SetPortValue(u8 u8PortIdCopy,u8 u8PortValCopy)
{
    1420:	df 93       	push	r29
    1422:	cf 93       	push	r28
    1424:	00 d0       	rcall	.+0      	; 0x1426 <DIO_SetPortValue+0x6>
    1426:	00 d0       	rcall	.+0      	; 0x1428 <DIO_SetPortValue+0x8>
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	89 83       	std	Y+1, r24	; 0x01
    142e:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8PortIdCopy)
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	3c 83       	std	Y+4, r19	; 0x04
    1438:	2b 83       	std	Y+3, r18	; 0x03
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	91 05       	cpc	r25, r1
    1442:	d1 f0       	breq	.+52     	; 0x1478 <DIO_SetPortValue+0x58>
    1444:	2b 81       	ldd	r18, Y+3	; 0x03
    1446:	3c 81       	ldd	r19, Y+4	; 0x04
    1448:	22 30       	cpi	r18, 0x02	; 2
    144a:	31 05       	cpc	r19, r1
    144c:	2c f4       	brge	.+10     	; 0x1458 <DIO_SetPortValue+0x38>
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	61 f0       	breq	.+24     	; 0x146e <DIO_SetPortValue+0x4e>
    1456:	1e c0       	rjmp	.+60     	; 0x1494 <DIO_SetPortValue+0x74>
    1458:	2b 81       	ldd	r18, Y+3	; 0x03
    145a:	3c 81       	ldd	r19, Y+4	; 0x04
    145c:	22 30       	cpi	r18, 0x02	; 2
    145e:	31 05       	cpc	r19, r1
    1460:	81 f0       	breq	.+32     	; 0x1482 <DIO_SetPortValue+0x62>
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	9c 81       	ldd	r25, Y+4	; 0x04
    1466:	83 30       	cpi	r24, 0x03	; 3
    1468:	91 05       	cpc	r25, r1
    146a:	81 f0       	breq	.+32     	; 0x148c <DIO_SetPortValue+0x6c>
    146c:	13 c0       	rjmp	.+38     	; 0x1494 <DIO_SetPortValue+0x74>
	{
	case DIO_PORTA: PORTA = u8PortValCopy; break;
    146e:	eb e3       	ldi	r30, 0x3B	; 59
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	80 83       	st	Z, r24
    1476:	0e c0       	rjmp	.+28     	; 0x1494 <DIO_SetPortValue+0x74>
	case DIO_PORTB: PORTB = u8PortValCopy; break;
    1478:	e8 e3       	ldi	r30, 0x38	; 56
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	80 83       	st	Z, r24
    1480:	09 c0       	rjmp	.+18     	; 0x1494 <DIO_SetPortValue+0x74>
	case DIO_PORTC: PORTC = u8PortValCopy; break;
    1482:	e5 e3       	ldi	r30, 0x35	; 53
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	80 83       	st	Z, r24
    148a:	04 c0       	rjmp	.+8      	; 0x1494 <DIO_SetPortValue+0x74>
	case DIO_PORTD: PORTD = u8PortValCopy; break;
    148c:	e2 e3       	ldi	r30, 0x32	; 50
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	80 83       	st	Z, r24
	}
}
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	cf 91       	pop	r28
    149e:	df 91       	pop	r29
    14a0:	08 95       	ret

000014a2 <DIO_SetPinValue>:
//set pin value
void DIO_SetPinValue(u8 u8PortIdCopy,u8 u8PinIdCopy, u8 u8PinValCopy)
{
    14a2:	df 93       	push	r29
    14a4:	cf 93       	push	r28
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	27 97       	sbiw	r28, 0x07	; 7
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	de bf       	out	0x3e, r29	; 62
    14b2:	0f be       	out	0x3f, r0	; 63
    14b4:	cd bf       	out	0x3d, r28	; 61
    14b6:	89 83       	std	Y+1, r24	; 0x01
    14b8:	6a 83       	std	Y+2, r22	; 0x02
    14ba:	4b 83       	std	Y+3, r20	; 0x03
	if((u8PortIdCopy <= DIO_PORTD)&&(u8PinIdCopy <= DIO_PIN7))
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	84 30       	cpi	r24, 0x04	; 4
    14c0:	08 f0       	brcs	.+2      	; 0x14c4 <DIO_SetPinValue+0x22>
    14c2:	ee c0       	rjmp	.+476    	; 0x16a0 <DIO_SetPinValue+0x1fe>
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	88 30       	cpi	r24, 0x08	; 8
    14c8:	08 f0       	brcs	.+2      	; 0x14cc <DIO_SetPinValue+0x2a>
    14ca:	ea c0       	rjmp	.+468    	; 0x16a0 <DIO_SetPinValue+0x1fe>
		{
			if(u8PinValCopy == DIO_HIGH)
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	81 30       	cpi	r24, 0x01	; 1
    14d0:	09 f0       	breq	.+2      	; 0x14d4 <DIO_SetPinValue+0x32>
    14d2:	6f c0       	rjmp	.+222    	; 0x15b2 <DIO_SetPinValue+0x110>
			{
				switch(u8PortIdCopy)
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	3f 83       	std	Y+7, r19	; 0x07
    14dc:	2e 83       	std	Y+6, r18	; 0x06
    14de:	8e 81       	ldd	r24, Y+6	; 0x06
    14e0:	9f 81       	ldd	r25, Y+7	; 0x07
    14e2:	81 30       	cpi	r24, 0x01	; 1
    14e4:	91 05       	cpc	r25, r1
    14e6:	49 f1       	breq	.+82     	; 0x153a <DIO_SetPinValue+0x98>
    14e8:	2e 81       	ldd	r18, Y+6	; 0x06
    14ea:	3f 81       	ldd	r19, Y+7	; 0x07
    14ec:	22 30       	cpi	r18, 0x02	; 2
    14ee:	31 05       	cpc	r19, r1
    14f0:	2c f4       	brge	.+10     	; 0x14fc <DIO_SetPinValue+0x5a>
    14f2:	8e 81       	ldd	r24, Y+6	; 0x06
    14f4:	9f 81       	ldd	r25, Y+7	; 0x07
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	61 f0       	breq	.+24     	; 0x1512 <DIO_SetPinValue+0x70>
    14fa:	d2 c0       	rjmp	.+420    	; 0x16a0 <DIO_SetPinValue+0x1fe>
    14fc:	2e 81       	ldd	r18, Y+6	; 0x06
    14fe:	3f 81       	ldd	r19, Y+7	; 0x07
    1500:	22 30       	cpi	r18, 0x02	; 2
    1502:	31 05       	cpc	r19, r1
    1504:	71 f1       	breq	.+92     	; 0x1562 <DIO_SetPinValue+0xc0>
    1506:	8e 81       	ldd	r24, Y+6	; 0x06
    1508:	9f 81       	ldd	r25, Y+7	; 0x07
    150a:	83 30       	cpi	r24, 0x03	; 3
    150c:	91 05       	cpc	r25, r1
    150e:	e9 f1       	breq	.+122    	; 0x158a <DIO_SetPinValue+0xe8>
    1510:	c7 c0       	rjmp	.+398    	; 0x16a0 <DIO_SetPinValue+0x1fe>
				{
				case DIO_PORTA: Set_Bit(PORTA, u8PinIdCopy); break;
    1512:	ab e3       	ldi	r26, 0x3B	; 59
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	eb e3       	ldi	r30, 0x3B	; 59
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	48 2f       	mov	r20, r24
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 2e       	mov	r0, r18
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <DIO_SetPinValue+0x8e>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	0a 94       	dec	r0
    1532:	e2 f7       	brpl	.-8      	; 0x152c <DIO_SetPinValue+0x8a>
    1534:	84 2b       	or	r24, r20
    1536:	8c 93       	st	X, r24
    1538:	b3 c0       	rjmp	.+358    	; 0x16a0 <DIO_SetPinValue+0x1fe>
				case DIO_PORTB: Set_Bit(PORTB, u8PinIdCopy); break;
    153a:	a8 e3       	ldi	r26, 0x38	; 56
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e8 e3       	ldi	r30, 0x38	; 56
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	48 2f       	mov	r20, r24
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	02 2e       	mov	r0, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <DIO_SetPinValue+0xb6>
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	0a 94       	dec	r0
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <DIO_SetPinValue+0xb2>
    155c:	84 2b       	or	r24, r20
    155e:	8c 93       	st	X, r24
    1560:	9f c0       	rjmp	.+318    	; 0x16a0 <DIO_SetPinValue+0x1fe>
				case DIO_PORTC: Set_Bit(PORTC, u8PinIdCopy); break;
    1562:	a5 e3       	ldi	r26, 0x35	; 53
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e5 e3       	ldi	r30, 0x35	; 53
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	48 2f       	mov	r20, r24
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 2e       	mov	r0, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <DIO_SetPinValue+0xde>
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	0a 94       	dec	r0
    1582:	e2 f7       	brpl	.-8      	; 0x157c <DIO_SetPinValue+0xda>
    1584:	84 2b       	or	r24, r20
    1586:	8c 93       	st	X, r24
    1588:	8b c0       	rjmp	.+278    	; 0x16a0 <DIO_SetPinValue+0x1fe>
				case DIO_PORTD: Set_Bit(PORTD, u8PinIdCopy); break;
    158a:	a2 e3       	ldi	r26, 0x32	; 50
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	e2 e3       	ldi	r30, 0x32	; 50
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	48 2f       	mov	r20, r24
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	02 2e       	mov	r0, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <DIO_SetPinValue+0x106>
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	0a 94       	dec	r0
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <DIO_SetPinValue+0x102>
    15ac:	84 2b       	or	r24, r20
    15ae:	8c 93       	st	X, r24
    15b0:	77 c0       	rjmp	.+238    	; 0x16a0 <DIO_SetPinValue+0x1fe>
				}
			}
			else if(u8PinValCopy == DIO_LOW)
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	88 23       	and	r24, r24
    15b6:	09 f0       	breq	.+2      	; 0x15ba <DIO_SetPinValue+0x118>
    15b8:	73 c0       	rjmp	.+230    	; 0x16a0 <DIO_SetPinValue+0x1fe>
			{
				switch(u8PortIdCopy)
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	3d 83       	std	Y+5, r19	; 0x05
    15c2:	2c 83       	std	Y+4, r18	; 0x04
    15c4:	8c 81       	ldd	r24, Y+4	; 0x04
    15c6:	9d 81       	ldd	r25, Y+5	; 0x05
    15c8:	81 30       	cpi	r24, 0x01	; 1
    15ca:	91 05       	cpc	r25, r1
    15cc:	59 f1       	breq	.+86     	; 0x1624 <DIO_SetPinValue+0x182>
    15ce:	2c 81       	ldd	r18, Y+4	; 0x04
    15d0:	3d 81       	ldd	r19, Y+5	; 0x05
    15d2:	22 30       	cpi	r18, 0x02	; 2
    15d4:	31 05       	cpc	r19, r1
    15d6:	2c f4       	brge	.+10     	; 0x15e2 <DIO_SetPinValue+0x140>
    15d8:	8c 81       	ldd	r24, Y+4	; 0x04
    15da:	9d 81       	ldd	r25, Y+5	; 0x05
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	69 f0       	breq	.+26     	; 0x15fa <DIO_SetPinValue+0x158>
    15e0:	5f c0       	rjmp	.+190    	; 0x16a0 <DIO_SetPinValue+0x1fe>
    15e2:	2c 81       	ldd	r18, Y+4	; 0x04
    15e4:	3d 81       	ldd	r19, Y+5	; 0x05
    15e6:	22 30       	cpi	r18, 0x02	; 2
    15e8:	31 05       	cpc	r19, r1
    15ea:	89 f1       	breq	.+98     	; 0x164e <DIO_SetPinValue+0x1ac>
    15ec:	8c 81       	ldd	r24, Y+4	; 0x04
    15ee:	9d 81       	ldd	r25, Y+5	; 0x05
    15f0:	83 30       	cpi	r24, 0x03	; 3
    15f2:	91 05       	cpc	r25, r1
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <DIO_SetPinValue+0x156>
    15f6:	40 c0       	rjmp	.+128    	; 0x1678 <DIO_SetPinValue+0x1d6>
    15f8:	53 c0       	rjmp	.+166    	; 0x16a0 <DIO_SetPinValue+0x1fe>
				{
				case DIO_PORTA: Clear_Bit(PORTA, u8PinIdCopy); break;
    15fa:	ab e3       	ldi	r26, 0x3B	; 59
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	eb e3       	ldi	r30, 0x3B	; 59
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	48 2f       	mov	r20, r24
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 2e       	mov	r0, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <DIO_SetPinValue+0x176>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	0a 94       	dec	r0
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <DIO_SetPinValue+0x172>
    161c:	80 95       	com	r24
    161e:	84 23       	and	r24, r20
    1620:	8c 93       	st	X, r24
    1622:	3e c0       	rjmp	.+124    	; 0x16a0 <DIO_SetPinValue+0x1fe>
				case DIO_PORTB: Clear_Bit(PORTB, u8PinIdCopy); break;
    1624:	a8 e3       	ldi	r26, 0x38	; 56
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e8 e3       	ldi	r30, 0x38	; 56
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	48 2f       	mov	r20, r24
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 2e       	mov	r0, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <DIO_SetPinValue+0x1a0>
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	0a 94       	dec	r0
    1644:	e2 f7       	brpl	.-8      	; 0x163e <DIO_SetPinValue+0x19c>
    1646:	80 95       	com	r24
    1648:	84 23       	and	r24, r20
    164a:	8c 93       	st	X, r24
    164c:	29 c0       	rjmp	.+82     	; 0x16a0 <DIO_SetPinValue+0x1fe>
				case DIO_PORTC: Clear_Bit(PORTC, u8PinIdCopy); break;
    164e:	a5 e3       	ldi	r26, 0x35	; 53
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e5 e3       	ldi	r30, 0x35	; 53
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	48 2f       	mov	r20, r24
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	02 2e       	mov	r0, r18
    1666:	02 c0       	rjmp	.+4      	; 0x166c <DIO_SetPinValue+0x1ca>
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	0a 94       	dec	r0
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <DIO_SetPinValue+0x1c6>
    1670:	80 95       	com	r24
    1672:	84 23       	and	r24, r20
    1674:	8c 93       	st	X, r24
    1676:	14 c0       	rjmp	.+40     	; 0x16a0 <DIO_SetPinValue+0x1fe>
				case DIO_PORTD: Clear_Bit(PORTD, u8PinIdCopy); break;
    1678:	a2 e3       	ldi	r26, 0x32	; 50
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e2 e3       	ldi	r30, 0x32	; 50
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	48 2f       	mov	r20, r24
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	02 2e       	mov	r0, r18
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <DIO_SetPinValue+0x1f4>
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	0a 94       	dec	r0
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <DIO_SetPinValue+0x1f0>
    169a:	80 95       	com	r24
    169c:	84 23       	and	r24, r20
    169e:	8c 93       	st	X, r24
				}
			}

		}
}
    16a0:	27 96       	adiw	r28, 0x07	; 7
    16a2:	0f b6       	in	r0, 0x3f	; 63
    16a4:	f8 94       	cli
    16a6:	de bf       	out	0x3e, r29	; 62
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	cd bf       	out	0x3d, r28	; 61
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <DIO_GetPinValue>:
//get pin value
u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <DIO_GetPinValue+0x6>
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <DIO_GetPinValue+0x8>
    16ba:	0f 92       	push	r0
    16bc:	cd b7       	in	r28, 0x3d	; 61
    16be:	de b7       	in	r29, 0x3e	; 62
    16c0:	8a 83       	std	Y+2, r24	; 0x02
    16c2:	6b 83       	std	Y+3, r22	; 0x03
	u8 u8ResultLocal;
	if((u8PortIdCopy <= DIO_PORTD) && (u8PinIdCopy <= DIO_PIN7))
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	84 30       	cpi	r24, 0x04	; 4
    16c8:	08 f0       	brcs	.+2      	; 0x16cc <DIO_GetPinValue+0x1a>
    16ca:	6b c0       	rjmp	.+214    	; 0x17a2 <DIO_GetPinValue+0xf0>
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	88 30       	cpi	r24, 0x08	; 8
    16d0:	08 f0       	brcs	.+2      	; 0x16d4 <DIO_GetPinValue+0x22>
    16d2:	67 c0       	rjmp	.+206    	; 0x17a2 <DIO_GetPinValue+0xf0>
	{
		switch(u8PortIdCopy)
    16d4:	8a 81       	ldd	r24, Y+2	; 0x02
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	3d 83       	std	Y+5, r19	; 0x05
    16dc:	2c 83       	std	Y+4, r18	; 0x04
    16de:	4c 81       	ldd	r20, Y+4	; 0x04
    16e0:	5d 81       	ldd	r21, Y+5	; 0x05
    16e2:	41 30       	cpi	r20, 0x01	; 1
    16e4:	51 05       	cpc	r21, r1
    16e6:	41 f1       	breq	.+80     	; 0x1738 <DIO_GetPinValue+0x86>
    16e8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ea:	9d 81       	ldd	r25, Y+5	; 0x05
    16ec:	82 30       	cpi	r24, 0x02	; 2
    16ee:	91 05       	cpc	r25, r1
    16f0:	34 f4       	brge	.+12     	; 0x16fe <DIO_GetPinValue+0x4c>
    16f2:	2c 81       	ldd	r18, Y+4	; 0x04
    16f4:	3d 81       	ldd	r19, Y+5	; 0x05
    16f6:	21 15       	cp	r18, r1
    16f8:	31 05       	cpc	r19, r1
    16fa:	61 f0       	breq	.+24     	; 0x1714 <DIO_GetPinValue+0x62>
    16fc:	52 c0       	rjmp	.+164    	; 0x17a2 <DIO_GetPinValue+0xf0>
    16fe:	4c 81       	ldd	r20, Y+4	; 0x04
    1700:	5d 81       	ldd	r21, Y+5	; 0x05
    1702:	42 30       	cpi	r20, 0x02	; 2
    1704:	51 05       	cpc	r21, r1
    1706:	51 f1       	breq	.+84     	; 0x175c <DIO_GetPinValue+0xaa>
    1708:	8c 81       	ldd	r24, Y+4	; 0x04
    170a:	9d 81       	ldd	r25, Y+5	; 0x05
    170c:	83 30       	cpi	r24, 0x03	; 3
    170e:	91 05       	cpc	r25, r1
    1710:	b9 f1       	breq	.+110    	; 0x1780 <DIO_GetPinValue+0xce>
    1712:	47 c0       	rjmp	.+142    	; 0x17a2 <DIO_GetPinValue+0xf0>
		{
		case DIO_PORTA: u8ResultLocal = Read_Bit(PINA, u8PinIdCopy); break;
    1714:	e9 e3       	ldi	r30, 0x39	; 57
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	88 2f       	mov	r24, r24
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	a9 01       	movw	r20, r18
    1726:	02 c0       	rjmp	.+4      	; 0x172c <DIO_GetPinValue+0x7a>
    1728:	55 95       	asr	r21
    172a:	47 95       	ror	r20
    172c:	8a 95       	dec	r24
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <DIO_GetPinValue+0x76>
    1730:	ca 01       	movw	r24, r20
    1732:	81 70       	andi	r24, 0x01	; 1
    1734:	89 83       	std	Y+1, r24	; 0x01
    1736:	35 c0       	rjmp	.+106    	; 0x17a2 <DIO_GetPinValue+0xf0>
		case DIO_PORTB: u8ResultLocal = Read_Bit(PINB, u8PinIdCopy); break;
    1738:	e6 e3       	ldi	r30, 0x36	; 54
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	88 2f       	mov	r24, r24
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	a9 01       	movw	r20, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <DIO_GetPinValue+0x9e>
    174c:	55 95       	asr	r21
    174e:	47 95       	ror	r20
    1750:	8a 95       	dec	r24
    1752:	e2 f7       	brpl	.-8      	; 0x174c <DIO_GetPinValue+0x9a>
    1754:	ca 01       	movw	r24, r20
    1756:	81 70       	andi	r24, 0x01	; 1
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	23 c0       	rjmp	.+70     	; 0x17a2 <DIO_GetPinValue+0xf0>
		case DIO_PORTC: u8ResultLocal = Read_Bit(PINC, u8PinIdCopy); break;
    175c:	e3 e3       	ldi	r30, 0x33	; 51
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	88 2f       	mov	r24, r24
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	a9 01       	movw	r20, r18
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <DIO_GetPinValue+0xc2>
    1770:	55 95       	asr	r21
    1772:	47 95       	ror	r20
    1774:	8a 95       	dec	r24
    1776:	e2 f7       	brpl	.-8      	; 0x1770 <DIO_GetPinValue+0xbe>
    1778:	ca 01       	movw	r24, r20
    177a:	81 70       	andi	r24, 0x01	; 1
    177c:	89 83       	std	Y+1, r24	; 0x01
    177e:	11 c0       	rjmp	.+34     	; 0x17a2 <DIO_GetPinValue+0xf0>
		case DIO_PORTD: u8ResultLocal = Read_Bit(PIND, u8PinIdCopy); break;
    1780:	e0 e3       	ldi	r30, 0x30	; 48
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	88 2f       	mov	r24, r24
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	a9 01       	movw	r20, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <DIO_GetPinValue+0xe6>
    1794:	55 95       	asr	r21
    1796:	47 95       	ror	r20
    1798:	8a 95       	dec	r24
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <DIO_GetPinValue+0xe2>
    179c:	ca 01       	movw	r24, r20
    179e:	81 70       	andi	r24, 0x01	; 1
    17a0:	89 83       	std	Y+1, r24	; 0x01
		}

	}
	return u8ResultLocal;
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <SERVO_INIT>:
#include "Servo_motor.h"
#include <avr/io.h>


void SERVO_INIT(void)
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
	//set PORTD pin 5, 4 as output
	DIO_SetPinDirection(DIO_PORTD , DIO_PIN5, DIO_PIN_OUTPUT);
    17bc:	83 e0       	ldi	r24, 0x03	; 3
    17be:	65 e0       	ldi	r22, 0x05	; 5
    17c0:	41 e0       	ldi	r20, 0x01	; 1
    17c2:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD , DIO_PIN4, DIO_PIN_OUTPUT);
    17c6:	83 e0       	ldi	r24, 0x03	; 3
    17c8:	64 e0       	ldi	r22, 0x04	; 4
    17ca:	41 e0       	ldi	r20, 0x01	; 1
    17cc:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_SetPinDirection>
	//Timer1 as Fast PWM, TOP in ICR1, Clear OC1A on compare match, prescalar -> 8
	TIMER1_Init();
    17d0:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <TIMER1_Init>
	TIMER1_voidSetISR(19999);
    17d4:	8f e1       	ldi	r24, 0x1F	; 31
    17d6:	9e e4       	ldi	r25, 0x4E	; 78
    17d8:	0e 94 53 08 	call	0x10a6	; 0x10a6 <TIMER1_voidSetISR>
	TCNT1=0;
    17dc:	ec e4       	ldi	r30, 0x4C	; 76
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	11 82       	std	Z+1, r1	; 0x01
    17e2:	10 82       	st	Z, r1
	SERVO_CLOSE_DOOR();
    17e4:	0e 94 04 0c 	call	0x1808	; 0x1808 <SERVO_CLOSE_DOOR>
	SERVO_CLOSE_GARAGE();
    17e8:	0e 94 1a 0c 	call	0x1834	; 0x1834 <SERVO_CLOSE_GARAGE>

}
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	08 95       	ret

000017f2 <SERVO_OPEN_DOOR>:

void SERVO_OPEN_DOOR(void)
{
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
	//2ms -> +90 degree
	//tick time = 8/8MHZ = 1x10^6
	//2ms/1us = 2000
	TIMER1_voidSetChannelAtCompMatch(2000);
    17fa:	80 ed       	ldi	r24, 0xD0	; 208
    17fc:	97 e0       	ldi	r25, 0x07	; 7
    17fe:	0e 94 2f 08 	call	0x105e	; 0x105e <TIMER1_voidSetChannelAtCompMatch>
}
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret

00001808 <SERVO_CLOSE_DOOR>:

void SERVO_CLOSE_DOOR(void)
{
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
	//1.5ms -> 0 degree
	//tick time = 8/8MHZ = 1x10^6
	//1.5ms/1us = 2000
	TIMER1_voidSetChannelAtCompMatch(1500);
    1810:	8c ed       	ldi	r24, 0xDC	; 220
    1812:	95 e0       	ldi	r25, 0x05	; 5
    1814:	0e 94 2f 08 	call	0x105e	; 0x105e <TIMER1_voidSetChannelAtCompMatch>
}
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <SERVO_OPEN_GARAGE>:

void SERVO_OPEN_GARAGE(void)
{
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
	//2ms -> +90 degree
	//tick time = 8/8MHZ = 1x10^6
	//2ms/1us = 2000
	TIMER1_voidSetChanne2AtCompMatch(2000);
    1826:	80 ed       	ldi	r24, 0xD0	; 208
    1828:	97 e0       	ldi	r25, 0x07	; 7
    182a:	0e 94 41 08 	call	0x1082	; 0x1082 <TIMER1_voidSetChanne2AtCompMatch>
}
    182e:	cf 91       	pop	r28
    1830:	df 91       	pop	r29
    1832:	08 95       	ret

00001834 <SERVO_CLOSE_GARAGE>:

void SERVO_CLOSE_GARAGE(void)
{
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
	//2ms -> +90 degree
	//tick time = 8/8MHZ = 1x10^6
	//2ms/1us = 1500
	TIMER1_voidSetChanne2AtCompMatch(1500);
    183c:	8c ed       	ldi	r24, 0xDC	; 220
    183e:	95 e0       	ldi	r25, 0x05	; 5
    1840:	0e 94 41 08 	call	0x1082	; 0x1082 <TIMER1_voidSetChanne2AtCompMatch>
}
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	08 95       	ret

0000184a <DOOR_STATUS>:


u8 DOOR_STATUS(void)
{
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	00 d0       	rcall	.+0      	; 0x1850 <DOOR_STATUS+0x6>
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
	if(OCR1A == 2000)
    1854:	ea e4       	ldi	r30, 0x4A	; 74
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	91 81       	ldd	r25, Z+1	; 0x01
    185c:	27 e0       	ldi	r18, 0x07	; 7
    185e:	80 3d       	cpi	r24, 0xD0	; 208
    1860:	92 07       	cpc	r25, r18
    1862:	19 f4       	brne	.+6      	; 0x186a <DOOR_STATUS+0x20>
	{
		return DOOR_OPEN;
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	89 83       	std	Y+1, r24	; 0x01
    1868:	0b c0       	rjmp	.+22     	; 0x1880 <DOOR_STATUS+0x36>
	}
	else if(OCR1B == 1500)
    186a:	e8 e4       	ldi	r30, 0x48	; 72
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	91 81       	ldd	r25, Z+1	; 0x01
    1872:	25 e0       	ldi	r18, 0x05	; 5
    1874:	8c 3d       	cpi	r24, 0xDC	; 220
    1876:	92 07       	cpc	r25, r18
    1878:	11 f4       	brne	.+4      	; 0x187e <DOOR_STATUS+0x34>
	{
		return DOOR_CLOSED;
    187a:	19 82       	std	Y+1, r1	; 0x01
    187c:	01 c0       	rjmp	.+2      	; 0x1880 <DOOR_STATUS+0x36>
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <DOOR_STATUS+0x3a>
	}
}
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	8a 83       	std	Y+2, r24	; 0x02
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <GARAGE_STATUS>:
u8 GARAGE_STATUS(void)
{
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	00 d0       	rcall	.+0      	; 0x1896 <GARAGE_STATUS+0x6>
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
	if(OCR1B == 2000)
    189a:	e8 e4       	ldi	r30, 0x48	; 72
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	91 81       	ldd	r25, Z+1	; 0x01
    18a2:	27 e0       	ldi	r18, 0x07	; 7
    18a4:	80 3d       	cpi	r24, 0xD0	; 208
    18a6:	92 07       	cpc	r25, r18
    18a8:	19 f4       	brne	.+6      	; 0x18b0 <GARAGE_STATUS+0x20>
	{
		return GARAGE_OPEN;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	0b c0       	rjmp	.+22     	; 0x18c6 <GARAGE_STATUS+0x36>
	}
	else if(OCR1B == 1500)
    18b0:	e8 e4       	ldi	r30, 0x48	; 72
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	91 81       	ldd	r25, Z+1	; 0x01
    18b8:	25 e0       	ldi	r18, 0x05	; 5
    18ba:	8c 3d       	cpi	r24, 0xDC	; 220
    18bc:	92 07       	cpc	r25, r18
    18be:	11 f4       	brne	.+4      	; 0x18c4 <GARAGE_STATUS+0x34>
	{
		return GARAGE_CLOSED;
    18c0:	19 82       	std	Y+1, r1	; 0x01
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <GARAGE_STATUS+0x36>
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <GARAGE_STATUS+0x3a>
	}
}
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	8a 83       	std	Y+2, r24	; 0x02
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <LED_voidInit>:
 */
#include"LED.h"
#include<avr/io.h>

void LED_voidInit(u8 PortName, u8 PinNumber)
{
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	00 d0       	rcall	.+0      	; 0x18dc <LED_voidInit+0x6>
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	89 83       	std	Y+1, r24	; 0x01
    18e2:	6a 83       	std	Y+2, r22	; 0x02
	//set wanted pin as output
	DIO_SetPinDirection(PortName, PinNumber, DIO_PIN_OUTPUT);
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	6a 81       	ldd	r22, Y+2	; 0x02
    18e8:	41 e0       	ldi	r20, 0x01	; 1
    18ea:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_SetPinDirection>
}
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <LED_voidTurnON>:

void LED_voidTurnON(u8 PortName, u8 PinNumber)
{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <LED_voidTurnON+0x6>
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	89 83       	std	Y+1, r24	; 0x01
    1904:	6a 83       	std	Y+2, r22	; 0x02
	//set wanted pin to one (ON)
	DIO_SetPinValue(PortName, PinNumber, DIO_HIGH);
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	6a 81       	ldd	r22, Y+2	; 0x02
    190a:	41 e0       	ldi	r20, 0x01	; 1
    190c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <DIO_SetPinValue>
}
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <LED_voidTurnOFF>:

void LED_voidTurnOFF(u8 PortName, u8 PinNumber)
{
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	00 d0       	rcall	.+0      	; 0x1920 <LED_voidTurnOFF+0x6>
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	89 83       	std	Y+1, r24	; 0x01
    1926:	6a 83       	std	Y+2, r22	; 0x02
	//set wanted pin to one (OFF)
	DIO_SetPinValue(PortName, PinNumber, DIO_LOW);
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	6a 81       	ldd	r22, Y+2	; 0x02
    192c:	40 e0       	ldi	r20, 0x00	; 0
    192e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <DIO_SetPinValue>
}
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <LED_u8CheckStatus>:

u8 LED_u8CheckStatus(u8 PortName, u8 PinNumber)
{
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	00 d0       	rcall	.+0      	; 0x1942 <LED_u8CheckStatus+0x6>
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	89 83       	std	Y+1, r24	; 0x01
    1948:	6a 83       	std	Y+2, r22	; 0x02
	return DIO_GetPinValue(PortName,PinNumber);
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	6a 81       	ldd	r22, Y+2	; 0x02
    194e:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <DIO_GetPinValue>
}
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <LCD_KICK>:
 *  Created on: Aug 20, 2023
 *      Author: user
 */
#include "LCD.h"

void LCD_KICK(void){
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	2e 97       	sbiw	r28, 0x0e	; 14
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	cd bf       	out	0x3d, r28	; 61
	LCD_CONTROL &= ~(1<<EN_SWITCH);
    1970:	a2 e3       	ldi	r26, 0x32	; 50
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e2 e3       	ldi	r30, 0x32	; 50
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	87 7f       	andi	r24, 0xF7	; 247
    197c:	8c 93       	st	X, r24
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	a8 e4       	ldi	r26, 0x48	; 72
    1984:	b2 e4       	ldi	r27, 0x42	; 66
    1986:	8b 87       	std	Y+11, r24	; 0x0b
    1988:	9c 87       	std	Y+12, r25	; 0x0c
    198a:	ad 87       	std	Y+13, r26	; 0x0d
    198c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1990:	7c 85       	ldd	r23, Y+12	; 0x0c
    1992:	8d 85       	ldd	r24, Y+13	; 0x0d
    1994:	9e 85       	ldd	r25, Y+14	; 0x0e
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	4a ef       	ldi	r20, 0xFA	; 250
    199c:	54 e4       	ldi	r21, 0x44	; 68
    199e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	8f 83       	std	Y+7, r24	; 0x07
    19a8:	98 87       	std	Y+8, r25	; 0x08
    19aa:	a9 87       	std	Y+9, r26	; 0x09
    19ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ae:	6f 81       	ldd	r22, Y+7	; 0x07
    19b0:	78 85       	ldd	r23, Y+8	; 0x08
    19b2:	89 85       	ldd	r24, Y+9	; 0x09
    19b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e8       	ldi	r20, 0x80	; 128
    19bc:	5f e3       	ldi	r21, 0x3F	; 63
    19be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c2:	88 23       	and	r24, r24
    19c4:	2c f4       	brge	.+10     	; 0x19d0 <LCD_KICK+0x74>
		__ticks = 1;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	9e 83       	std	Y+6, r25	; 0x06
    19cc:	8d 83       	std	Y+5, r24	; 0x05
    19ce:	3f c0       	rjmp	.+126    	; 0x1a4e <LCD_KICK+0xf2>
	else if (__tmp > 65535)
    19d0:	6f 81       	ldd	r22, Y+7	; 0x07
    19d2:	78 85       	ldd	r23, Y+8	; 0x08
    19d4:	89 85       	ldd	r24, Y+9	; 0x09
    19d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	3f ef       	ldi	r19, 0xFF	; 255
    19dc:	4f e7       	ldi	r20, 0x7F	; 127
    19de:	57 e4       	ldi	r21, 0x47	; 71
    19e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e4:	18 16       	cp	r1, r24
    19e6:	4c f5       	brge	.+82     	; 0x1a3a <LCD_KICK+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e2       	ldi	r20, 0x20	; 32
    19f6:	51 e4       	ldi	r21, 0x41	; 65
    19f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	bc 01       	movw	r22, r24
    1a02:	cd 01       	movw	r24, r26
    1a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	9e 83       	std	Y+6, r25	; 0x06
    1a0e:	8d 83       	std	Y+5, r24	; 0x05
    1a10:	0f c0       	rjmp	.+30     	; 0x1a30 <LCD_KICK+0xd4>
    1a12:	88 ec       	ldi	r24, 0xC8	; 200
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	9c 83       	std	Y+4, r25	; 0x04
    1a18:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <LCD_KICK+0xc2>
    1a22:	9c 83       	std	Y+4, r25	; 0x04
    1a24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a26:	8d 81       	ldd	r24, Y+5	; 0x05
    1a28:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	9e 83       	std	Y+6, r25	; 0x06
    1a2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a30:	8d 81       	ldd	r24, Y+5	; 0x05
    1a32:	9e 81       	ldd	r25, Y+6	; 0x06
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	69 f7       	brne	.-38     	; 0x1a12 <LCD_KICK+0xb6>
    1a38:	14 c0       	rjmp	.+40     	; 0x1a62 <LCD_KICK+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3c:	78 85       	ldd	r23, Y+8	; 0x08
    1a3e:	89 85       	ldd	r24, Y+9	; 0x09
    1a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	9e 83       	std	Y+6, r25	; 0x06
    1a4c:	8d 83       	std	Y+5, r24	; 0x05
    1a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a50:	9e 81       	ldd	r25, Y+6	; 0x06
    1a52:	9a 83       	std	Y+2, r25	; 0x02
    1a54:	89 83       	std	Y+1, r24	; 0x01
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
    1a58:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <LCD_KICK+0xfe>
    1a5e:	9a 83       	std	Y+2, r25	; 0x02
    1a60:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	LCD_CONTROL |= (1<<EN_SWITCH);
    1a62:	a2 e3       	ldi	r26, 0x32	; 50
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e2 e3       	ldi	r30, 0x32	; 50
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	88 60       	ori	r24, 0x08	; 8
    1a6e:	8c 93       	st	X, r24

}
    1a70:	2e 96       	adiw	r28, 0x0e	; 14
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	cd bf       	out	0x3d, r28	; 61
    1a7c:	cf 91       	pop	r28
    1a7e:	df 91       	pop	r29
    1a80:	08 95       	ret

00001a82 <LCD_IS_BUSY_CHECK>:

void LCD_IS_BUSY_CHECK(void){
    1a82:	df 93       	push	r29
    1a84:	cf 93       	push	r28
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
	DATA_DIR_LCD_PORT = 0x00;
    1a8a:	e4 e3       	ldi	r30, 0x34	; 52
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	10 82       	st	Z, r1
	LCD_CONTROL |= (1<< RW);
    1a90:	a2 e3       	ldi	r26, 0x32	; 50
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e2 e3       	ldi	r30, 0x32	; 50
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	84 60       	ori	r24, 0x04	; 4
    1a9c:	8c 93       	st	X, r24
	LCD_CONTROL &= ~(1<< RS_SWITCH);
    1a9e:	a2 e3       	ldi	r26, 0x32	; 50
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e2 e3       	ldi	r30, 0x32	; 50
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	8d 7f       	andi	r24, 0xFD	; 253
    1aaa:	8c 93       	st	X, r24

	LCD_KICK();
    1aac:	0e 94 ae 0c 	call	0x195c	; 0x195c <LCD_KICK>

	DATA_DIR_LCD_PORT = 0xFF;
    1ab0:	e4 e3       	ldi	r30, 0x34	; 52
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	8f ef       	ldi	r24, 0xFF	; 255
    1ab6:	80 83       	st	Z, r24
	LCD_CONTROL &= ~(1<<RW);
    1ab8:	a2 e3       	ldi	r26, 0x32	; 50
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e2 e3       	ldi	r30, 0x32	; 50
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	8b 7f       	andi	r24, 0xFB	; 251
    1ac4:	8c 93       	st	X, r24
}
    1ac6:	cf 91       	pop	r28
    1ac8:	df 91       	pop	r29
    1aca:	08 95       	ret

00001acc <LCD_INIT>:

void LCD_INIT(void){
    1acc:	df 93       	push	r29
    1ace:	cf 93       	push	r28
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
    1ad4:	6c 97       	sbiw	r28, 0x1c	; 28
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	f8 94       	cli
    1ada:	de bf       	out	0x3e, r29	; 62
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	cd bf       	out	0x3d, r28	; 61
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	a0 ea       	ldi	r26, 0xA0	; 160
    1ae6:	b1 e4       	ldi	r27, 0x41	; 65
    1ae8:	89 8f       	std	Y+25, r24	; 0x19
    1aea:	9a 8f       	std	Y+26, r25	; 0x1a
    1aec:	ab 8f       	std	Y+27, r26	; 0x1b
    1aee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af0:	69 8d       	ldd	r22, Y+25	; 0x19
    1af2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1af4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1af6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	4a ef       	ldi	r20, 0xFA	; 250
    1afe:	54 e4       	ldi	r21, 0x44	; 68
    1b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	8d 8b       	std	Y+21, r24	; 0x15
    1b0a:	9e 8b       	std	Y+22, r25	; 0x16
    1b0c:	af 8b       	std	Y+23, r26	; 0x17
    1b0e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b10:	6d 89       	ldd	r22, Y+21	; 0x15
    1b12:	7e 89       	ldd	r23, Y+22	; 0x16
    1b14:	8f 89       	ldd	r24, Y+23	; 0x17
    1b16:	98 8d       	ldd	r25, Y+24	; 0x18
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e8       	ldi	r20, 0x80	; 128
    1b1e:	5f e3       	ldi	r21, 0x3F	; 63
    1b20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b24:	88 23       	and	r24, r24
    1b26:	2c f4       	brge	.+10     	; 0x1b32 <LCD_INIT+0x66>
		__ticks = 1;
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	9c 8b       	std	Y+20, r25	; 0x14
    1b2e:	8b 8b       	std	Y+19, r24	; 0x13
    1b30:	3f c0       	rjmp	.+126    	; 0x1bb0 <LCD_INIT+0xe4>
	else if (__tmp > 65535)
    1b32:	6d 89       	ldd	r22, Y+21	; 0x15
    1b34:	7e 89       	ldd	r23, Y+22	; 0x16
    1b36:	8f 89       	ldd	r24, Y+23	; 0x17
    1b38:	98 8d       	ldd	r25, Y+24	; 0x18
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	3f ef       	ldi	r19, 0xFF	; 255
    1b3e:	4f e7       	ldi	r20, 0x7F	; 127
    1b40:	57 e4       	ldi	r21, 0x47	; 71
    1b42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b46:	18 16       	cp	r1, r24
    1b48:	4c f5       	brge	.+82     	; 0x1b9c <LCD_INIT+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4a:	69 8d       	ldd	r22, Y+25	; 0x19
    1b4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e2       	ldi	r20, 0x20	; 32
    1b58:	51 e4       	ldi	r21, 0x41	; 65
    1b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	bc 01       	movw	r22, r24
    1b64:	cd 01       	movw	r24, r26
    1b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	9c 8b       	std	Y+20, r25	; 0x14
    1b70:	8b 8b       	std	Y+19, r24	; 0x13
    1b72:	0f c0       	rjmp	.+30     	; 0x1b92 <LCD_INIT+0xc6>
    1b74:	88 ec       	ldi	r24, 0xC8	; 200
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	9a 8b       	std	Y+18, r25	; 0x12
    1b7a:	89 8b       	std	Y+17, r24	; 0x11
    1b7c:	89 89       	ldd	r24, Y+17	; 0x11
    1b7e:	9a 89       	ldd	r25, Y+18	; 0x12
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	f1 f7       	brne	.-4      	; 0x1b80 <LCD_INIT+0xb4>
    1b84:	9a 8b       	std	Y+18, r25	; 0x12
    1b86:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b88:	8b 89       	ldd	r24, Y+19	; 0x13
    1b8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b8c:	01 97       	sbiw	r24, 0x01	; 1
    1b8e:	9c 8b       	std	Y+20, r25	; 0x14
    1b90:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b92:	8b 89       	ldd	r24, Y+19	; 0x13
    1b94:	9c 89       	ldd	r25, Y+20	; 0x14
    1b96:	00 97       	sbiw	r24, 0x00	; 0
    1b98:	69 f7       	brne	.-38     	; 0x1b74 <LCD_INIT+0xa8>
    1b9a:	14 c0       	rjmp	.+40     	; 0x1bc4 <LCD_INIT+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	9c 8b       	std	Y+20, r25	; 0x14
    1bae:	8b 8b       	std	Y+19, r24	; 0x13
    1bb0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb4:	98 8b       	std	Y+16, r25	; 0x10
    1bb6:	8f 87       	std	Y+15, r24	; 0x0f
    1bb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bba:	98 89       	ldd	r25, Y+16	; 0x10
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <LCD_INIT+0xf0>
    1bc0:	98 8b       	std	Y+16, r25	; 0x10
    1bc2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	DATA_DIR_LCD_CONTROL |= (1<<EN_SWITCH | 1<<RW | 1<<RS_SWITCH);
    1bc4:	a1 e3       	ldi	r26, 0x31	; 49
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e1 e3       	ldi	r30, 0x31	; 49
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	8e 60       	ori	r24, 0x0E	; 14
    1bd0:	8c 93       	st	X, r24
	LCD_CONTROL &= ~(1<<EN_SWITCH | 1<<RW | 1<<RS_SWITCH);
    1bd2:	a2 e3       	ldi	r26, 0x32	; 50
    1bd4:	b0 e0       	ldi	r27, 0x00	; 0
    1bd6:	e2 e3       	ldi	r30, 0x32	; 50
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	81 7f       	andi	r24, 0xF1	; 241
    1bde:	8c 93       	st	X, r24

	DATA_DIR_LCD_PORT = 0xFF;
    1be0:	e4 e3       	ldi	r30, 0x34	; 52
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	8f ef       	ldi	r24, 0xFF	; 255
    1be6:	80 83       	st	Z, r24
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	a0 e7       	ldi	r26, 0x70	; 112
    1bee:	b1 e4       	ldi	r27, 0x41	; 65
    1bf0:	8b 87       	std	Y+11, r24	; 0x0b
    1bf2:	9c 87       	std	Y+12, r25	; 0x0c
    1bf4:	ad 87       	std	Y+13, r26	; 0x0d
    1bf6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	4a ef       	ldi	r20, 0xFA	; 250
    1c06:	54 e4       	ldi	r21, 0x44	; 68
    1c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	8f 83       	std	Y+7, r24	; 0x07
    1c12:	98 87       	std	Y+8, r25	; 0x08
    1c14:	a9 87       	std	Y+9, r26	; 0x09
    1c16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c18:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1a:	78 85       	ldd	r23, Y+8	; 0x08
    1c1c:	89 85       	ldd	r24, Y+9	; 0x09
    1c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e8       	ldi	r20, 0x80	; 128
    1c26:	5f e3       	ldi	r21, 0x3F	; 63
    1c28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c2c:	88 23       	and	r24, r24
    1c2e:	2c f4       	brge	.+10     	; 0x1c3a <LCD_INIT+0x16e>
		__ticks = 1;
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	9e 83       	std	Y+6, r25	; 0x06
    1c36:	8d 83       	std	Y+5, r24	; 0x05
    1c38:	3f c0       	rjmp	.+126    	; 0x1cb8 <LCD_INIT+0x1ec>
	else if (__tmp > 65535)
    1c3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3c:	78 85       	ldd	r23, Y+8	; 0x08
    1c3e:	89 85       	ldd	r24, Y+9	; 0x09
    1c40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	3f ef       	ldi	r19, 0xFF	; 255
    1c46:	4f e7       	ldi	r20, 0x7F	; 127
    1c48:	57 e4       	ldi	r21, 0x47	; 71
    1c4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c4e:	18 16       	cp	r1, r24
    1c50:	4c f5       	brge	.+82     	; 0x1ca4 <LCD_INIT+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e2       	ldi	r20, 0x20	; 32
    1c60:	51 e4       	ldi	r21, 0x41	; 65
    1c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	bc 01       	movw	r22, r24
    1c6c:	cd 01       	movw	r24, r26
    1c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	9e 83       	std	Y+6, r25	; 0x06
    1c78:	8d 83       	std	Y+5, r24	; 0x05
    1c7a:	0f c0       	rjmp	.+30     	; 0x1c9a <LCD_INIT+0x1ce>
    1c7c:	88 ec       	ldi	r24, 0xC8	; 200
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	9c 83       	std	Y+4, r25	; 0x04
    1c82:	8b 83       	std	Y+3, r24	; 0x03
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	9c 81       	ldd	r25, Y+4	; 0x04
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	f1 f7       	brne	.-4      	; 0x1c88 <LCD_INIT+0x1bc>
    1c8c:	9c 83       	std	Y+4, r25	; 0x04
    1c8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c90:	8d 81       	ldd	r24, Y+5	; 0x05
    1c92:	9e 81       	ldd	r25, Y+6	; 0x06
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	9e 83       	std	Y+6, r25	; 0x06
    1c98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9e:	00 97       	sbiw	r24, 0x00	; 0
    1ca0:	69 f7       	brne	.-38     	; 0x1c7c <LCD_INIT+0x1b0>
    1ca2:	14 c0       	rjmp	.+40     	; 0x1ccc <LCD_INIT+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ca4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca6:	78 85       	ldd	r23, Y+8	; 0x08
    1ca8:	89 85       	ldd	r24, Y+9	; 0x09
    1caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	9e 83       	std	Y+6, r25	; 0x06
    1cb6:	8d 83       	std	Y+5, r24	; 0x05
    1cb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cba:	9e 81       	ldd	r25, Y+6	; 0x06
    1cbc:	9a 83       	std	Y+2, r25	; 0x02
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	f1 f7       	brne	.-4      	; 0x1cc4 <LCD_INIT+0x1f8>
    1cc8:	9a 83       	std	Y+2, r25	; 0x02
    1cca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15);

	LCD_CLEAR_ALL_SCREEN();
    1ccc:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_CLEAR_ALL_SCREEN>

#ifdef EIGHT_BIT_MODE
	LCD_SEND_A_COMMAND(LCD_FUNCTION_8BIT_2LINES);
    1cd0:	88 e3       	ldi	r24, 0x38	; 56
    1cd2:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <LCD_SEND_A_COMMAND>
#ifdef FOUR_BIT_MODE
	LCD_SEND_A_COMMAND(0x02);
	LCD_SEND_A_COMMAND(LCD_FUNCTION_4BIT_2LINES);
#endif

	LCD_SEND_A_COMMAND(LCD_ENTRY_MODE);
    1cd6:	86 e0       	ldi	r24, 0x06	; 6
    1cd8:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <LCD_SEND_A_COMMAND>
	LCD_SEND_A_COMMAND(LCD_BEGIN_AT_FIRST_RAW);
    1cdc:	80 e8       	ldi	r24, 0x80	; 128
    1cde:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <LCD_SEND_A_COMMAND>
	LCD_SEND_A_COMMAND(LCD_DISP_ON_CURSOR_OFF);
    1ce2:	8c e0       	ldi	r24, 0x0C	; 12
    1ce4:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <LCD_SEND_A_COMMAND>


}
    1ce8:	6c 96       	adiw	r28, 0x1c	; 28
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <LCD_CLEAR_ALL_SCREEN>:

void LCD_CLEAR_ALL_SCREEN(void){
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
	LCD_SEND_A_COMMAND(LCD_CLEAR_SCREEN);
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <LCD_SEND_A_COMMAND>
}
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	08 95       	ret

00001d0e <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position){
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	00 d0       	rcall	.+0      	; 0x1d14 <LCD_GOTO_XY+0x6>
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	89 83       	std	Y+1, r24	; 0x01
    1d1a:	6a 83       	std	Y+2, r22	; 0x02
	if(line == 0)
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	88 23       	and	r24, r24
    1d20:	41 f4       	brne	.+16     	; 0x1d32 <LCD_GOTO_XY+0x24>
	{
		if(position < 16 && position >= 0)
    1d22:	8a 81       	ldd	r24, Y+2	; 0x02
    1d24:	80 31       	cpi	r24, 0x10	; 16
    1d26:	78 f4       	brcc	.+30     	; 0x1d46 <LCD_GOTO_XY+0x38>
		{
			LCD_SEND_A_COMMAND(0x80 + position);
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	80 58       	subi	r24, 0x80	; 128
    1d2c:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <LCD_SEND_A_COMMAND>
    1d30:	0a c0       	rjmp	.+20     	; 0x1d46 <LCD_GOTO_XY+0x38>
		}
	}
	else if(line == 1)
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	81 30       	cpi	r24, 0x01	; 1
    1d36:	39 f4       	brne	.+14     	; 0x1d46 <LCD_GOTO_XY+0x38>
	{
		if(position < 16 && position >= 0)
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	80 31       	cpi	r24, 0x10	; 16
    1d3c:	20 f4       	brcc	.+8      	; 0x1d46 <LCD_GOTO_XY+0x38>
		{
			LCD_SEND_A_COMMAND(0xC0 + position);
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	80 54       	subi	r24, 0x40	; 64
    1d42:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <LCD_SEND_A_COMMAND>
		}
	}
}
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	08 95       	ret

00001d50 <LCD_SEND_A_COMMAND>:

void LCD_SEND_A_COMMAND(unsigned char command)
{
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	0f 92       	push	r0
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	89 83       	std	Y+1, r24	; 0x01
#ifdef EIGHT_BIT_MODE
	LCD_IS_BUSY_CHECK();
    1d5c:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LCD_IS_BUSY_CHECK>
	LCD_PORT = command;
    1d60:	e5 e3       	ldi	r30, 0x35	; 53
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	80 83       	st	Z, r24
	LCD_CONTROL &= ~(1<<RW | 1<<RS_SWITCH);
    1d68:	a2 e3       	ldi	r26, 0x32	; 50
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e2 e3       	ldi	r30, 0x32	; 50
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	89 7f       	andi	r24, 0xF9	; 249
    1d74:	8c 93       	st	X, r24

	LCD_KICK();
    1d76:	0e 94 ae 0c 	call	0x195c	; 0x195c <LCD_KICK>
	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
	LCD_CONTROL &= ~(1<<RW | 1<<RS_SWITCH);
	LCD_KICK();
#endif

}
    1d7a:	0f 90       	pop	r0
    1d7c:	cf 91       	pop	r28
    1d7e:	df 91       	pop	r29
    1d80:	08 95       	ret

00001d82 <SEND_A_CHAR>:

void SEND_A_CHAR(unsigned char character)
{
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	0f 92       	push	r0
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	89 83       	std	Y+1, r24	; 0x01
#ifdef EIGHT_BIT_MODE
	LCD_IS_BUSY_CHECK();
    1d8e:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LCD_IS_BUSY_CHECK>
	LCD_PORT = ((character) << DATA_SHIFT);
    1d92:	e5 e3       	ldi	r30, 0x35	; 53
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	80 83       	st	Z, r24
	LCD_CONTROL &= ~(1<<RW);
    1d9a:	a2 e3       	ldi	r26, 0x32	; 50
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e2 e3       	ldi	r30, 0x32	; 50
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	8b 7f       	andi	r24, 0xFB	; 251
    1da6:	8c 93       	st	X, r24
	LCD_CONTROL |= (1<<RS_SWITCH);
    1da8:	a2 e3       	ldi	r26, 0x32	; 50
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e2 e3       	ldi	r30, 0x32	; 50
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	82 60       	ori	r24, 0x02	; 2
    1db4:	8c 93       	st	X, r24

	LCD_KICK();
    1db6:	0e 94 ae 0c 	call	0x195c	; 0x195c <LCD_KICK>
	LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
	LCD_CONTROL &= ~(1<<RW);
	LCD_CONTROL |= (1<<RS_SWITCH);
	LCD_KICK();
#endif
}
    1dba:	0f 90       	pop	r0
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	08 95       	ret

00001dc2 <SEND_A_STRING>:

void SEND_A_STRING(char* string)
{	int count=0;
    1dc2:	df 93       	push	r29
    1dc4:	cf 93       	push	r28
    1dc6:	00 d0       	rcall	.+0      	; 0x1dc8 <SEND_A_STRING+0x6>
    1dc8:	00 d0       	rcall	.+0      	; 0x1dca <SEND_A_STRING+0x8>
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
    1dce:	9c 83       	std	Y+4, r25	; 0x04
    1dd0:	8b 83       	std	Y+3, r24	; 0x03
    1dd2:	1a 82       	std	Y+2, r1	; 0x02
    1dd4:	19 82       	std	Y+1, r1	; 0x01
    1dd6:	27 c0       	rjmp	.+78     	; 0x1e26 <SEND_A_STRING+0x64>
	while(*string > 0)
	{
		count++;
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	9a 81       	ldd	r25, Y+2	; 0x02
    1ddc:	01 96       	adiw	r24, 0x01	; 1
    1dde:	9a 83       	std	Y+2, r25	; 0x02
    1de0:	89 83       	std	Y+1, r24	; 0x01
		SEND_A_CHAR(*string++);
    1de2:	eb 81       	ldd	r30, Y+3	; 0x03
    1de4:	fc 81       	ldd	r31, Y+4	; 0x04
    1de6:	20 81       	ld	r18, Z
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	9c 81       	ldd	r25, Y+4	; 0x04
    1dec:	01 96       	adiw	r24, 0x01	; 1
    1dee:	9c 83       	std	Y+4, r25	; 0x04
    1df0:	8b 83       	std	Y+3, r24	; 0x03
    1df2:	82 2f       	mov	r24, r18
    1df4:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <SEND_A_CHAR>
		if(count == 16)
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfc:	80 31       	cpi	r24, 0x10	; 16
    1dfe:	91 05       	cpc	r25, r1
    1e00:	29 f4       	brne	.+10     	; 0x1e0c <SEND_A_STRING+0x4a>
		{
			LCD_GOTO_XY(1, 0);
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	60 e0       	ldi	r22, 0x00	; 0
    1e06:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
    1e0a:	0d c0       	rjmp	.+26     	; 0x1e26 <SEND_A_STRING+0x64>
		}
		else if(count == 32)
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e10:	80 32       	cpi	r24, 0x20	; 32
    1e12:	91 05       	cpc	r25, r1
    1e14:	41 f4       	brne	.+16     	; 0x1e26 <SEND_A_STRING+0x64>
		{
			LCD_CLEAR_ALL_SCREEN();
    1e16:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_CLEAR_ALL_SCREEN>
			LCD_GOTO_XY(0,0);
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	60 e0       	ldi	r22, 0x00	; 0
    1e1e:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
			count=0;
    1e22:	1a 82       	std	Y+2, r1	; 0x02
    1e24:	19 82       	std	Y+1, r1	; 0x01
#endif
}

void SEND_A_STRING(char* string)
{	int count=0;
	while(*string > 0)
    1e26:	eb 81       	ldd	r30, Y+3	; 0x03
    1e28:	fc 81       	ldd	r31, Y+4	; 0x04
    1e2a:	80 81       	ld	r24, Z
    1e2c:	88 23       	and	r24, r24
    1e2e:	a1 f6       	brne	.-88     	; 0x1dd8 <SEND_A_STRING+0x16>
			LCD_CLEAR_ALL_SCREEN();
			LCD_GOTO_XY(0,0);
			count=0;
		}
	}
}
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	08 95       	ret

00001e3e <LCD_DISPLAY_NUM>:

void LCD_DISPLAY_NUM(int num)
{
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	29 97       	sbiw	r28, 0x09	; 9
    1e48:	0f b6       	in	r0, 0x3f	; 63
    1e4a:	f8 94       	cli
    1e4c:	de bf       	out	0x3e, r29	; 62
    1e4e:	0f be       	out	0x3f, r0	; 63
    1e50:	cd bf       	out	0x3d, r28	; 61
    1e52:	99 87       	std	Y+9, r25	; 0x09
    1e54:	88 87       	std	Y+8, r24	; 0x08
	char str[7];
	sprintf(str,"%d", num);
    1e56:	00 d0       	rcall	.+0      	; 0x1e58 <LCD_DISPLAY_NUM+0x1a>
    1e58:	00 d0       	rcall	.+0      	; 0x1e5a <LCD_DISPLAY_NUM+0x1c>
    1e5a:	00 d0       	rcall	.+0      	; 0x1e5c <LCD_DISPLAY_NUM+0x1e>
    1e5c:	ed b7       	in	r30, 0x3d	; 61
    1e5e:	fe b7       	in	r31, 0x3e	; 62
    1e60:	31 96       	adiw	r30, 0x01	; 1
    1e62:	ce 01       	movw	r24, r28
    1e64:	01 96       	adiw	r24, 0x01	; 1
    1e66:	91 83       	std	Z+1, r25	; 0x01
    1e68:	80 83       	st	Z, r24
    1e6a:	80 e6       	ldi	r24, 0x60	; 96
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	93 83       	std	Z+3, r25	; 0x03
    1e70:	82 83       	std	Z+2, r24	; 0x02
    1e72:	88 85       	ldd	r24, Y+8	; 0x08
    1e74:	99 85       	ldd	r25, Y+9	; 0x09
    1e76:	95 83       	std	Z+5, r25	; 0x05
    1e78:	84 83       	std	Z+4, r24	; 0x04
    1e7a:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <sprintf>
    1e7e:	8d b7       	in	r24, 0x3d	; 61
    1e80:	9e b7       	in	r25, 0x3e	; 62
    1e82:	06 96       	adiw	r24, 0x06	; 6
    1e84:	0f b6       	in	r0, 0x3f	; 63
    1e86:	f8 94       	cli
    1e88:	9e bf       	out	0x3e, r25	; 62
    1e8a:	0f be       	out	0x3f, r0	; 63
    1e8c:	8d bf       	out	0x3d, r24	; 61
	SEND_A_STRING(str);
    1e8e:	ce 01       	movw	r24, r28
    1e90:	01 96       	adiw	r24, 0x01	; 1
    1e92:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
}
    1e96:	29 96       	adiw	r28, 0x09	; 9
    1e98:	0f b6       	in	r0, 0x3f	; 63
    1e9a:	f8 94       	cli
    1e9c:	de bf       	out	0x3e, r29	; 62
    1e9e:	0f be       	out	0x3f, r0	; 63
    1ea0:	cd bf       	out	0x3d, r28	; 61
    1ea2:	cf 91       	pop	r28
    1ea4:	df 91       	pop	r29
    1ea6:	08 95       	ret

00001ea8 <LCD_DISPLAY_REAL_NUM>:

void LCD_DISPLAY_REAL_NUM(double num)
{
    1ea8:	df 93       	push	r29
    1eaa:	cf 93       	push	r28
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
    1eb0:	a8 97       	sbiw	r28, 0x28	; 40
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	de bf       	out	0x3e, r29	; 62
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	cd bf       	out	0x3d, r28	; 61
    1ebc:	6f 8f       	std	Y+31, r22	; 0x1f
    1ebe:	78 a3       	std	Y+32, r23	; 0x20
    1ec0:	89 a3       	std	Y+33, r24	; 0x21
    1ec2:	9a a3       	std	Y+34, r25	; 0x22
	char str[16];

	char* tmpsign = (num < 0) ? "-" : "";
    1ec4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ec6:	78 a1       	ldd	r23, Y+32	; 0x20
    1ec8:	89 a1       	ldd	r24, Y+33	; 0x21
    1eca:	9a a1       	ldd	r25, Y+34	; 0x22
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e0       	ldi	r20, 0x00	; 0
    1ed2:	50 e0       	ldi	r21, 0x00	; 0
    1ed4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ed8:	88 23       	and	r24, r24
    1eda:	2c f4       	brge	.+10     	; 0x1ee6 <LCD_DISPLAY_REAL_NUM+0x3e>
    1edc:	23 e6       	ldi	r18, 0x63	; 99
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	38 a7       	std	Y+40, r19	; 0x28
    1ee2:	2f a3       	std	Y+39, r18	; 0x27
    1ee4:	04 c0       	rjmp	.+8      	; 0x1eee <LCD_DISPLAY_REAL_NUM+0x46>
    1ee6:	45 e6       	ldi	r20, 0x65	; 101
    1ee8:	50 e0       	ldi	r21, 0x00	; 0
    1eea:	58 a7       	std	Y+40, r21	; 0x28
    1eec:	4f a3       	std	Y+39, r20	; 0x27
    1eee:	8f a1       	ldd	r24, Y+39	; 0x27
    1ef0:	98 a5       	ldd	r25, Y+40	; 0x28
    1ef2:	9e 87       	std	Y+14, r25	; 0x0e
    1ef4:	8d 87       	std	Y+13, r24	; 0x0d
	float tmpval = (num < 0 ) ? -num:num; //625.132
    1ef6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ef8:	78 a1       	ldd	r23, Y+32	; 0x20
    1efa:	89 a1       	ldd	r24, Y+33	; 0x21
    1efc:	9a a1       	ldd	r25, Y+34	; 0x22
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e0       	ldi	r20, 0x00	; 0
    1f04:	50 e0       	ldi	r21, 0x00	; 0
    1f06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f0a:	88 23       	and	r24, r24
    1f0c:	64 f4       	brge	.+24     	; 0x1f26 <LCD_DISPLAY_REAL_NUM+0x7e>
    1f0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f10:	98 a1       	ldd	r25, Y+32	; 0x20
    1f12:	a9 a1       	ldd	r26, Y+33	; 0x21
    1f14:	ba a1       	ldd	r27, Y+34	; 0x22
    1f16:	9c 01       	movw	r18, r24
    1f18:	ad 01       	movw	r20, r26
    1f1a:	50 58       	subi	r21, 0x80	; 128
    1f1c:	2b a3       	std	Y+35, r18	; 0x23
    1f1e:	3c a3       	std	Y+36, r19	; 0x24
    1f20:	4d a3       	std	Y+37, r20	; 0x25
    1f22:	5e a3       	std	Y+38, r21	; 0x26
    1f24:	08 c0       	rjmp	.+16     	; 0x1f36 <LCD_DISPLAY_REAL_NUM+0x8e>
    1f26:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f28:	98 a1       	ldd	r25, Y+32	; 0x20
    1f2a:	a9 a1       	ldd	r26, Y+33	; 0x21
    1f2c:	ba a1       	ldd	r27, Y+34	; 0x22
    1f2e:	8b a3       	std	Y+35, r24	; 0x23
    1f30:	9c a3       	std	Y+36, r25	; 0x24
    1f32:	ad a3       	std	Y+37, r26	; 0x25
    1f34:	be a3       	std	Y+38, r27	; 0x26
    1f36:	2b a1       	ldd	r18, Y+35	; 0x23
    1f38:	3c a1       	ldd	r19, Y+36	; 0x24
    1f3a:	4d a1       	ldd	r20, Y+37	; 0x25
    1f3c:	5e a1       	ldd	r21, Y+38	; 0x26
    1f3e:	29 87       	std	Y+9, r18	; 0x09
    1f40:	3a 87       	std	Y+10, r19	; 0x0a
    1f42:	4b 87       	std	Y+11, r20	; 0x0b
    1f44:	5c 87       	std	Y+12, r21	; 0x0c

	int tmpint1 = tmpval; //625
    1f46:	69 85       	ldd	r22, Y+9	; 0x09
    1f48:	7a 85       	ldd	r23, Y+10	; 0x0a
    1f4a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f4c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f4e:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	98 87       	std	Y+8, r25	; 0x08
    1f58:	8f 83       	std	Y+7, r24	; 0x07
	float tmpfrac = tmpval - tmpint1; //.132
    1f5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f5c:	98 85       	ldd	r25, Y+8	; 0x08
    1f5e:	aa 27       	eor	r26, r26
    1f60:	97 fd       	sbrc	r25, 7
    1f62:	a0 95       	com	r26
    1f64:	ba 2f       	mov	r27, r26
    1f66:	bc 01       	movw	r22, r24
    1f68:	cd 01       	movw	r24, r26
    1f6a:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    1f6e:	9b 01       	movw	r18, r22
    1f70:	ac 01       	movw	r20, r24
    1f72:	69 85       	ldd	r22, Y+9	; 0x09
    1f74:	7a 85       	ldd	r23, Y+10	; 0x0a
    1f76:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f78:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f7a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	8b 83       	std	Y+3, r24	; 0x03
    1f84:	9c 83       	std	Y+4, r25	; 0x04
    1f86:	ad 83       	std	Y+5, r26	; 0x05
    1f88:	be 83       	std	Y+6, r27	; 0x06
	int tmpint2 = tmpfrac*10000; //1320
    1f8a:	6b 81       	ldd	r22, Y+3	; 0x03
    1f8c:	7c 81       	ldd	r23, Y+4	; 0x04
    1f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f90:	9e 81       	ldd	r25, Y+6	; 0x06
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e4       	ldi	r19, 0x40	; 64
    1f96:	4c e1       	ldi	r20, 0x1C	; 28
    1f98:	56 e4       	ldi	r21, 0x46	; 70
    1f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	bc 01       	movw	r22, r24
    1fa4:	cd 01       	movw	r24, r26
    1fa6:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	9a 83       	std	Y+2, r25	; 0x02
    1fb0:	89 83       	std	Y+1, r24	; 0x01

	sprintf(str, "%s%d.%04d",tmpsign,tmpint1,tmpint2);
    1fb2:	4d b7       	in	r20, 0x3d	; 61
    1fb4:	5e b7       	in	r21, 0x3e	; 62
    1fb6:	4a 50       	subi	r20, 0x0A	; 10
    1fb8:	50 40       	sbci	r21, 0x00	; 0
    1fba:	0f b6       	in	r0, 0x3f	; 63
    1fbc:	f8 94       	cli
    1fbe:	5e bf       	out	0x3e, r21	; 62
    1fc0:	0f be       	out	0x3f, r0	; 63
    1fc2:	4d bf       	out	0x3d, r20	; 61
    1fc4:	ed b7       	in	r30, 0x3d	; 61
    1fc6:	fe b7       	in	r31, 0x3e	; 62
    1fc8:	31 96       	adiw	r30, 0x01	; 1
    1fca:	ce 01       	movw	r24, r28
    1fcc:	0f 96       	adiw	r24, 0x0f	; 15
    1fce:	91 83       	std	Z+1, r25	; 0x01
    1fd0:	80 83       	st	Z, r24
    1fd2:	86 e6       	ldi	r24, 0x66	; 102
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	93 83       	std	Z+3, r25	; 0x03
    1fd8:	82 83       	std	Z+2, r24	; 0x02
    1fda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fde:	95 83       	std	Z+5, r25	; 0x05
    1fe0:	84 83       	std	Z+4, r24	; 0x04
    1fe2:	8f 81       	ldd	r24, Y+7	; 0x07
    1fe4:	98 85       	ldd	r25, Y+8	; 0x08
    1fe6:	97 83       	std	Z+7, r25	; 0x07
    1fe8:	86 83       	std	Z+6, r24	; 0x06
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	9a 81       	ldd	r25, Y+2	; 0x02
    1fee:	91 87       	std	Z+9, r25	; 0x09
    1ff0:	80 87       	std	Z+8, r24	; 0x08
    1ff2:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <sprintf>
    1ff6:	8d b7       	in	r24, 0x3d	; 61
    1ff8:	9e b7       	in	r25, 0x3e	; 62
    1ffa:	0a 96       	adiw	r24, 0x0a	; 10
    1ffc:	0f b6       	in	r0, 0x3f	; 63
    1ffe:	f8 94       	cli
    2000:	9e bf       	out	0x3e, r25	; 62
    2002:	0f be       	out	0x3f, r0	; 63
    2004:	8d bf       	out	0x3d, r24	; 61
	SEND_A_STRING(str);
    2006:	ce 01       	movw	r24, r28
    2008:	0f 96       	adiw	r24, 0x0f	; 15
    200a:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>

}
    200e:	a8 96       	adiw	r28, 0x28	; 40
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	de bf       	out	0x3e, r29	; 62
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	cd bf       	out	0x3d, r28	; 61
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <KPD_INIT>:
#include"../../libs/STD_TYPES.h"
#include"../../libs/util.h"
#include"../../MCAL/DIO/DIO.h"

void KPD_INIT(void)
{
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
	//step1: configure row directions -> internal pullup -> input, value-> high
	DIO_SetPinDirection(KPD_R0_PORT, KPD_R0_PIN, DIO_PIN_INPUT);
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	60 e0       	ldi	r22, 0x00	; 0
    202c:	40 e0       	ldi	r20, 0x00	; 0
    202e:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_R1_PORT, KPD_R1_PIN, DIO_PIN_INPUT);
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	61 e0       	ldi	r22, 0x01	; 1
    2036:	40 e0       	ldi	r20, 0x00	; 0
    2038:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_R2_PORT, KPD_R2_PIN, DIO_PIN_INPUT);
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	62 e0       	ldi	r22, 0x02	; 2
    2040:	40 e0       	ldi	r20, 0x00	; 0
    2042:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_R3_PORT, KPD_R3_PIN, DIO_PIN_INPUT);
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	63 e0       	ldi	r22, 0x03	; 3
    204a:	40 e0       	ldi	r20, 0x00	; 0
    204c:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_SetPinDirection>

	DIO_SetPinValue(KPD_R0_PORT,KPD_R0_PIN, DIO_HIGH);
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	60 e0       	ldi	r22, 0x00	; 0
    2054:	41 e0       	ldi	r20, 0x01	; 1
    2056:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <DIO_SetPinValue>
	DIO_SetPinValue(KPD_R1_PORT, KPD_R1_PIN, DIO_HIGH);
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	61 e0       	ldi	r22, 0x01	; 1
    205e:	41 e0       	ldi	r20, 0x01	; 1
    2060:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <DIO_SetPinValue>
	DIO_SetPinValue(KPD_R2_PORT, KPD_R2_PIN, DIO_HIGH);
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	62 e0       	ldi	r22, 0x02	; 2
    2068:	41 e0       	ldi	r20, 0x01	; 1
    206a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <DIO_SetPinValue>
	DIO_SetPinValue(KPD_R3_PORT, KPD_R3_PIN, DIO_HIGH);
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	63 e0       	ldi	r22, 0x03	; 3
    2072:	41 e0       	ldi	r20, 0x01	; 1
    2074:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <DIO_SetPinValue>

	//Step2: configure col directions ->output , value-> high
	DIO_SetPinDirection(KPD_C0_PORT, KPD_C0_PIN, DIO_PIN_OUTPUT);
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	64 e0       	ldi	r22, 0x04	; 4
    207c:	41 e0       	ldi	r20, 0x01	; 1
    207e:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_C1_PORT, KPD_C1_PIN, DIO_PIN_OUTPUT);
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	65 e0       	ldi	r22, 0x05	; 5
    2086:	41 e0       	ldi	r20, 0x01	; 1
    2088:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_C2_PORT, KPD_C2_PIN, DIO_PIN_OUTPUT);
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	66 e0       	ldi	r22, 0x06	; 6
    2090:	41 e0       	ldi	r20, 0x01	; 1
    2092:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_SetPinDirection>
	DIO_SetPinDirection(KPD_C3_PORT, KPD_C3_PIN, DIO_PIN_OUTPUT);
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	67 e0       	ldi	r22, 0x07	; 7
    209a:	41 e0       	ldi	r20, 0x01	; 1
    209c:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_SetPinDirection>

	DIO_SetPinValue(KPD_C0_PORT,KPD_C0_PIN, DIO_HIGH);
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	64 e0       	ldi	r22, 0x04	; 4
    20a4:	41 e0       	ldi	r20, 0x01	; 1
    20a6:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <DIO_SetPinValue>
	DIO_SetPinValue(KPD_C1_PORT, KPD_C1_PIN, DIO_HIGH);
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	65 e0       	ldi	r22, 0x05	; 5
    20ae:	41 e0       	ldi	r20, 0x01	; 1
    20b0:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <DIO_SetPinValue>
	DIO_SetPinValue(KPD_C2_PORT, KPD_C2_PIN, DIO_HIGH);
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	66 e0       	ldi	r22, 0x06	; 6
    20b8:	41 e0       	ldi	r20, 0x01	; 1
    20ba:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <DIO_SetPinValue>
	DIO_SetPinValue(KPD_C3_PORT, KPD_C3_PIN, DIO_HIGH);
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	67 e0       	ldi	r22, 0x07	; 7
    20c2:	41 e0       	ldi	r20, 0x01	; 1
    20c4:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <DIO_SetPinValue>
}
    20c8:	cf 91       	pop	r28
    20ca:	df 91       	pop	r29
    20cc:	08 95       	ret

000020ce <KPD_GETKEY>:
char KPD_GETKEY(void)
{
    20ce:	df 93       	push	r29
    20d0:	cf 93       	push	r28
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
    20d6:	e7 97       	sbiw	r28, 0x37	; 55
    20d8:	0f b6       	in	r0, 0x3f	; 63
    20da:	f8 94       	cli
    20dc:	de bf       	out	0x3e, r29	; 62
    20de:	0f be       	out	0x3f, r0	; 63
    20e0:	cd bf       	out	0x3d, r28	; 61
	char u8RowLocal=0, u8ColLocal=0;
    20e2:	19 8a       	std	Y+17, r1	; 0x11
    20e4:	18 8a       	std	Y+16, r1	; 0x10
	char u8PinValueLocal=0;
    20e6:	1f 86       	std	Y+15, r1	; 0x0f
	char KPD_u8RowPortArr[ROW_NUMBER] ={KPD_R0_PORT, KPD_R1_PORT,KPD_R2_PORT,KPD_R3_PORT };
    20e8:	1a 8a       	std	Y+18, r1	; 0x12
    20ea:	1b 8a       	std	Y+19, r1	; 0x13
    20ec:	1c 8a       	std	Y+20, r1	; 0x14
    20ee:	1d 8a       	std	Y+21, r1	; 0x15
	char KPD_u8RowPinArr[ROW_NUMBER] ={KPD_R0_PIN, KPD_R1_PIN,KPD_R2_PIN,KPD_R3_PIN };
    20f0:	1e 8a       	std	Y+22, r1	; 0x16
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	8f 8b       	std	Y+23, r24	; 0x17
    20f6:	82 e0       	ldi	r24, 0x02	; 2
    20f8:	88 8f       	std	Y+24, r24	; 0x18
    20fa:	83 e0       	ldi	r24, 0x03	; 3
    20fc:	89 8f       	std	Y+25, r24	; 0x19

	char KPD_u8ColPortArr[COL_NUMBER] ={KPD_C0_PORT, KPD_C1_PORT,KPD_C2_PORT,KPD_C3_PORT };
    20fe:	1a 8e       	std	Y+26, r1	; 0x1a
    2100:	1b 8e       	std	Y+27, r1	; 0x1b
    2102:	1c 8e       	std	Y+28, r1	; 0x1c
    2104:	1d 8e       	std	Y+29, r1	; 0x1d
	char KPD_u8ColPinArr[COL_NUMBER] ={KPD_C0_PIN, KPD_C1_PIN,KPD_C2_PIN,KPD_C3_PIN};
    2106:	84 e0       	ldi	r24, 0x04	; 4
    2108:	8e 8f       	std	Y+30, r24	; 0x1e
    210a:	85 e0       	ldi	r24, 0x05	; 5
    210c:	8f 8f       	std	Y+31, r24	; 0x1f
    210e:	86 e0       	ldi	r24, 0x06	; 6
    2110:	88 a3       	std	Y+32, r24	; 0x20
    2112:	87 e0       	ldi	r24, 0x07	; 7
    2114:	89 a3       	std	Y+33, r24	; 0x21

	char KDP_u8values[ROW_NUMBER][COL_NUMBER] = KPD_VALUES;
    2116:	ce 01       	movw	r24, r28
    2118:	82 96       	adiw	r24, 0x22	; 34
    211a:	9c ab       	std	Y+52, r25	; 0x34
    211c:	8b ab       	std	Y+51, r24	; 0x33
    211e:	e9 ef       	ldi	r30, 0xF9	; 249
    2120:	f2 e0       	ldi	r31, 0x02	; 2
    2122:	fe ab       	std	Y+54, r31	; 0x36
    2124:	ed ab       	std	Y+53, r30	; 0x35
    2126:	f0 e1       	ldi	r31, 0x10	; 16
    2128:	ff ab       	std	Y+55, r31	; 0x37
    212a:	ed a9       	ldd	r30, Y+53	; 0x35
    212c:	fe a9       	ldd	r31, Y+54	; 0x36
    212e:	00 80       	ld	r0, Z
    2130:	8d a9       	ldd	r24, Y+53	; 0x35
    2132:	9e a9       	ldd	r25, Y+54	; 0x36
    2134:	01 96       	adiw	r24, 0x01	; 1
    2136:	9e ab       	std	Y+54, r25	; 0x36
    2138:	8d ab       	std	Y+53, r24	; 0x35
    213a:	eb a9       	ldd	r30, Y+51	; 0x33
    213c:	fc a9       	ldd	r31, Y+52	; 0x34
    213e:	00 82       	st	Z, r0
    2140:	8b a9       	ldd	r24, Y+51	; 0x33
    2142:	9c a9       	ldd	r25, Y+52	; 0x34
    2144:	01 96       	adiw	r24, 0x01	; 1
    2146:	9c ab       	std	Y+52, r25	; 0x34
    2148:	8b ab       	std	Y+51, r24	; 0x33
    214a:	9f a9       	ldd	r25, Y+55	; 0x37
    214c:	91 50       	subi	r25, 0x01	; 1
    214e:	9f ab       	std	Y+55, r25	; 0x37
    2150:	ef a9       	ldd	r30, Y+55	; 0x37
    2152:	ee 23       	and	r30, r30
    2154:	51 f7       	brne	.-44     	; 0x212a <KPD_GETKEY+0x5c>

	for(u8ColLocal=0 ;u8ColLocal < COL_NUMBER; u8ColLocal++)
    2156:	18 8a       	std	Y+16, r1	; 0x10
    2158:	0e c1       	rjmp	.+540    	; 0x2376 <KPD_GETKEY+0x2a8>
	{
		DIO_SetPinValue(KPD_u8ColPortArr[u8ColLocal],KPD_u8ColPinArr[u8ColLocal], DIO_LOW);
    215a:	88 89       	ldd	r24, Y+16	; 0x10
    215c:	28 2f       	mov	r18, r24
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	ce 01       	movw	r24, r28
    2162:	4a 96       	adiw	r24, 0x1a	; 26
    2164:	fc 01       	movw	r30, r24
    2166:	e2 0f       	add	r30, r18
    2168:	f3 1f       	adc	r31, r19
    216a:	40 81       	ld	r20, Z
    216c:	88 89       	ldd	r24, Y+16	; 0x10
    216e:	28 2f       	mov	r18, r24
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	ce 01       	movw	r24, r28
    2174:	4e 96       	adiw	r24, 0x1e	; 30
    2176:	fc 01       	movw	r30, r24
    2178:	e2 0f       	add	r30, r18
    217a:	f3 1f       	adc	r31, r19
    217c:	90 81       	ld	r25, Z
    217e:	84 2f       	mov	r24, r20
    2180:	69 2f       	mov	r22, r25
    2182:	40 e0       	ldi	r20, 0x00	; 0
    2184:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <DIO_SetPinValue>

		for(u8RowLocal=0;u8RowLocal < ROW_NUMBER; u8RowLocal++ )
    2188:	19 8a       	std	Y+17, r1	; 0x11
    218a:	d7 c0       	rjmp	.+430    	; 0x233a <KPD_GETKEY+0x26c>
		{
			u8PinValueLocal= DIO_GetPinValue(KPD_u8RowPortArr[u8RowLocal], KPD_u8RowPinArr[u8RowLocal]);
    218c:	89 89       	ldd	r24, Y+17	; 0x11
    218e:	28 2f       	mov	r18, r24
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	ce 01       	movw	r24, r28
    2194:	42 96       	adiw	r24, 0x12	; 18
    2196:	fc 01       	movw	r30, r24
    2198:	e2 0f       	add	r30, r18
    219a:	f3 1f       	adc	r31, r19
    219c:	40 81       	ld	r20, Z
    219e:	89 89       	ldd	r24, Y+17	; 0x11
    21a0:	28 2f       	mov	r18, r24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	ce 01       	movw	r24, r28
    21a6:	46 96       	adiw	r24, 0x16	; 22
    21a8:	fc 01       	movw	r30, r24
    21aa:	e2 0f       	add	r30, r18
    21ac:	f3 1f       	adc	r31, r19
    21ae:	90 81       	ld	r25, Z
    21b0:	84 2f       	mov	r24, r20
    21b2:	69 2f       	mov	r22, r25
    21b4:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <DIO_GetPinValue>
    21b8:	8f 87       	std	Y+15, r24	; 0x0f
			if(u8PinValueLocal == KPD_PRESSED_KEY)
    21ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    21bc:	88 23       	and	r24, r24
    21be:	09 f0       	breq	.+2      	; 0x21c2 <KPD_GETKEY+0xf4>
    21c0:	b9 c0       	rjmp	.+370    	; 0x2334 <KPD_GETKEY+0x266>
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	a8 e4       	ldi	r26, 0x48	; 72
    21c8:	b2 e4       	ldi	r27, 0x42	; 66
    21ca:	8b 87       	std	Y+11, r24	; 0x0b
    21cc:	9c 87       	std	Y+12, r25	; 0x0c
    21ce:	ad 87       	std	Y+13, r26	; 0x0d
    21d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	4a ef       	ldi	r20, 0xFA	; 250
    21e0:	54 e4       	ldi	r21, 0x44	; 68
    21e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	8f 83       	std	Y+7, r24	; 0x07
    21ec:	98 87       	std	Y+8, r25	; 0x08
    21ee:	a9 87       	std	Y+9, r26	; 0x09
    21f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21f2:	6f 81       	ldd	r22, Y+7	; 0x07
    21f4:	78 85       	ldd	r23, Y+8	; 0x08
    21f6:	89 85       	ldd	r24, Y+9	; 0x09
    21f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	40 e8       	ldi	r20, 0x80	; 128
    2200:	5f e3       	ldi	r21, 0x3F	; 63
    2202:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2206:	88 23       	and	r24, r24
    2208:	2c f4       	brge	.+10     	; 0x2214 <KPD_GETKEY+0x146>
		__ticks = 1;
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	9e 83       	std	Y+6, r25	; 0x06
    2210:	8d 83       	std	Y+5, r24	; 0x05
    2212:	3f c0       	rjmp	.+126    	; 0x2292 <KPD_GETKEY+0x1c4>
	else if (__tmp > 65535)
    2214:	6f 81       	ldd	r22, Y+7	; 0x07
    2216:	78 85       	ldd	r23, Y+8	; 0x08
    2218:	89 85       	ldd	r24, Y+9	; 0x09
    221a:	9a 85       	ldd	r25, Y+10	; 0x0a
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	3f ef       	ldi	r19, 0xFF	; 255
    2220:	4f e7       	ldi	r20, 0x7F	; 127
    2222:	57 e4       	ldi	r21, 0x47	; 71
    2224:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2228:	18 16       	cp	r1, r24
    222a:	4c f5       	brge	.+82     	; 0x227e <KPD_GETKEY+0x1b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222c:	6b 85       	ldd	r22, Y+11	; 0x0b
    222e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2230:	8d 85       	ldd	r24, Y+13	; 0x0d
    2232:	9e 85       	ldd	r25, Y+14	; 0x0e
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	40 e2       	ldi	r20, 0x20	; 32
    223a:	51 e4       	ldi	r21, 0x41	; 65
    223c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	bc 01       	movw	r22, r24
    2246:	cd 01       	movw	r24, r26
    2248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	9e 83       	std	Y+6, r25	; 0x06
    2252:	8d 83       	std	Y+5, r24	; 0x05
    2254:	0f c0       	rjmp	.+30     	; 0x2274 <KPD_GETKEY+0x1a6>
    2256:	88 ec       	ldi	r24, 0xC8	; 200
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	9c 83       	std	Y+4, r25	; 0x04
    225c:	8b 83       	std	Y+3, r24	; 0x03
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	9c 81       	ldd	r25, Y+4	; 0x04
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <KPD_GETKEY+0x194>
    2266:	9c 83       	std	Y+4, r25	; 0x04
    2268:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226a:	8d 81       	ldd	r24, Y+5	; 0x05
    226c:	9e 81       	ldd	r25, Y+6	; 0x06
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	9e 83       	std	Y+6, r25	; 0x06
    2272:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2274:	8d 81       	ldd	r24, Y+5	; 0x05
    2276:	9e 81       	ldd	r25, Y+6	; 0x06
    2278:	00 97       	sbiw	r24, 0x00	; 0
    227a:	69 f7       	brne	.-38     	; 0x2256 <KPD_GETKEY+0x188>
    227c:	14 c0       	rjmp	.+40     	; 0x22a6 <KPD_GETKEY+0x1d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227e:	6f 81       	ldd	r22, Y+7	; 0x07
    2280:	78 85       	ldd	r23, Y+8	; 0x08
    2282:	89 85       	ldd	r24, Y+9	; 0x09
    2284:	9a 85       	ldd	r25, Y+10	; 0x0a
    2286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	9e 83       	std	Y+6, r25	; 0x06
    2290:	8d 83       	std	Y+5, r24	; 0x05
    2292:	8d 81       	ldd	r24, Y+5	; 0x05
    2294:	9e 81       	ldd	r25, Y+6	; 0x06
    2296:	9a 83       	std	Y+2, r25	; 0x02
    2298:	89 83       	std	Y+1, r24	; 0x01
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	9a 81       	ldd	r25, Y+2	; 0x02
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <KPD_GETKEY+0x1d0>
    22a2:	9a 83       	std	Y+2, r25	; 0x02
    22a4:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(50);
				u8PinValueLocal= DIO_GetPinValue(KPD_u8RowPortArr[u8RowLocal], KPD_u8RowPinArr[u8RowLocal]);
    22a6:	89 89       	ldd	r24, Y+17	; 0x11
    22a8:	28 2f       	mov	r18, r24
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	ce 01       	movw	r24, r28
    22ae:	42 96       	adiw	r24, 0x12	; 18
    22b0:	fc 01       	movw	r30, r24
    22b2:	e2 0f       	add	r30, r18
    22b4:	f3 1f       	adc	r31, r19
    22b6:	40 81       	ld	r20, Z
    22b8:	89 89       	ldd	r24, Y+17	; 0x11
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	ce 01       	movw	r24, r28
    22c0:	46 96       	adiw	r24, 0x16	; 22
    22c2:	fc 01       	movw	r30, r24
    22c4:	e2 0f       	add	r30, r18
    22c6:	f3 1f       	adc	r31, r19
    22c8:	90 81       	ld	r25, Z
    22ca:	84 2f       	mov	r24, r20
    22cc:	69 2f       	mov	r22, r25
    22ce:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <DIO_GetPinValue>
    22d2:	8f 87       	std	Y+15, r24	; 0x0f
    22d4:	17 c0       	rjmp	.+46     	; 0x2304 <KPD_GETKEY+0x236>
				while(u8PinValueLocal == KPD_PRESSED_KEY)
				{
					u8PinValueLocal= DIO_GetPinValue(KPD_u8RowPortArr[u8RowLocal], KPD_u8RowPinArr[u8RowLocal]);
    22d6:	89 89       	ldd	r24, Y+17	; 0x11
    22d8:	28 2f       	mov	r18, r24
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	ce 01       	movw	r24, r28
    22de:	42 96       	adiw	r24, 0x12	; 18
    22e0:	fc 01       	movw	r30, r24
    22e2:	e2 0f       	add	r30, r18
    22e4:	f3 1f       	adc	r31, r19
    22e6:	40 81       	ld	r20, Z
    22e8:	89 89       	ldd	r24, Y+17	; 0x11
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	ce 01       	movw	r24, r28
    22f0:	46 96       	adiw	r24, 0x16	; 22
    22f2:	fc 01       	movw	r30, r24
    22f4:	e2 0f       	add	r30, r18
    22f6:	f3 1f       	adc	r31, r19
    22f8:	90 81       	ld	r25, Z
    22fa:	84 2f       	mov	r24, r20
    22fc:	69 2f       	mov	r22, r25
    22fe:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <DIO_GetPinValue>
    2302:	8f 87       	std	Y+15, r24	; 0x0f
			u8PinValueLocal= DIO_GetPinValue(KPD_u8RowPortArr[u8RowLocal], KPD_u8RowPinArr[u8RowLocal]);
			if(u8PinValueLocal == KPD_PRESSED_KEY)
			{
				_delay_ms(50);
				u8PinValueLocal= DIO_GetPinValue(KPD_u8RowPortArr[u8RowLocal], KPD_u8RowPinArr[u8RowLocal]);
				while(u8PinValueLocal == KPD_PRESSED_KEY)
    2304:	8f 85       	ldd	r24, Y+15	; 0x0f
    2306:	88 23       	and	r24, r24
    2308:	31 f3       	breq	.-52     	; 0x22d6 <KPD_GETKEY+0x208>
				{
					u8PinValueLocal= DIO_GetPinValue(KPD_u8RowPortArr[u8RowLocal], KPD_u8RowPinArr[u8RowLocal]);

				}
				return KDP_u8values[u8RowLocal][u8ColLocal];
    230a:	89 89       	ldd	r24, Y+17	; 0x11
    230c:	28 2f       	mov	r18, r24
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	88 89       	ldd	r24, Y+16	; 0x10
    2312:	48 2f       	mov	r20, r24
    2314:	50 e0       	ldi	r21, 0x00	; 0
    2316:	22 0f       	add	r18, r18
    2318:	33 1f       	adc	r19, r19
    231a:	22 0f       	add	r18, r18
    231c:	33 1f       	adc	r19, r19
    231e:	ce 01       	movw	r24, r28
    2320:	01 96       	adiw	r24, 0x01	; 1
    2322:	82 0f       	add	r24, r18
    2324:	93 1f       	adc	r25, r19
    2326:	84 0f       	add	r24, r20
    2328:	95 1f       	adc	r25, r21
    232a:	fc 01       	movw	r30, r24
    232c:	b1 96       	adiw	r30, 0x21	; 33
    232e:	80 81       	ld	r24, Z
    2330:	8a ab       	std	Y+50, r24	; 0x32
    2332:	27 c0       	rjmp	.+78     	; 0x2382 <KPD_GETKEY+0x2b4>

	for(u8ColLocal=0 ;u8ColLocal < COL_NUMBER; u8ColLocal++)
	{
		DIO_SetPinValue(KPD_u8ColPortArr[u8ColLocal],KPD_u8ColPinArr[u8ColLocal], DIO_LOW);

		for(u8RowLocal=0;u8RowLocal < ROW_NUMBER; u8RowLocal++ )
    2334:	89 89       	ldd	r24, Y+17	; 0x11
    2336:	8f 5f       	subi	r24, 0xFF	; 255
    2338:	89 8b       	std	Y+17, r24	; 0x11
    233a:	89 89       	ldd	r24, Y+17	; 0x11
    233c:	84 30       	cpi	r24, 0x04	; 4
    233e:	08 f4       	brcc	.+2      	; 0x2342 <KPD_GETKEY+0x274>
    2340:	25 cf       	rjmp	.-438    	; 0x218c <KPD_GETKEY+0xbe>

				}
				return KDP_u8values[u8RowLocal][u8ColLocal];
			}
		}
		DIO_SetPinValue(KPD_u8ColPortArr[u8ColLocal], KPD_u8ColPinArr[u8ColLocal], DIO_HIGH);
    2342:	88 89       	ldd	r24, Y+16	; 0x10
    2344:	28 2f       	mov	r18, r24
    2346:	30 e0       	ldi	r19, 0x00	; 0
    2348:	ce 01       	movw	r24, r28
    234a:	4a 96       	adiw	r24, 0x1a	; 26
    234c:	fc 01       	movw	r30, r24
    234e:	e2 0f       	add	r30, r18
    2350:	f3 1f       	adc	r31, r19
    2352:	40 81       	ld	r20, Z
    2354:	88 89       	ldd	r24, Y+16	; 0x10
    2356:	28 2f       	mov	r18, r24
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	ce 01       	movw	r24, r28
    235c:	4e 96       	adiw	r24, 0x1e	; 30
    235e:	fc 01       	movw	r30, r24
    2360:	e2 0f       	add	r30, r18
    2362:	f3 1f       	adc	r31, r19
    2364:	90 81       	ld	r25, Z
    2366:	84 2f       	mov	r24, r20
    2368:	69 2f       	mov	r22, r25
    236a:	41 e0       	ldi	r20, 0x01	; 1
    236c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <DIO_SetPinValue>
	char KPD_u8ColPortArr[COL_NUMBER] ={KPD_C0_PORT, KPD_C1_PORT,KPD_C2_PORT,KPD_C3_PORT };
	char KPD_u8ColPinArr[COL_NUMBER] ={KPD_C0_PIN, KPD_C1_PIN,KPD_C2_PIN,KPD_C3_PIN};

	char KDP_u8values[ROW_NUMBER][COL_NUMBER] = KPD_VALUES;

	for(u8ColLocal=0 ;u8ColLocal < COL_NUMBER; u8ColLocal++)
    2370:	88 89       	ldd	r24, Y+16	; 0x10
    2372:	8f 5f       	subi	r24, 0xFF	; 255
    2374:	88 8b       	std	Y+16, r24	; 0x10
    2376:	88 89       	ldd	r24, Y+16	; 0x10
    2378:	84 30       	cpi	r24, 0x04	; 4
    237a:	08 f4       	brcc	.+2      	; 0x237e <KPD_GETKEY+0x2b0>
    237c:	ee ce       	rjmp	.-548    	; 0x215a <KPD_GETKEY+0x8c>
				return KDP_u8values[u8RowLocal][u8ColLocal];
			}
		}
		DIO_SetPinValue(KPD_u8ColPortArr[u8ColLocal], KPD_u8ColPinArr[u8ColLocal], DIO_HIGH);
	}
	return KPD_NOT_PRESSED;
    237e:	9f ef       	ldi	r25, 0xFF	; 255
    2380:	9a ab       	std	Y+50, r25	; 0x32
    2382:	8a a9       	ldd	r24, Y+50	; 0x32
}
    2384:	e7 96       	adiw	r28, 0x37	; 55
    2386:	0f b6       	in	r0, 0x3f	; 63
    2388:	f8 94       	cli
    238a:	de bf       	out	0x3e, r29	; 62
    238c:	0f be       	out	0x3f, r0	; 63
    238e:	cd bf       	out	0x3d, r28	; 61
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <Get_Number>:

u8 Get_Number(u8 num) //to convert characters to integer numbers
{
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	00 d0       	rcall	.+0      	; 0x239c <Get_Number+0x6>
    239c:	00 d0       	rcall	.+0      	; 0x239e <Get_Number+0x8>
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
    23a2:	89 83       	std	Y+1, r24	; 0x01
	switch(num)
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	28 2f       	mov	r18, r24
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	3c 83       	std	Y+4, r19	; 0x04
    23ac:	2b 83       	std	Y+3, r18	; 0x03
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	9c 81       	ldd	r25, Y+4	; 0x04
    23b2:	84 33       	cpi	r24, 0x34	; 52
    23b4:	91 05       	cpc	r25, r1
    23b6:	09 f4       	brne	.+2      	; 0x23ba <Get_Number+0x24>
    23b8:	4b c0       	rjmp	.+150    	; 0x2450 <Get_Number+0xba>
    23ba:	2b 81       	ldd	r18, Y+3	; 0x03
    23bc:	3c 81       	ldd	r19, Y+4	; 0x04
    23be:	25 33       	cpi	r18, 0x35	; 53
    23c0:	31 05       	cpc	r19, r1
    23c2:	dc f4       	brge	.+54     	; 0x23fa <Get_Number+0x64>
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	9c 81       	ldd	r25, Y+4	; 0x04
    23c8:	81 33       	cpi	r24, 0x31	; 49
    23ca:	91 05       	cpc	r25, r1
    23cc:	c1 f1       	breq	.+112    	; 0x243e <Get_Number+0xa8>
    23ce:	2b 81       	ldd	r18, Y+3	; 0x03
    23d0:	3c 81       	ldd	r19, Y+4	; 0x04
    23d2:	22 33       	cpi	r18, 0x32	; 50
    23d4:	31 05       	cpc	r19, r1
    23d6:	34 f4       	brge	.+12     	; 0x23e4 <Get_Number+0x4e>
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	9c 81       	ldd	r25, Y+4	; 0x04
    23dc:	80 33       	cpi	r24, 0x30	; 48
    23de:	91 05       	cpc	r25, r1
    23e0:	61 f1       	breq	.+88     	; 0x243a <Get_Number+0xa4>
    23e2:	48 c0       	rjmp	.+144    	; 0x2474 <Get_Number+0xde>
    23e4:	2b 81       	ldd	r18, Y+3	; 0x03
    23e6:	3c 81       	ldd	r19, Y+4	; 0x04
    23e8:	22 33       	cpi	r18, 0x32	; 50
    23ea:	31 05       	cpc	r19, r1
    23ec:	59 f1       	breq	.+86     	; 0x2444 <Get_Number+0xae>
    23ee:	8b 81       	ldd	r24, Y+3	; 0x03
    23f0:	9c 81       	ldd	r25, Y+4	; 0x04
    23f2:	83 33       	cpi	r24, 0x33	; 51
    23f4:	91 05       	cpc	r25, r1
    23f6:	49 f1       	breq	.+82     	; 0x244a <Get_Number+0xb4>
    23f8:	3d c0       	rjmp	.+122    	; 0x2474 <Get_Number+0xde>
    23fa:	2b 81       	ldd	r18, Y+3	; 0x03
    23fc:	3c 81       	ldd	r19, Y+4	; 0x04
    23fe:	27 33       	cpi	r18, 0x37	; 55
    2400:	31 05       	cpc	r19, r1
    2402:	79 f1       	breq	.+94     	; 0x2462 <Get_Number+0xcc>
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	9c 81       	ldd	r25, Y+4	; 0x04
    2408:	88 33       	cpi	r24, 0x38	; 56
    240a:	91 05       	cpc	r25, r1
    240c:	5c f4       	brge	.+22     	; 0x2424 <Get_Number+0x8e>
    240e:	2b 81       	ldd	r18, Y+3	; 0x03
    2410:	3c 81       	ldd	r19, Y+4	; 0x04
    2412:	25 33       	cpi	r18, 0x35	; 53
    2414:	31 05       	cpc	r19, r1
    2416:	f9 f0       	breq	.+62     	; 0x2456 <Get_Number+0xc0>
    2418:	8b 81       	ldd	r24, Y+3	; 0x03
    241a:	9c 81       	ldd	r25, Y+4	; 0x04
    241c:	86 33       	cpi	r24, 0x36	; 54
    241e:	91 05       	cpc	r25, r1
    2420:	e9 f0       	breq	.+58     	; 0x245c <Get_Number+0xc6>
    2422:	28 c0       	rjmp	.+80     	; 0x2474 <Get_Number+0xde>
    2424:	2b 81       	ldd	r18, Y+3	; 0x03
    2426:	3c 81       	ldd	r19, Y+4	; 0x04
    2428:	28 33       	cpi	r18, 0x38	; 56
    242a:	31 05       	cpc	r19, r1
    242c:	e9 f0       	breq	.+58     	; 0x2468 <Get_Number+0xd2>
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	9c 81       	ldd	r25, Y+4	; 0x04
    2432:	89 33       	cpi	r24, 0x39	; 57
    2434:	91 05       	cpc	r25, r1
    2436:	d9 f0       	breq	.+54     	; 0x246e <Get_Number+0xd8>
    2438:	1d c0       	rjmp	.+58     	; 0x2474 <Get_Number+0xde>
	{
	case '0': return 0; break;
    243a:	1a 82       	std	Y+2, r1	; 0x02
    243c:	1c c0       	rjmp	.+56     	; 0x2476 <Get_Number+0xe0>
	case '1': return 1; break;
    243e:	91 e0       	ldi	r25, 0x01	; 1
    2440:	9a 83       	std	Y+2, r25	; 0x02
    2442:	19 c0       	rjmp	.+50     	; 0x2476 <Get_Number+0xe0>
	case '2': return 2; break;
    2444:	22 e0       	ldi	r18, 0x02	; 2
    2446:	2a 83       	std	Y+2, r18	; 0x02
    2448:	16 c0       	rjmp	.+44     	; 0x2476 <Get_Number+0xe0>
	case '3': return 3; break;
    244a:	33 e0       	ldi	r19, 0x03	; 3
    244c:	3a 83       	std	Y+2, r19	; 0x02
    244e:	13 c0       	rjmp	.+38     	; 0x2476 <Get_Number+0xe0>
	case '4': return 4; break;
    2450:	84 e0       	ldi	r24, 0x04	; 4
    2452:	8a 83       	std	Y+2, r24	; 0x02
    2454:	10 c0       	rjmp	.+32     	; 0x2476 <Get_Number+0xe0>
	case '5': return 5; break;
    2456:	95 e0       	ldi	r25, 0x05	; 5
    2458:	9a 83       	std	Y+2, r25	; 0x02
    245a:	0d c0       	rjmp	.+26     	; 0x2476 <Get_Number+0xe0>
	case '6': return 6; break;
    245c:	26 e0       	ldi	r18, 0x06	; 6
    245e:	2a 83       	std	Y+2, r18	; 0x02
    2460:	0a c0       	rjmp	.+20     	; 0x2476 <Get_Number+0xe0>
	case '7': return 7; break;
    2462:	37 e0       	ldi	r19, 0x07	; 7
    2464:	3a 83       	std	Y+2, r19	; 0x02
    2466:	07 c0       	rjmp	.+14     	; 0x2476 <Get_Number+0xe0>
	case '8': return 8; break;
    2468:	88 e0       	ldi	r24, 0x08	; 8
    246a:	8a 83       	std	Y+2, r24	; 0x02
    246c:	04 c0       	rjmp	.+8      	; 0x2476 <Get_Number+0xe0>
	case '9': return 9; break;
    246e:	99 e0       	ldi	r25, 0x09	; 9
    2470:	9a 83       	std	Y+2, r25	; 0x02
    2472:	01 c0       	rjmp	.+2      	; 0x2476 <Get_Number+0xe0>
	default: break;
	}
	return 0;
    2474:	1a 82       	std	Y+2, r1	; 0x02
    2476:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2478:	0f 90       	pop	r0
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	0f 90       	pop	r0
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <main>:
void ADMIN_Menu(void);
//User's features list
void USER_Menu(void);
//void ADMIM_AddUser(void);
int main(void)
{
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
	init();
    248e:	0e 94 4e 12 	call	0x249c	; 0x249c <init>
	WelcomeScreen();
    2492:	0e 94 6d 12 	call	0x24da	; 0x24da <WelcomeScreen>
	//ADMIN_PasswordSetCheck();
	while(1)
	{
		SelectMode();
    2496:	0e 94 80 12 	call	0x2500	; 0x2500 <SelectMode>
    249a:	fd cf       	rjmp	.-6      	; 0x2496 <main+0x10>

0000249c <init>:
	}
	return 0;
}

void init(void)
{
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
	GIE_voidEnable(); ////Global interrupt enable
    24a4:	0e 94 ab 08 	call	0x1156	; 0x1156 <GIE_voidEnable>
	TIMER1_Init(); //Timer1 initialization
    24a8:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <TIMER1_Init>
	SPI_vInitMaster(); //SPI master initialization
    24ac:	0e 94 65 08 	call	0x10ca	; 0x10ca <SPI_vInitMaster>
	SERVO_INIT(); //servo motor initialization
    24b0:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <SERVO_INIT>
	KPD_INIT(); //keypad initialization
    24b4:	0e 94 10 10 	call	0x2020	; 0x2020 <KPD_INIT>
	LCD_INIT(); //LCD initialization
    24b8:	0e 94 66 0d 	call	0x1acc	; 0x1acc <LCD_INIT>
	//LED init
	LED_voidInit(ADMIN_LED_PORT, ADMIN_LED_PIN );
    24bc:	81 e0       	ldi	r24, 0x01	; 1
    24be:	60 e0       	ldi	r22, 0x00	; 0
    24c0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <LED_voidInit>
	LED_voidInit(USER_LED_PORT, USER_LED_PIN );
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	61 e0       	ldi	r22, 0x01	; 1
    24c8:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <LED_voidInit>
	LED_voidInit(BLOCKED_LED_PORT, BLOCKED_LED_PIN );
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	62 e0       	ldi	r22, 0x02	; 2
    24d0:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <LED_voidInit>

}
    24d4:	cf 91       	pop	r28
    24d6:	df 91       	pop	r29
    24d8:	08 95       	ret

000024da <WelcomeScreen>:

void WelcomeScreen(void)
{
    24da:	df 93       	push	r29
    24dc:	cf 93       	push	r28
    24de:	cd b7       	in	r28, 0x3d	; 61
    24e0:	de b7       	in	r29, 0x3e	; 62
	LCD_CLEAR_ALL_SCREEN();
    24e2:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_CLEAR_ALL_SCREEN>
	LCD_GOTO_XY(0,0);
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	60 e0       	ldi	r22, 0x00	; 0
    24ea:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
	SEND_A_STRING("Welcome to smart home system");
    24ee:	80 e7       	ldi	r24, 0x70	; 112
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
	LCD_CLEAR_ALL_SCREEN();
    24f6:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_CLEAR_ALL_SCREEN>
}
    24fa:	cf 91       	pop	r28
    24fc:	df 91       	pop	r29
    24fe:	08 95       	ret

00002500 <SelectMode>:
		LCD_GOTO_XY(0,0);
	}
}*/

void SelectMode(void)
{
    2500:	0f 93       	push	r16
    2502:	1f 93       	push	r17
    2504:	df 93       	push	r29
    2506:	cf 93       	push	r28
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
    250c:	c8 57       	subi	r28, 0x78	; 120
    250e:	d0 40       	sbci	r29, 0x00	; 0
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	f8 94       	cli
    2514:	de bf       	out	0x3e, r29	; 62
    2516:	0f be       	out	0x3f, r0	; 63
    2518:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8KeyPressed = KPD_NOT_PRESSED, Local_u8Counter = 0, Local_u8PassStatue, Local_u8PassAttempts = 0;
    251a:	fe 01       	movw	r30, r28
    251c:	ec 58       	subi	r30, 0x8C	; 140
    251e:	ff 4f       	sbci	r31, 0xFF	; 255
    2520:	8f ef       	ldi	r24, 0xFF	; 255
    2522:	80 83       	st	Z, r24
    2524:	fe 01       	movw	r30, r28
    2526:	ed 58       	subi	r30, 0x8D	; 141
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	10 82       	st	Z, r1
    252c:	fe 01       	movw	r30, r28
    252e:	ef 58       	subi	r30, 0x8F	; 143
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	10 82       	st	Z, r1
	u8 Local_u8EnteredPass[PASS_SIZE];
	Label1: LCD_CLEAR_ALL_SCREEN();
    2534:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_CLEAR_ALL_SCREEN>
	LCD_GOTO_XY(0,0);
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	60 e0       	ldi	r22, 0x00	; 0
    253c:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
	SEND_A_STRING("Choose Mode: ");
    2540:	8d e8       	ldi	r24, 0x8D	; 141
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
	LCD_GOTO_XY(1,0);
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	60 e0       	ldi	r22, 0x00	; 0
    254c:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
	SEND_A_STRING("1:ADMIN  2:USER");
    2550:	8b e9       	ldi	r24, 0x9B	; 155
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
	Local_u8KeyPressed = KPD_NOT_PRESSED;
    2558:	fe 01       	movw	r30, r28
    255a:	ec 58       	subi	r30, 0x8C	; 140
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	8f ef       	ldi	r24, 0xFF	; 255
    2560:	80 83       	st	Z, r24
    2562:	06 c0       	rjmp	.+12     	; 0x2570 <SelectMode+0x70>
	while(Local_u8KeyPressed == KPD_NOT_PRESSED)
	{
		Local_u8KeyPressed = KPD_GETKEY();
    2564:	0e 94 67 10 	call	0x20ce	; 0x20ce <KPD_GETKEY>
    2568:	fe 01       	movw	r30, r28
    256a:	ec 58       	subi	r30, 0x8C	; 140
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	80 83       	st	Z, r24
	LCD_GOTO_XY(0,0);
	SEND_A_STRING("Choose Mode: ");
	LCD_GOTO_XY(1,0);
	SEND_A_STRING("1:ADMIN  2:USER");
	Local_u8KeyPressed = KPD_NOT_PRESSED;
	while(Local_u8KeyPressed == KPD_NOT_PRESSED)
    2570:	fe 01       	movw	r30, r28
    2572:	ec 58       	subi	r30, 0x8C	; 140
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	80 81       	ld	r24, Z
    2578:	8f 3f       	cpi	r24, 0xFF	; 255
    257a:	a1 f3       	breq	.-24     	; 0x2564 <SelectMode+0x64>
	{
		Local_u8KeyPressed = KPD_GETKEY();
	}
	if(Local_u8KeyPressed == CHOOSE_ADMIN_MODE)
    257c:	fe 01       	movw	r30, r28
    257e:	ec 58       	subi	r30, 0x8C	; 140
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	80 81       	ld	r24, Z
    2584:	81 33       	cpi	r24, 0x31	; 49
    2586:	09 f0       	breq	.+2      	; 0x258a <SelectMode+0x8a>
    2588:	48 c3       	rjmp	.+1680   	; 0x2c1a <SelectMode+0x71a>
	{
		Label2: LCD_CLEAR_ALL_SCREEN();
    258a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_CLEAR_ALL_SCREEN>
		LCD_GOTO_XY(0,0);
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	60 e0       	ldi	r22, 0x00	; 0
    2592:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
		SEND_A_STRING("Enter password:  ");
    2596:	8b ea       	ldi	r24, 0xAB	; 171
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
		LCD_GOTO_XY(1,0);
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	60 e0       	ldi	r22, 0x00	; 0
    25a2:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
		//display cursor to assist user to enter password
		LCD_SEND_A_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
    25a6:	8f e0       	ldi	r24, 0x0F	; 15
    25a8:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <LCD_SEND_A_COMMAND>
    25ac:	32 c0       	rjmp	.+100    	; 0x2612 <SelectMode+0x112>
		//looping until user enters password
		while(Local_u8Counter < PASS_SIZE)
		{
			Local_u8KeyPressed = KPD_NOT_PRESSED;
    25ae:	fe 01       	movw	r30, r28
    25b0:	ec 58       	subi	r30, 0x8C	; 140
    25b2:	ff 4f       	sbci	r31, 0xFF	; 255
    25b4:	8f ef       	ldi	r24, 0xFF	; 255
    25b6:	80 83       	st	Z, r24
    25b8:	06 c0       	rjmp	.+12     	; 0x25c6 <SelectMode+0xc6>
			//wait till user enter anything
			while(Local_u8KeyPressed == KPD_NOT_PRESSED)
			{
				Local_u8KeyPressed = KPD_GETKEY();
    25ba:	0e 94 67 10 	call	0x20ce	; 0x20ce <KPD_GETKEY>
    25be:	fe 01       	movw	r30, r28
    25c0:	ec 58       	subi	r30, 0x8C	; 140
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	80 83       	st	Z, r24
		//looping until user enters password
		while(Local_u8Counter < PASS_SIZE)
		{
			Local_u8KeyPressed = KPD_NOT_PRESSED;
			//wait till user enter anything
			while(Local_u8KeyPressed == KPD_NOT_PRESSED)
    25c6:	fe 01       	movw	r30, r28
    25c8:	ec 58       	subi	r30, 0x8C	; 140
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	80 81       	ld	r24, Z
    25ce:	8f 3f       	cpi	r24, 0xFF	; 255
    25d0:	a1 f3       	breq	.-24     	; 0x25ba <SelectMode+0xba>
			{
				Local_u8KeyPressed = KPD_GETKEY();
			}
			//display num on lcd
			SEND_A_CHAR(Local_u8KeyPressed);
    25d2:	fe 01       	movw	r30, r28
    25d4:	ec 58       	subi	r30, 0x8C	; 140
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	80 81       	ld	r24, Z
    25da:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <SEND_A_CHAR>
			//store digits of password in the array
			Local_u8EnteredPass[Local_u8Counter] = Local_u8KeyPressed;
    25de:	fe 01       	movw	r30, r28
    25e0:	ed 58       	subi	r30, 0x8D	; 141
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	80 81       	ld	r24, Z
    25e6:	28 2f       	mov	r18, r24
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	ce 01       	movw	r24, r28
    25ec:	8b 58       	subi	r24, 0x8B	; 139
    25ee:	9f 4f       	sbci	r25, 0xFF	; 255
    25f0:	dc 01       	movw	r26, r24
    25f2:	a2 0f       	add	r26, r18
    25f4:	b3 1f       	adc	r27, r19
    25f6:	fe 01       	movw	r30, r28
    25f8:	ec 58       	subi	r30, 0x8C	; 140
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	80 81       	ld	r24, Z
    25fe:	8c 93       	st	X, r24
			//increase counter to store next digit
			Local_u8Counter++;
    2600:	de 01       	movw	r26, r28
    2602:	ad 58       	subi	r26, 0x8D	; 141
    2604:	bf 4f       	sbci	r27, 0xFF	; 255
    2606:	fe 01       	movw	r30, r28
    2608:	ed 58       	subi	r30, 0x8D	; 141
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	80 81       	ld	r24, Z
    260e:	8f 5f       	subi	r24, 0xFF	; 255
    2610:	8c 93       	st	X, r24
		SEND_A_STRING("Enter password:  ");
		LCD_GOTO_XY(1,0);
		//display cursor to assist user to enter password
		LCD_SEND_A_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
		//looping until user enters password
		while(Local_u8Counter < PASS_SIZE)
    2612:	fe 01       	movw	r30, r28
    2614:	ed 58       	subi	r30, 0x8D	; 141
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	80 81       	ld	r24, Z
    261a:	84 30       	cpi	r24, 0x04	; 4
    261c:	40 f2       	brcs	.-112    	; 0x25ae <SelectMode+0xae>
			Local_u8EnteredPass[Local_u8Counter] = Local_u8KeyPressed;
			//increase counter to store next digit
			Local_u8Counter++;
		}
		//remove cursor after entering password
		LCD_SEND_A_COMMAND(LCD_DISP_ON_CURSOR_OFF);
    261e:	8c e0       	ldi	r24, 0x0C	; 12
    2620:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <LCD_SEND_A_COMMAND>
		//check if password is correct
		Local_u8PassStatue = CheckPassword(Local_u8EnteredPass,Global_u8StoredPass_ADMIN, PASS_SIZE );
    2624:	ce 01       	movw	r24, r28
    2626:	8b 58       	subi	r24, 0x8B	; 139
    2628:	9f 4f       	sbci	r25, 0xFF	; 255
    262a:	21 ef       	ldi	r18, 0xF1	; 241
    262c:	32 e0       	ldi	r19, 0x02	; 2
    262e:	b9 01       	movw	r22, r18
    2630:	44 e0       	ldi	r20, 0x04	; 4
    2632:	0e 94 92 18 	call	0x3124	; 0x3124 <CheckPassword>
    2636:	fe 01       	movw	r30, r28
    2638:	ee 58       	subi	r30, 0x8E	; 142
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	80 83       	st	Z, r24
		//reset counter
		Local_u8Counter = 0;
    263e:	fe 01       	movw	r30, r28
    2640:	ed 58       	subi	r30, 0x8D	; 141
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	10 82       	st	Z, r1
		if(Local_u8PassStatue == CORRECT_PASS)
    2646:	fe 01       	movw	r30, r28
    2648:	ee 58       	subi	r30, 0x8E	; 142
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	80 81       	ld	r24, Z
    264e:	81 30       	cpi	r24, 0x01	; 1
    2650:	39 f4       	brne	.+14     	; 0x2660 <SelectMode+0x160>
		{
			Local_u8PassAttempts = 0;
    2652:	fe 01       	movw	r30, r28
    2654:	ef 58       	subi	r30, 0x8F	; 143
    2656:	ff 4f       	sbci	r31, 0xFF	; 255
    2658:	10 82       	st	Z, r1
			ADMIN_Menu();
    265a:	0e 94 cc 18 	call	0x3198	; 0x3198 <ADMIN_Menu>
    265e:	56 c5       	rjmp	.+2732   	; 0x310c <SelectMode+0xc0c>
		}
		else
		{
			Local_u8PassAttempts++;
    2660:	de 01       	movw	r26, r28
    2662:	af 58       	subi	r26, 0x8F	; 143
    2664:	bf 4f       	sbci	r27, 0xFF	; 255
    2666:	fe 01       	movw	r30, r28
    2668:	ef 58       	subi	r30, 0x8F	; 143
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	80 81       	ld	r24, Z
    266e:	8f 5f       	subi	r24, 0xFF	; 255
    2670:	8c 93       	st	X, r24
			LCD_CLEAR_ALL_SCREEN();
    2672:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_CLEAR_ALL_SCREEN>
			LCD_GOTO_XY(0,0);
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	60 e0       	ldi	r22, 0x00	; 0
    267a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
			SEND_A_STRING("Wrong Password!");
    267e:	8d eb       	ldi	r24, 0xBD	; 189
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
			//if no password tries left the user will be blocked for specific time
			if(Local_u8PassAttempts >= PASS_ATTEMPTS)
    2686:	fe 01       	movw	r30, r28
    2688:	ef 58       	subi	r30, 0x8F	; 143
    268a:	ff 4f       	sbci	r31, 0xFF	; 255
    268c:	80 81       	ld	r24, Z
    268e:	83 30       	cpi	r24, 0x03	; 3
    2690:	08 f4       	brcc	.+2      	; 0x2694 <SelectMode+0x194>
    2692:	7b cf       	rjmp	.-266    	; 0x258a <SelectMode+0x8a>
			{
				LCD_CLEAR_ALL_SCREEN();
    2694:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_CLEAR_ALL_SCREEN>
				LCD_GOTO_XY(0,0);
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	60 e0       	ldi	r22, 0x00	; 0
    269c:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
				SEND_A_STRING("No tries left");
    26a0:	8d ec       	ldi	r24, 0xCD	; 205
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
    26a8:	fe 01       	movw	r30, r28
    26aa:	e3 59       	subi	r30, 0x93	; 147
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	90 e8       	ldi	r25, 0x80	; 128
    26b2:	ab e3       	ldi	r26, 0x3B	; 59
    26b4:	b5 e4       	ldi	r27, 0x45	; 69
    26b6:	80 83       	st	Z, r24
    26b8:	91 83       	std	Z+1, r25	; 0x01
    26ba:	a2 83       	std	Z+2, r26	; 0x02
    26bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26be:	8e 01       	movw	r16, r28
    26c0:	07 59       	subi	r16, 0x97	; 151
    26c2:	1f 4f       	sbci	r17, 0xFF	; 255
    26c4:	fe 01       	movw	r30, r28
    26c6:	e3 59       	subi	r30, 0x93	; 147
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	60 81       	ld	r22, Z
    26cc:	71 81       	ldd	r23, Z+1	; 0x01
    26ce:	82 81       	ldd	r24, Z+2	; 0x02
    26d0:	93 81       	ldd	r25, Z+3	; 0x03
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	4a ef       	ldi	r20, 0xFA	; 250
    26d8:	54 e4       	ldi	r21, 0x44	; 68
    26da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	f8 01       	movw	r30, r16
    26e4:	80 83       	st	Z, r24
    26e6:	91 83       	std	Z+1, r25	; 0x01
    26e8:	a2 83       	std	Z+2, r26	; 0x02
    26ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26ec:	fe 01       	movw	r30, r28
    26ee:	e7 59       	subi	r30, 0x97	; 151
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	60 81       	ld	r22, Z
    26f4:	71 81       	ldd	r23, Z+1	; 0x01
    26f6:	82 81       	ldd	r24, Z+2	; 0x02
    26f8:	93 81       	ldd	r25, Z+3	; 0x03
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	40 e8       	ldi	r20, 0x80	; 128
    2700:	5f e3       	ldi	r21, 0x3F	; 63
    2702:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2706:	88 23       	and	r24, r24
    2708:	44 f4       	brge	.+16     	; 0x271a <SelectMode+0x21a>
		__ticks = 1;
    270a:	fe 01       	movw	r30, r28
    270c:	e9 59       	subi	r30, 0x99	; 153
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	91 83       	std	Z+1, r25	; 0x01
    2716:	80 83       	st	Z, r24
    2718:	64 c0       	rjmp	.+200    	; 0x27e2 <SelectMode+0x2e2>
	else if (__tmp > 65535)
    271a:	fe 01       	movw	r30, r28
    271c:	e7 59       	subi	r30, 0x97	; 151
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	60 81       	ld	r22, Z
    2722:	71 81       	ldd	r23, Z+1	; 0x01
    2724:	82 81       	ldd	r24, Z+2	; 0x02
    2726:	93 81       	ldd	r25, Z+3	; 0x03
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	3f ef       	ldi	r19, 0xFF	; 255
    272c:	4f e7       	ldi	r20, 0x7F	; 127
    272e:	57 e4       	ldi	r21, 0x47	; 71
    2730:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2734:	18 16       	cp	r1, r24
    2736:	0c f0       	brlt	.+2      	; 0x273a <SelectMode+0x23a>
    2738:	43 c0       	rjmp	.+134    	; 0x27c0 <SelectMode+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    273a:	fe 01       	movw	r30, r28
    273c:	e3 59       	subi	r30, 0x93	; 147
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	60 81       	ld	r22, Z
    2742:	71 81       	ldd	r23, Z+1	; 0x01
    2744:	82 81       	ldd	r24, Z+2	; 0x02
    2746:	93 81       	ldd	r25, Z+3	; 0x03
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e2       	ldi	r20, 0x20	; 32
    274e:	51 e4       	ldi	r21, 0x41	; 65
    2750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	8e 01       	movw	r16, r28
    275a:	09 59       	subi	r16, 0x99	; 153
    275c:	1f 4f       	sbci	r17, 0xFF	; 255
    275e:	bc 01       	movw	r22, r24
    2760:	cd 01       	movw	r24, r26
    2762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	f8 01       	movw	r30, r16
    276c:	91 83       	std	Z+1, r25	; 0x01
    276e:	80 83       	st	Z, r24
    2770:	1f c0       	rjmp	.+62     	; 0x27b0 <SelectMode+0x2b0>
    2772:	fe 01       	movw	r30, r28
    2774:	eb 59       	subi	r30, 0x9B	; 155
    2776:	ff 4f       	sbci	r31, 0xFF	; 255
    2778:	88 ec       	ldi	r24, 0xC8	; 200
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	91 83       	std	Z+1, r25	; 0x01
    277e:	80 83       	st	Z, r24
    2780:	fe 01       	movw	r30, r28
    2782:	eb 59       	subi	r30, 0x9B	; 155
    2784:	ff 4f       	sbci	r31, 0xFF	; 255
    2786:	80 81       	ld	r24, Z
    2788:	91 81       	ldd	r25, Z+1	; 0x01
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	f1 f7       	brne	.-4      	; 0x278a <SelectMode+0x28a>
    278e:	fe 01       	movw	r30, r28
    2790:	eb 59       	subi	r30, 0x9B	; 155
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	91 83       	std	Z+1, r25	; 0x01
    2796:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2798:	de 01       	movw	r26, r28
    279a:	a9 59       	subi	r26, 0x99	; 153
    279c:	bf 4f       	sbci	r27, 0xFF	; 255
    279e:	fe 01       	movw	r30, r28
    27a0:	e9 59       	subi	r30, 0x99	; 153
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	80 81       	ld	r24, Z
    27a6:	91 81       	ldd	r25, Z+1	; 0x01
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	11 96       	adiw	r26, 0x01	; 1
    27ac:	9c 93       	st	X, r25
    27ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b0:	fe 01       	movw	r30, r28
    27b2:	e9 59       	subi	r30, 0x99	; 153
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	80 81       	ld	r24, Z
    27b8:	91 81       	ldd	r25, Z+1	; 0x01
    27ba:	00 97       	sbiw	r24, 0x00	; 0
    27bc:	d1 f6       	brne	.-76     	; 0x2772 <SelectMode+0x272>
    27be:	27 c0       	rjmp	.+78     	; 0x280e <SelectMode+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c0:	8e 01       	movw	r16, r28
    27c2:	09 59       	subi	r16, 0x99	; 153
    27c4:	1f 4f       	sbci	r17, 0xFF	; 255
    27c6:	fe 01       	movw	r30, r28
    27c8:	e7 59       	subi	r30, 0x97	; 151
    27ca:	ff 4f       	sbci	r31, 0xFF	; 255
    27cc:	60 81       	ld	r22, Z
    27ce:	71 81       	ldd	r23, Z+1	; 0x01
    27d0:	82 81       	ldd	r24, Z+2	; 0x02
    27d2:	93 81       	ldd	r25, Z+3	; 0x03
    27d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	f8 01       	movw	r30, r16
    27de:	91 83       	std	Z+1, r25	; 0x01
    27e0:	80 83       	st	Z, r24
    27e2:	de 01       	movw	r26, r28
    27e4:	ad 59       	subi	r26, 0x9D	; 157
    27e6:	bf 4f       	sbci	r27, 0xFF	; 255
    27e8:	fe 01       	movw	r30, r28
    27ea:	e9 59       	subi	r30, 0x99	; 153
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	80 81       	ld	r24, Z
    27f0:	91 81       	ldd	r25, Z+1	; 0x01
    27f2:	8d 93       	st	X+, r24
    27f4:	9c 93       	st	X, r25
    27f6:	fe 01       	movw	r30, r28
    27f8:	ed 59       	subi	r30, 0x9D	; 157
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	80 81       	ld	r24, Z
    27fe:	91 81       	ldd	r25, Z+1	; 0x01
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	f1 f7       	brne	.-4      	; 0x2800 <SelectMode+0x300>
    2804:	fe 01       	movw	r30, r28
    2806:	ed 59       	subi	r30, 0x9D	; 157
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	91 83       	std	Z+1, r25	; 0x01
    280c:	80 83       	st	Z, r24
				_delay_ms(3000);
				LCD_CLEAR_ALL_SCREEN();
    280e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_CLEAR_ALL_SCREEN>
				SEND_A_STRING("Blocked for");
    2812:	8b ed       	ldi	r24, 0xDB	; 219
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
				LCD_GOTO_XY(1,0);
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	60 e0       	ldi	r22, 0x00	; 0
    281e:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
				SEND_A_STRING("15 sec");
    2822:	87 ee       	ldi	r24, 0xE7	; 231
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
				//turn on blocked led for 10 sec then turn it off
				LED_voidTurnON(BLOCKED_LED_PORT, BLOCKED_LED_PIN);
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	62 e0       	ldi	r22, 0x02	; 2
    282e:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <LED_voidTurnON>
    2832:	fe 01       	movw	r30, r28
    2834:	e1 5a       	subi	r30, 0xA1	; 161
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	90 e4       	ldi	r25, 0x40	; 64
    283c:	ac e9       	ldi	r26, 0x9C	; 156
    283e:	b5 e4       	ldi	r27, 0x45	; 69
    2840:	80 83       	st	Z, r24
    2842:	91 83       	std	Z+1, r25	; 0x01
    2844:	a2 83       	std	Z+2, r26	; 0x02
    2846:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2848:	8e 01       	movw	r16, r28
    284a:	05 5a       	subi	r16, 0xA5	; 165
    284c:	1f 4f       	sbci	r17, 0xFF	; 255
    284e:	fe 01       	movw	r30, r28
    2850:	e1 5a       	subi	r30, 0xA1	; 161
    2852:	ff 4f       	sbci	r31, 0xFF	; 255
    2854:	60 81       	ld	r22, Z
    2856:	71 81       	ldd	r23, Z+1	; 0x01
    2858:	82 81       	ldd	r24, Z+2	; 0x02
    285a:	93 81       	ldd	r25, Z+3	; 0x03
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	4a ef       	ldi	r20, 0xFA	; 250
    2862:	54 e4       	ldi	r21, 0x44	; 68
    2864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	f8 01       	movw	r30, r16
    286e:	80 83       	st	Z, r24
    2870:	91 83       	std	Z+1, r25	; 0x01
    2872:	a2 83       	std	Z+2, r26	; 0x02
    2874:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2876:	fe 01       	movw	r30, r28
    2878:	e5 5a       	subi	r30, 0xA5	; 165
    287a:	ff 4f       	sbci	r31, 0xFF	; 255
    287c:	60 81       	ld	r22, Z
    287e:	71 81       	ldd	r23, Z+1	; 0x01
    2880:	82 81       	ldd	r24, Z+2	; 0x02
    2882:	93 81       	ldd	r25, Z+3	; 0x03
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e8       	ldi	r20, 0x80	; 128
    288a:	5f e3       	ldi	r21, 0x3F	; 63
    288c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2890:	88 23       	and	r24, r24
    2892:	44 f4       	brge	.+16     	; 0x28a4 <SelectMode+0x3a4>
		__ticks = 1;
    2894:	fe 01       	movw	r30, r28
    2896:	e7 5a       	subi	r30, 0xA7	; 167
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	91 83       	std	Z+1, r25	; 0x01
    28a0:	80 83       	st	Z, r24
    28a2:	64 c0       	rjmp	.+200    	; 0x296c <SelectMode+0x46c>
	else if (__tmp > 65535)
    28a4:	fe 01       	movw	r30, r28
    28a6:	e5 5a       	subi	r30, 0xA5	; 165
    28a8:	ff 4f       	sbci	r31, 0xFF	; 255
    28aa:	60 81       	ld	r22, Z
    28ac:	71 81       	ldd	r23, Z+1	; 0x01
    28ae:	82 81       	ldd	r24, Z+2	; 0x02
    28b0:	93 81       	ldd	r25, Z+3	; 0x03
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	3f ef       	ldi	r19, 0xFF	; 255
    28b6:	4f e7       	ldi	r20, 0x7F	; 127
    28b8:	57 e4       	ldi	r21, 0x47	; 71
    28ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28be:	18 16       	cp	r1, r24
    28c0:	0c f0       	brlt	.+2      	; 0x28c4 <SelectMode+0x3c4>
    28c2:	43 c0       	rjmp	.+134    	; 0x294a <SelectMode+0x44a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c4:	fe 01       	movw	r30, r28
    28c6:	e1 5a       	subi	r30, 0xA1	; 161
    28c8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ca:	60 81       	ld	r22, Z
    28cc:	71 81       	ldd	r23, Z+1	; 0x01
    28ce:	82 81       	ldd	r24, Z+2	; 0x02
    28d0:	93 81       	ldd	r25, Z+3	; 0x03
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	40 e2       	ldi	r20, 0x20	; 32
    28d8:	51 e4       	ldi	r21, 0x41	; 65
    28da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	8e 01       	movw	r16, r28
    28e4:	07 5a       	subi	r16, 0xA7	; 167
    28e6:	1f 4f       	sbci	r17, 0xFF	; 255
    28e8:	bc 01       	movw	r22, r24
    28ea:	cd 01       	movw	r24, r26
    28ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	f8 01       	movw	r30, r16
    28f6:	91 83       	std	Z+1, r25	; 0x01
    28f8:	80 83       	st	Z, r24
    28fa:	1f c0       	rjmp	.+62     	; 0x293a <SelectMode+0x43a>
    28fc:	fe 01       	movw	r30, r28
    28fe:	e9 5a       	subi	r30, 0xA9	; 169
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	88 ec       	ldi	r24, 0xC8	; 200
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	91 83       	std	Z+1, r25	; 0x01
    2908:	80 83       	st	Z, r24
    290a:	fe 01       	movw	r30, r28
    290c:	e9 5a       	subi	r30, 0xA9	; 169
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	80 81       	ld	r24, Z
    2912:	91 81       	ldd	r25, Z+1	; 0x01
    2914:	01 97       	sbiw	r24, 0x01	; 1
    2916:	f1 f7       	brne	.-4      	; 0x2914 <SelectMode+0x414>
    2918:	fe 01       	movw	r30, r28
    291a:	e9 5a       	subi	r30, 0xA9	; 169
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	91 83       	std	Z+1, r25	; 0x01
    2920:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2922:	de 01       	movw	r26, r28
    2924:	a7 5a       	subi	r26, 0xA7	; 167
    2926:	bf 4f       	sbci	r27, 0xFF	; 255
    2928:	fe 01       	movw	r30, r28
    292a:	e7 5a       	subi	r30, 0xA7	; 167
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	80 81       	ld	r24, Z
    2930:	91 81       	ldd	r25, Z+1	; 0x01
    2932:	01 97       	sbiw	r24, 0x01	; 1
    2934:	11 96       	adiw	r26, 0x01	; 1
    2936:	9c 93       	st	X, r25
    2938:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293a:	fe 01       	movw	r30, r28
    293c:	e7 5a       	subi	r30, 0xA7	; 167
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	80 81       	ld	r24, Z
    2942:	91 81       	ldd	r25, Z+1	; 0x01
    2944:	00 97       	sbiw	r24, 0x00	; 0
    2946:	d1 f6       	brne	.-76     	; 0x28fc <SelectMode+0x3fc>
    2948:	27 c0       	rjmp	.+78     	; 0x2998 <SelectMode+0x498>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    294a:	8e 01       	movw	r16, r28
    294c:	07 5a       	subi	r16, 0xA7	; 167
    294e:	1f 4f       	sbci	r17, 0xFF	; 255
    2950:	fe 01       	movw	r30, r28
    2952:	e5 5a       	subi	r30, 0xA5	; 165
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	60 81       	ld	r22, Z
    2958:	71 81       	ldd	r23, Z+1	; 0x01
    295a:	82 81       	ldd	r24, Z+2	; 0x02
    295c:	93 81       	ldd	r25, Z+3	; 0x03
    295e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	f8 01       	movw	r30, r16
    2968:	91 83       	std	Z+1, r25	; 0x01
    296a:	80 83       	st	Z, r24
    296c:	de 01       	movw	r26, r28
    296e:	ab 5a       	subi	r26, 0xAB	; 171
    2970:	bf 4f       	sbci	r27, 0xFF	; 255
    2972:	fe 01       	movw	r30, r28
    2974:	e7 5a       	subi	r30, 0xA7	; 167
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	80 81       	ld	r24, Z
    297a:	91 81       	ldd	r25, Z+1	; 0x01
    297c:	8d 93       	st	X+, r24
    297e:	9c 93       	st	X, r25
    2980:	fe 01       	movw	r30, r28
    2982:	eb 5a       	subi	r30, 0xAB	; 171
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	80 81       	ld	r24, Z
    2988:	91 81       	ldd	r25, Z+1	; 0x01
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	f1 f7       	brne	.-4      	; 0x298a <SelectMode+0x48a>
    298e:	fe 01       	movw	r30, r28
    2990:	eb 5a       	subi	r30, 0xAB	; 171
    2992:	ff 4f       	sbci	r31, 0xFF	; 255
    2994:	91 83       	std	Z+1, r25	; 0x01
    2996:	80 83       	st	Z, r24
    2998:	fe 01       	movw	r30, r28
    299a:	ef 5a       	subi	r30, 0xAF	; 175
    299c:	ff 4f       	sbci	r31, 0xFF	; 255
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	90 e4       	ldi	r25, 0x40	; 64
    29a2:	ac e9       	ldi	r26, 0x9C	; 156
    29a4:	b5 e4       	ldi	r27, 0x45	; 69
    29a6:	80 83       	st	Z, r24
    29a8:	91 83       	std	Z+1, r25	; 0x01
    29aa:	a2 83       	std	Z+2, r26	; 0x02
    29ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ae:	8e 01       	movw	r16, r28
    29b0:	03 5b       	subi	r16, 0xB3	; 179
    29b2:	1f 4f       	sbci	r17, 0xFF	; 255
    29b4:	fe 01       	movw	r30, r28
    29b6:	ef 5a       	subi	r30, 0xAF	; 175
    29b8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ba:	60 81       	ld	r22, Z
    29bc:	71 81       	ldd	r23, Z+1	; 0x01
    29be:	82 81       	ldd	r24, Z+2	; 0x02
    29c0:	93 81       	ldd	r25, Z+3	; 0x03
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	4a ef       	ldi	r20, 0xFA	; 250
    29c8:	54 e4       	ldi	r21, 0x44	; 68
    29ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	f8 01       	movw	r30, r16
    29d4:	80 83       	st	Z, r24
    29d6:	91 83       	std	Z+1, r25	; 0x01
    29d8:	a2 83       	std	Z+2, r26	; 0x02
    29da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29dc:	fe 01       	movw	r30, r28
    29de:	e3 5b       	subi	r30, 0xB3	; 179
    29e0:	ff 4f       	sbci	r31, 0xFF	; 255
    29e2:	60 81       	ld	r22, Z
    29e4:	71 81       	ldd	r23, Z+1	; 0x01
    29e6:	82 81       	ldd	r24, Z+2	; 0x02
    29e8:	93 81       	ldd	r25, Z+3	; 0x03
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e8       	ldi	r20, 0x80	; 128
    29f0:	5f e3       	ldi	r21, 0x3F	; 63
    29f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f6:	88 23       	and	r24, r24
    29f8:	44 f4       	brge	.+16     	; 0x2a0a <SelectMode+0x50a>
		__ticks = 1;
    29fa:	fe 01       	movw	r30, r28
    29fc:	e5 5b       	subi	r30, 0xB5	; 181
    29fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	91 83       	std	Z+1, r25	; 0x01
    2a06:	80 83       	st	Z, r24
    2a08:	64 c0       	rjmp	.+200    	; 0x2ad2 <SelectMode+0x5d2>
	else if (__tmp > 65535)
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	e3 5b       	subi	r30, 0xB3	; 179
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	60 81       	ld	r22, Z
    2a12:	71 81       	ldd	r23, Z+1	; 0x01
    2a14:	82 81       	ldd	r24, Z+2	; 0x02
    2a16:	93 81       	ldd	r25, Z+3	; 0x03
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	3f ef       	ldi	r19, 0xFF	; 255
    2a1c:	4f e7       	ldi	r20, 0x7F	; 127
    2a1e:	57 e4       	ldi	r21, 0x47	; 71
    2a20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a24:	18 16       	cp	r1, r24
    2a26:	0c f0       	brlt	.+2      	; 0x2a2a <SelectMode+0x52a>
    2a28:	43 c0       	rjmp	.+134    	; 0x2ab0 <SelectMode+0x5b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a2a:	fe 01       	movw	r30, r28
    2a2c:	ef 5a       	subi	r30, 0xAF	; 175
    2a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a30:	60 81       	ld	r22, Z
    2a32:	71 81       	ldd	r23, Z+1	; 0x01
    2a34:	82 81       	ldd	r24, Z+2	; 0x02
    2a36:	93 81       	ldd	r25, Z+3	; 0x03
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e2       	ldi	r20, 0x20	; 32
    2a3e:	51 e4       	ldi	r21, 0x41	; 65
    2a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	8e 01       	movw	r16, r28
    2a4a:	05 5b       	subi	r16, 0xB5	; 181
    2a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4e:	bc 01       	movw	r22, r24
    2a50:	cd 01       	movw	r24, r26
    2a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	f8 01       	movw	r30, r16
    2a5c:	91 83       	std	Z+1, r25	; 0x01
    2a5e:	80 83       	st	Z, r24
    2a60:	1f c0       	rjmp	.+62     	; 0x2aa0 <SelectMode+0x5a0>
    2a62:	fe 01       	movw	r30, r28
    2a64:	e7 5b       	subi	r30, 0xB7	; 183
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	88 ec       	ldi	r24, 0xC8	; 200
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	91 83       	std	Z+1, r25	; 0x01
    2a6e:	80 83       	st	Z, r24
    2a70:	fe 01       	movw	r30, r28
    2a72:	e7 5b       	subi	r30, 0xB7	; 183
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	80 81       	ld	r24, Z
    2a78:	91 81       	ldd	r25, Z+1	; 0x01
    2a7a:	01 97       	sbiw	r24, 0x01	; 1
    2a7c:	f1 f7       	brne	.-4      	; 0x2a7a <SelectMode+0x57a>
    2a7e:	fe 01       	movw	r30, r28
    2a80:	e7 5b       	subi	r30, 0xB7	; 183
    2a82:	ff 4f       	sbci	r31, 0xFF	; 255
    2a84:	91 83       	std	Z+1, r25	; 0x01
    2a86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a88:	de 01       	movw	r26, r28
    2a8a:	a5 5b       	subi	r26, 0xB5	; 181
    2a8c:	bf 4f       	sbci	r27, 0xFF	; 255
    2a8e:	fe 01       	movw	r30, r28
    2a90:	e5 5b       	subi	r30, 0xB5	; 181
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	80 81       	ld	r24, Z
    2a96:	91 81       	ldd	r25, Z+1	; 0x01
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	11 96       	adiw	r26, 0x01	; 1
    2a9c:	9c 93       	st	X, r25
    2a9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa0:	fe 01       	movw	r30, r28
    2aa2:	e5 5b       	subi	r30, 0xB5	; 181
    2aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa6:	80 81       	ld	r24, Z
    2aa8:	91 81       	ldd	r25, Z+1	; 0x01
    2aaa:	00 97       	sbiw	r24, 0x00	; 0
    2aac:	d1 f6       	brne	.-76     	; 0x2a62 <SelectMode+0x562>
    2aae:	27 c0       	rjmp	.+78     	; 0x2afe <SelectMode+0x5fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab0:	8e 01       	movw	r16, r28
    2ab2:	05 5b       	subi	r16, 0xB5	; 181
    2ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	e3 5b       	subi	r30, 0xB3	; 179
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	60 81       	ld	r22, Z
    2abe:	71 81       	ldd	r23, Z+1	; 0x01
    2ac0:	82 81       	ldd	r24, Z+2	; 0x02
    2ac2:	93 81       	ldd	r25, Z+3	; 0x03
    2ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	f8 01       	movw	r30, r16
    2ace:	91 83       	std	Z+1, r25	; 0x01
    2ad0:	80 83       	st	Z, r24
    2ad2:	de 01       	movw	r26, r28
    2ad4:	a9 5b       	subi	r26, 0xB9	; 185
    2ad6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ad8:	fe 01       	movw	r30, r28
    2ada:	e5 5b       	subi	r30, 0xB5	; 181
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	80 81       	ld	r24, Z
    2ae0:	91 81       	ldd	r25, Z+1	; 0x01
    2ae2:	8d 93       	st	X+, r24
    2ae4:	9c 93       	st	X, r25
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	e9 5b       	subi	r30, 0xB9	; 185
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	80 81       	ld	r24, Z
    2aee:	91 81       	ldd	r25, Z+1	; 0x01
    2af0:	01 97       	sbiw	r24, 0x01	; 1
    2af2:	f1 f7       	brne	.-4      	; 0x2af0 <SelectMode+0x5f0>
    2af4:	fe 01       	movw	r30, r28
    2af6:	e9 5b       	subi	r30, 0xB9	; 185
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	91 83       	std	Z+1, r25	; 0x01
    2afc:	80 83       	st	Z, r24
    2afe:	fe 01       	movw	r30, r28
    2b00:	ed 5b       	subi	r30, 0xBD	; 189
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	90 e4       	ldi	r25, 0x40	; 64
    2b08:	ac e9       	ldi	r26, 0x9C	; 156
    2b0a:	b5 e4       	ldi	r27, 0x45	; 69
    2b0c:	80 83       	st	Z, r24
    2b0e:	91 83       	std	Z+1, r25	; 0x01
    2b10:	a2 83       	std	Z+2, r26	; 0x02
    2b12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b14:	8e 01       	movw	r16, r28
    2b16:	01 5c       	subi	r16, 0xC1	; 193
    2b18:	1f 4f       	sbci	r17, 0xFF	; 255
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	ed 5b       	subi	r30, 0xBD	; 189
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	60 81       	ld	r22, Z
    2b22:	71 81       	ldd	r23, Z+1	; 0x01
    2b24:	82 81       	ldd	r24, Z+2	; 0x02
    2b26:	93 81       	ldd	r25, Z+3	; 0x03
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	4a ef       	ldi	r20, 0xFA	; 250
    2b2e:	54 e4       	ldi	r21, 0x44	; 68
    2b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	f8 01       	movw	r30, r16
    2b3a:	80 83       	st	Z, r24
    2b3c:	91 83       	std	Z+1, r25	; 0x01
    2b3e:	a2 83       	std	Z+2, r26	; 0x02
    2b40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b42:	fe 01       	movw	r30, r28
    2b44:	ff 96       	adiw	r30, 0x3f	; 63
    2b46:	60 81       	ld	r22, Z
    2b48:	71 81       	ldd	r23, Z+1	; 0x01
    2b4a:	82 81       	ldd	r24, Z+2	; 0x02
    2b4c:	93 81       	ldd	r25, Z+3	; 0x03
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	40 e8       	ldi	r20, 0x80	; 128
    2b54:	5f e3       	ldi	r21, 0x3F	; 63
    2b56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b5a:	88 23       	and	r24, r24
    2b5c:	2c f4       	brge	.+10     	; 0x2b68 <SelectMode+0x668>
		__ticks = 1;
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	9e af       	std	Y+62, r25	; 0x3e
    2b64:	8d af       	std	Y+61, r24	; 0x3d
    2b66:	46 c0       	rjmp	.+140    	; 0x2bf4 <SelectMode+0x6f4>
	else if (__tmp > 65535)
    2b68:	fe 01       	movw	r30, r28
    2b6a:	ff 96       	adiw	r30, 0x3f	; 63
    2b6c:	60 81       	ld	r22, Z
    2b6e:	71 81       	ldd	r23, Z+1	; 0x01
    2b70:	82 81       	ldd	r24, Z+2	; 0x02
    2b72:	93 81       	ldd	r25, Z+3	; 0x03
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	3f ef       	ldi	r19, 0xFF	; 255
    2b78:	4f e7       	ldi	r20, 0x7F	; 127
    2b7a:	57 e4       	ldi	r21, 0x47	; 71
    2b7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b80:	18 16       	cp	r1, r24
    2b82:	64 f5       	brge	.+88     	; 0x2bdc <SelectMode+0x6dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b84:	fe 01       	movw	r30, r28
    2b86:	ed 5b       	subi	r30, 0xBD	; 189
    2b88:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8a:	60 81       	ld	r22, Z
    2b8c:	71 81       	ldd	r23, Z+1	; 0x01
    2b8e:	82 81       	ldd	r24, Z+2	; 0x02
    2b90:	93 81       	ldd	r25, Z+3	; 0x03
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e2       	ldi	r20, 0x20	; 32
    2b98:	51 e4       	ldi	r21, 0x41	; 65
    2b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	bc 01       	movw	r22, r24
    2ba4:	cd 01       	movw	r24, r26
    2ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	9e af       	std	Y+62, r25	; 0x3e
    2bb0:	8d af       	std	Y+61, r24	; 0x3d
    2bb2:	0f c0       	rjmp	.+30     	; 0x2bd2 <SelectMode+0x6d2>
    2bb4:	88 ec       	ldi	r24, 0xC8	; 200
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	9c af       	std	Y+60, r25	; 0x3c
    2bba:	8b af       	std	Y+59, r24	; 0x3b
    2bbc:	8b ad       	ldd	r24, Y+59	; 0x3b
    2bbe:	9c ad       	ldd	r25, Y+60	; 0x3c
    2bc0:	01 97       	sbiw	r24, 0x01	; 1
    2bc2:	f1 f7       	brne	.-4      	; 0x2bc0 <SelectMode+0x6c0>
    2bc4:	9c af       	std	Y+60, r25	; 0x3c
    2bc6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bca:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	9e af       	std	Y+62, r25	; 0x3e
    2bd0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bd4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bd6:	00 97       	sbiw	r24, 0x00	; 0
    2bd8:	69 f7       	brne	.-38     	; 0x2bb4 <SelectMode+0x6b4>
    2bda:	16 c0       	rjmp	.+44     	; 0x2c08 <SelectMode+0x708>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bdc:	fe 01       	movw	r30, r28
    2bde:	ff 96       	adiw	r30, 0x3f	; 63
    2be0:	60 81       	ld	r22, Z
    2be2:	71 81       	ldd	r23, Z+1	; 0x01
    2be4:	82 81       	ldd	r24, Z+2	; 0x02
    2be6:	93 81       	ldd	r25, Z+3	; 0x03
    2be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	9e af       	std	Y+62, r25	; 0x3e
    2bf2:	8d af       	std	Y+61, r24	; 0x3d
    2bf4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2bf6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2bf8:	9a af       	std	Y+58, r25	; 0x3a
    2bfa:	89 af       	std	Y+57, r24	; 0x39
    2bfc:	89 ad       	ldd	r24, Y+57	; 0x39
    2bfe:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c00:	01 97       	sbiw	r24, 0x01	; 1
    2c02:	f1 f7       	brne	.-4      	; 0x2c00 <SelectMode+0x700>
    2c04:	9a af       	std	Y+58, r25	; 0x3a
    2c06:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(5000);
				_delay_ms(5000);
				_delay_ms(5000);
				LED_voidTurnOFF(BLOCKED_LED_PORT, BLOCKED_LED_PIN);
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	62 e0       	ldi	r22, 0x02	; 2
    2c0c:	0e 94 8d 0c 	call	0x191a	; 0x191a <LED_voidTurnOFF>
				Local_u8PassAttempts = 0;
    2c10:	fe 01       	movw	r30, r28
    2c12:	ef 58       	subi	r30, 0x8F	; 143
    2c14:	ff 4f       	sbci	r31, 0xFF	; 255
    2c16:	10 82       	st	Z, r1
    2c18:	8d cc       	rjmp	.-1766   	; 0x2534 <SelectMode+0x34>
			}

			goto Label2;
		}
	}
	else if(Local_u8KeyPressed == CHOOSE_USER_MODE)
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	ec 58       	subi	r30, 0x8C	; 140
    2c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c20:	80 81       	ld	r24, Z
    2c22:	82 33       	cpi	r24, 0x32	; 50
    2c24:	09 f0       	breq	.+2      	; 0x2c28 <SelectMode+0x728>
    2c26:	72 c2       	rjmp	.+1252   	; 0x310c <SelectMode+0xc0c>
	{
		Label3: LCD_CLEAR_ALL_SCREEN();
    2c28:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_CLEAR_ALL_SCREEN>
		LCD_GOTO_XY(0,0);
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	60 e0       	ldi	r22, 0x00	; 0
    2c30:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
		SEND_A_STRING("Enter password:  ");
    2c34:	8b ea       	ldi	r24, 0xAB	; 171
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
		LCD_GOTO_XY(1,0);
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	60 e0       	ldi	r22, 0x00	; 0
    2c40:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
		//display cursor to assist user to enter password
		LCD_SEND_A_COMMAND(LCD_DISP_ON_CURSOR);
    2c44:	8e e0       	ldi	r24, 0x0E	; 14
    2c46:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <LCD_SEND_A_COMMAND>
    2c4a:	32 c0       	rjmp	.+100    	; 0x2cb0 <SelectMode+0x7b0>
		//looping until user enters password
		while(Local_u8Counter < PASS_SIZE)
		{
			Local_u8KeyPressed = KPD_NOT_PRESSED;
    2c4c:	fe 01       	movw	r30, r28
    2c4e:	ec 58       	subi	r30, 0x8C	; 140
    2c50:	ff 4f       	sbci	r31, 0xFF	; 255
    2c52:	8f ef       	ldi	r24, 0xFF	; 255
    2c54:	80 83       	st	Z, r24
    2c56:	06 c0       	rjmp	.+12     	; 0x2c64 <SelectMode+0x764>
			//wait till user enter anything
			while(Local_u8KeyPressed == KPD_NOT_PRESSED)
			{
				Local_u8KeyPressed = KPD_GETKEY();
    2c58:	0e 94 67 10 	call	0x20ce	; 0x20ce <KPD_GETKEY>
    2c5c:	fe 01       	movw	r30, r28
    2c5e:	ec 58       	subi	r30, 0x8C	; 140
    2c60:	ff 4f       	sbci	r31, 0xFF	; 255
    2c62:	80 83       	st	Z, r24
		//looping until user enters password
		while(Local_u8Counter < PASS_SIZE)
		{
			Local_u8KeyPressed = KPD_NOT_PRESSED;
			//wait till user enter anything
			while(Local_u8KeyPressed == KPD_NOT_PRESSED)
    2c64:	fe 01       	movw	r30, r28
    2c66:	ec 58       	subi	r30, 0x8C	; 140
    2c68:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6a:	80 81       	ld	r24, Z
    2c6c:	8f 3f       	cpi	r24, 0xFF	; 255
    2c6e:	a1 f3       	breq	.-24     	; 0x2c58 <SelectMode+0x758>
			{
				Local_u8KeyPressed = KPD_GETKEY();
			}
			//display num on lcd
			SEND_A_CHAR(Local_u8KeyPressed);
    2c70:	fe 01       	movw	r30, r28
    2c72:	ec 58       	subi	r30, 0x8C	; 140
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	80 81       	ld	r24, Z
    2c78:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <SEND_A_CHAR>
			//store digits of password in the array
			Local_u8EnteredPass[Local_u8Counter] = Local_u8KeyPressed;
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	ed 58       	subi	r30, 0x8D	; 141
    2c80:	ff 4f       	sbci	r31, 0xFF	; 255
    2c82:	80 81       	ld	r24, Z
    2c84:	28 2f       	mov	r18, r24
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	ce 01       	movw	r24, r28
    2c8a:	8b 58       	subi	r24, 0x8B	; 139
    2c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c8e:	dc 01       	movw	r26, r24
    2c90:	a2 0f       	add	r26, r18
    2c92:	b3 1f       	adc	r27, r19
    2c94:	fe 01       	movw	r30, r28
    2c96:	ec 58       	subi	r30, 0x8C	; 140
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	80 81       	ld	r24, Z
    2c9c:	8c 93       	st	X, r24
			//increase counter to store next digit
			Local_u8Counter++;
    2c9e:	de 01       	movw	r26, r28
    2ca0:	ad 58       	subi	r26, 0x8D	; 141
    2ca2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ca4:	fe 01       	movw	r30, r28
    2ca6:	ed 58       	subi	r30, 0x8D	; 141
    2ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    2caa:	80 81       	ld	r24, Z
    2cac:	8f 5f       	subi	r24, 0xFF	; 255
    2cae:	8c 93       	st	X, r24
		SEND_A_STRING("Enter password:  ");
		LCD_GOTO_XY(1,0);
		//display cursor to assist user to enter password
		LCD_SEND_A_COMMAND(LCD_DISP_ON_CURSOR);
		//looping until user enters password
		while(Local_u8Counter < PASS_SIZE)
    2cb0:	fe 01       	movw	r30, r28
    2cb2:	ed 58       	subi	r30, 0x8D	; 141
    2cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb6:	80 81       	ld	r24, Z
    2cb8:	84 30       	cpi	r24, 0x04	; 4
    2cba:	40 f2       	brcs	.-112    	; 0x2c4c <SelectMode+0x74c>
			Local_u8EnteredPass[Local_u8Counter] = Local_u8KeyPressed;
			//increase counter to store next digit
			Local_u8Counter++;
		}
		//remove cursor after entering password
		LCD_SEND_A_COMMAND(LCD_DISP_ON_CURSOR_OFF);
    2cbc:	8c e0       	ldi	r24, 0x0C	; 12
    2cbe:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <LCD_SEND_A_COMMAND>
		//reset counter
		Local_u8Counter = 0;
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	ed 58       	subi	r30, 0x8D	; 141
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	10 82       	st	Z, r1
		//check if password is correct
		Local_u8PassStatue = CheckPassword(Local_u8EnteredPass,Global_u8StoredPass_USER, PASS_SIZE );
    2cca:	ce 01       	movw	r24, r28
    2ccc:	8b 58       	subi	r24, 0x8B	; 139
    2cce:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd0:	25 ef       	ldi	r18, 0xF5	; 245
    2cd2:	32 e0       	ldi	r19, 0x02	; 2
    2cd4:	b9 01       	movw	r22, r18
    2cd6:	44 e0       	ldi	r20, 0x04	; 4
    2cd8:	0e 94 92 18 	call	0x3124	; 0x3124 <CheckPassword>
    2cdc:	fe 01       	movw	r30, r28
    2cde:	ee 58       	subi	r30, 0x8E	; 142
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	80 83       	st	Z, r24
		if(Local_u8PassStatue == CORRECT_PASS)
    2ce4:	fe 01       	movw	r30, r28
    2ce6:	ee 58       	subi	r30, 0x8E	; 142
    2ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cea:	80 81       	ld	r24, Z
    2cec:	81 30       	cpi	r24, 0x01	; 1
    2cee:	39 f4       	brne	.+14     	; 0x2cfe <SelectMode+0x7fe>
		{
			Local_u8PassAttempts = 0;
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	ef 58       	subi	r30, 0x8F	; 143
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	10 82       	st	Z, r1
			USER_Menu();
    2cf8:	0e 94 5f 1c 	call	0x38be	; 0x38be <USER_Menu>
    2cfc:	07 c2       	rjmp	.+1038   	; 0x310c <SelectMode+0xc0c>
		}
		else
		{
			Local_u8PassAttempts++;
    2cfe:	de 01       	movw	r26, r28
    2d00:	af 58       	subi	r26, 0x8F	; 143
    2d02:	bf 4f       	sbci	r27, 0xFF	; 255
    2d04:	fe 01       	movw	r30, r28
    2d06:	ef 58       	subi	r30, 0x8F	; 143
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	80 81       	ld	r24, Z
    2d0c:	8f 5f       	subi	r24, 0xFF	; 255
    2d0e:	8c 93       	st	X, r24
			LCD_CLEAR_ALL_SCREEN();
    2d10:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_CLEAR_ALL_SCREEN>
			LCD_GOTO_XY(0,0);
    2d14:	80 e0       	ldi	r24, 0x00	; 0
    2d16:	60 e0       	ldi	r22, 0x00	; 0
    2d18:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
			SEND_A_STRING("Wrong Password!");
    2d1c:	8d eb       	ldi	r24, 0xBD	; 189
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
			//if no password tries left the user will be blocked for specific time
			if(Local_u8PassAttempts >= PASS_ATTEMPTS)
    2d24:	fe 01       	movw	r30, r28
    2d26:	ef 58       	subi	r30, 0x8F	; 143
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	80 81       	ld	r24, Z
    2d2c:	83 30       	cpi	r24, 0x03	; 3
    2d2e:	08 f4       	brcc	.+2      	; 0x2d32 <SelectMode+0x832>
    2d30:	7b cf       	rjmp	.-266    	; 0x2c28 <SelectMode+0x728>
			{
				LCD_CLEAR_ALL_SCREEN();
    2d32:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_CLEAR_ALL_SCREEN>
				LCD_GOTO_XY(0,0);
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	60 e0       	ldi	r22, 0x00	; 0
    2d3a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
				SEND_A_STRING("No tries left");
    2d3e:	8d ec       	ldi	r24, 0xCD	; 205
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
    2d46:	80 e0       	ldi	r24, 0x00	; 0
    2d48:	90 e8       	ldi	r25, 0x80	; 128
    2d4a:	ab e3       	ldi	r26, 0x3B	; 59
    2d4c:	b5 e4       	ldi	r27, 0x45	; 69
    2d4e:	8d ab       	std	Y+53, r24	; 0x35
    2d50:	9e ab       	std	Y+54, r25	; 0x36
    2d52:	af ab       	std	Y+55, r26	; 0x37
    2d54:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d56:	6d a9       	ldd	r22, Y+53	; 0x35
    2d58:	7e a9       	ldd	r23, Y+54	; 0x36
    2d5a:	8f a9       	ldd	r24, Y+55	; 0x37
    2d5c:	98 ad       	ldd	r25, Y+56	; 0x38
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	4a ef       	ldi	r20, 0xFA	; 250
    2d64:	54 e4       	ldi	r21, 0x44	; 68
    2d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	89 ab       	std	Y+49, r24	; 0x31
    2d70:	9a ab       	std	Y+50, r25	; 0x32
    2d72:	ab ab       	std	Y+51, r26	; 0x33
    2d74:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d76:	69 a9       	ldd	r22, Y+49	; 0x31
    2d78:	7a a9       	ldd	r23, Y+50	; 0x32
    2d7a:	8b a9       	ldd	r24, Y+51	; 0x33
    2d7c:	9c a9       	ldd	r25, Y+52	; 0x34
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	40 e8       	ldi	r20, 0x80	; 128
    2d84:	5f e3       	ldi	r21, 0x3F	; 63
    2d86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d8a:	88 23       	and	r24, r24
    2d8c:	2c f4       	brge	.+10     	; 0x2d98 <SelectMode+0x898>
		__ticks = 1;
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	98 ab       	std	Y+48, r25	; 0x30
    2d94:	8f a7       	std	Y+47, r24	; 0x2f
    2d96:	3f c0       	rjmp	.+126    	; 0x2e16 <SelectMode+0x916>
	else if (__tmp > 65535)
    2d98:	69 a9       	ldd	r22, Y+49	; 0x31
    2d9a:	7a a9       	ldd	r23, Y+50	; 0x32
    2d9c:	8b a9       	ldd	r24, Y+51	; 0x33
    2d9e:	9c a9       	ldd	r25, Y+52	; 0x34
    2da0:	20 e0       	ldi	r18, 0x00	; 0
    2da2:	3f ef       	ldi	r19, 0xFF	; 255
    2da4:	4f e7       	ldi	r20, 0x7F	; 127
    2da6:	57 e4       	ldi	r21, 0x47	; 71
    2da8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dac:	18 16       	cp	r1, r24
    2dae:	4c f5       	brge	.+82     	; 0x2e02 <SelectMode+0x902>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db0:	6d a9       	ldd	r22, Y+53	; 0x35
    2db2:	7e a9       	ldd	r23, Y+54	; 0x36
    2db4:	8f a9       	ldd	r24, Y+55	; 0x37
    2db6:	98 ad       	ldd	r25, Y+56	; 0x38
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	40 e2       	ldi	r20, 0x20	; 32
    2dbe:	51 e4       	ldi	r21, 0x41	; 65
    2dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	bc 01       	movw	r22, r24
    2dca:	cd 01       	movw	r24, r26
    2dcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	98 ab       	std	Y+48, r25	; 0x30
    2dd6:	8f a7       	std	Y+47, r24	; 0x2f
    2dd8:	0f c0       	rjmp	.+30     	; 0x2df8 <SelectMode+0x8f8>
    2dda:	88 ec       	ldi	r24, 0xC8	; 200
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	9e a7       	std	Y+46, r25	; 0x2e
    2de0:	8d a7       	std	Y+45, r24	; 0x2d
    2de2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2de4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2de6:	01 97       	sbiw	r24, 0x01	; 1
    2de8:	f1 f7       	brne	.-4      	; 0x2de6 <SelectMode+0x8e6>
    2dea:	9e a7       	std	Y+46, r25	; 0x2e
    2dec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dee:	8f a5       	ldd	r24, Y+47	; 0x2f
    2df0:	98 a9       	ldd	r25, Y+48	; 0x30
    2df2:	01 97       	sbiw	r24, 0x01	; 1
    2df4:	98 ab       	std	Y+48, r25	; 0x30
    2df6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2df8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dfa:	98 a9       	ldd	r25, Y+48	; 0x30
    2dfc:	00 97       	sbiw	r24, 0x00	; 0
    2dfe:	69 f7       	brne	.-38     	; 0x2dda <SelectMode+0x8da>
    2e00:	14 c0       	rjmp	.+40     	; 0x2e2a <SelectMode+0x92a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e02:	69 a9       	ldd	r22, Y+49	; 0x31
    2e04:	7a a9       	ldd	r23, Y+50	; 0x32
    2e06:	8b a9       	ldd	r24, Y+51	; 0x33
    2e08:	9c a9       	ldd	r25, Y+52	; 0x34
    2e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e0e:	dc 01       	movw	r26, r24
    2e10:	cb 01       	movw	r24, r22
    2e12:	98 ab       	std	Y+48, r25	; 0x30
    2e14:	8f a7       	std	Y+47, r24	; 0x2f
    2e16:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e18:	98 a9       	ldd	r25, Y+48	; 0x30
    2e1a:	9c a7       	std	Y+44, r25	; 0x2c
    2e1c:	8b a7       	std	Y+43, r24	; 0x2b
    2e1e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e20:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e22:	01 97       	sbiw	r24, 0x01	; 1
    2e24:	f1 f7       	brne	.-4      	; 0x2e22 <SelectMode+0x922>
    2e26:	9c a7       	std	Y+44, r25	; 0x2c
    2e28:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(3000);
				LCD_CLEAR_ALL_SCREEN();
    2e2a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_CLEAR_ALL_SCREEN>
				SEND_A_STRING("Blocked for");
    2e2e:	8b ed       	ldi	r24, 0xDB	; 219
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
				LCD_GOTO_XY(1,0);
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	60 e0       	ldi	r22, 0x00	; 0
    2e3a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
				SEND_A_STRING("15 sec");
    2e3e:	87 ee       	ldi	r24, 0xE7	; 231
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
				//turn on blocked led for 10 sec then turn it off
				LED_voidTurnON(BLOCKED_LED_PORT, BLOCKED_LED_PIN);
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	62 e0       	ldi	r22, 0x02	; 2
    2e4a:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <LED_voidTurnON>
    2e4e:	80 e0       	ldi	r24, 0x00	; 0
    2e50:	90 e4       	ldi	r25, 0x40	; 64
    2e52:	ac e9       	ldi	r26, 0x9C	; 156
    2e54:	b5 e4       	ldi	r27, 0x45	; 69
    2e56:	8f a3       	std	Y+39, r24	; 0x27
    2e58:	98 a7       	std	Y+40, r25	; 0x28
    2e5a:	a9 a7       	std	Y+41, r26	; 0x29
    2e5c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5e:	6f a1       	ldd	r22, Y+39	; 0x27
    2e60:	78 a5       	ldd	r23, Y+40	; 0x28
    2e62:	89 a5       	ldd	r24, Y+41	; 0x29
    2e64:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	4a ef       	ldi	r20, 0xFA	; 250
    2e6c:	54 e4       	ldi	r21, 0x44	; 68
    2e6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e72:	dc 01       	movw	r26, r24
    2e74:	cb 01       	movw	r24, r22
    2e76:	8b a3       	std	Y+35, r24	; 0x23
    2e78:	9c a3       	std	Y+36, r25	; 0x24
    2e7a:	ad a3       	std	Y+37, r26	; 0x25
    2e7c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e7e:	6b a1       	ldd	r22, Y+35	; 0x23
    2e80:	7c a1       	ldd	r23, Y+36	; 0x24
    2e82:	8d a1       	ldd	r24, Y+37	; 0x25
    2e84:	9e a1       	ldd	r25, Y+38	; 0x26
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	40 e8       	ldi	r20, 0x80	; 128
    2e8c:	5f e3       	ldi	r21, 0x3F	; 63
    2e8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e92:	88 23       	and	r24, r24
    2e94:	2c f4       	brge	.+10     	; 0x2ea0 <SelectMode+0x9a0>
		__ticks = 1;
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	9a a3       	std	Y+34, r25	; 0x22
    2e9c:	89 a3       	std	Y+33, r24	; 0x21
    2e9e:	3f c0       	rjmp	.+126    	; 0x2f1e <SelectMode+0xa1e>
	else if (__tmp > 65535)
    2ea0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ea2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ea4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ea6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	3f ef       	ldi	r19, 0xFF	; 255
    2eac:	4f e7       	ldi	r20, 0x7F	; 127
    2eae:	57 e4       	ldi	r21, 0x47	; 71
    2eb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eb4:	18 16       	cp	r1, r24
    2eb6:	4c f5       	brge	.+82     	; 0x2f0a <SelectMode+0xa0a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb8:	6f a1       	ldd	r22, Y+39	; 0x27
    2eba:	78 a5       	ldd	r23, Y+40	; 0x28
    2ebc:	89 a5       	ldd	r24, Y+41	; 0x29
    2ebe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	40 e2       	ldi	r20, 0x20	; 32
    2ec6:	51 e4       	ldi	r21, 0x41	; 65
    2ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ecc:	dc 01       	movw	r26, r24
    2ece:	cb 01       	movw	r24, r22
    2ed0:	bc 01       	movw	r22, r24
    2ed2:	cd 01       	movw	r24, r26
    2ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	9a a3       	std	Y+34, r25	; 0x22
    2ede:	89 a3       	std	Y+33, r24	; 0x21
    2ee0:	0f c0       	rjmp	.+30     	; 0x2f00 <SelectMode+0xa00>
    2ee2:	88 ec       	ldi	r24, 0xC8	; 200
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	98 a3       	std	Y+32, r25	; 0x20
    2ee8:	8f 8f       	std	Y+31, r24	; 0x1f
    2eea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2eec:	98 a1       	ldd	r25, Y+32	; 0x20
    2eee:	01 97       	sbiw	r24, 0x01	; 1
    2ef0:	f1 f7       	brne	.-4      	; 0x2eee <SelectMode+0x9ee>
    2ef2:	98 a3       	std	Y+32, r25	; 0x20
    2ef4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ef8:	9a a1       	ldd	r25, Y+34	; 0x22
    2efa:	01 97       	sbiw	r24, 0x01	; 1
    2efc:	9a a3       	std	Y+34, r25	; 0x22
    2efe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f00:	89 a1       	ldd	r24, Y+33	; 0x21
    2f02:	9a a1       	ldd	r25, Y+34	; 0x22
    2f04:	00 97       	sbiw	r24, 0x00	; 0
    2f06:	69 f7       	brne	.-38     	; 0x2ee2 <SelectMode+0x9e2>
    2f08:	14 c0       	rjmp	.+40     	; 0x2f32 <SelectMode+0xa32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f0a:	6b a1       	ldd	r22, Y+35	; 0x23
    2f0c:	7c a1       	ldd	r23, Y+36	; 0x24
    2f0e:	8d a1       	ldd	r24, Y+37	; 0x25
    2f10:	9e a1       	ldd	r25, Y+38	; 0x26
    2f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	9a a3       	std	Y+34, r25	; 0x22
    2f1c:	89 a3       	std	Y+33, r24	; 0x21
    2f1e:	89 a1       	ldd	r24, Y+33	; 0x21
    2f20:	9a a1       	ldd	r25, Y+34	; 0x22
    2f22:	9e 8f       	std	Y+30, r25	; 0x1e
    2f24:	8d 8f       	std	Y+29, r24	; 0x1d
    2f26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <SelectMode+0xa2a>
    2f2e:	9e 8f       	std	Y+30, r25	; 0x1e
    2f30:	8d 8f       	std	Y+29, r24	; 0x1d
    2f32:	80 e0       	ldi	r24, 0x00	; 0
    2f34:	90 e4       	ldi	r25, 0x40	; 64
    2f36:	ac e9       	ldi	r26, 0x9C	; 156
    2f38:	b5 e4       	ldi	r27, 0x45	; 69
    2f3a:	89 8f       	std	Y+25, r24	; 0x19
    2f3c:	9a 8f       	std	Y+26, r25	; 0x1a
    2f3e:	ab 8f       	std	Y+27, r26	; 0x1b
    2f40:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f42:	69 8d       	ldd	r22, Y+25	; 0x19
    2f44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f4a:	20 e0       	ldi	r18, 0x00	; 0
    2f4c:	30 e0       	ldi	r19, 0x00	; 0
    2f4e:	4a ef       	ldi	r20, 0xFA	; 250
    2f50:	54 e4       	ldi	r21, 0x44	; 68
    2f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f56:	dc 01       	movw	r26, r24
    2f58:	cb 01       	movw	r24, r22
    2f5a:	8d 8b       	std	Y+21, r24	; 0x15
    2f5c:	9e 8b       	std	Y+22, r25	; 0x16
    2f5e:	af 8b       	std	Y+23, r26	; 0x17
    2f60:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f62:	6d 89       	ldd	r22, Y+21	; 0x15
    2f64:	7e 89       	ldd	r23, Y+22	; 0x16
    2f66:	8f 89       	ldd	r24, Y+23	; 0x17
    2f68:	98 8d       	ldd	r25, Y+24	; 0x18
    2f6a:	20 e0       	ldi	r18, 0x00	; 0
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	40 e8       	ldi	r20, 0x80	; 128
    2f70:	5f e3       	ldi	r21, 0x3F	; 63
    2f72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f76:	88 23       	and	r24, r24
    2f78:	2c f4       	brge	.+10     	; 0x2f84 <SelectMode+0xa84>
		__ticks = 1;
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	9c 8b       	std	Y+20, r25	; 0x14
    2f80:	8b 8b       	std	Y+19, r24	; 0x13
    2f82:	3f c0       	rjmp	.+126    	; 0x3002 <SelectMode+0xb02>
	else if (__tmp > 65535)
    2f84:	6d 89       	ldd	r22, Y+21	; 0x15
    2f86:	7e 89       	ldd	r23, Y+22	; 0x16
    2f88:	8f 89       	ldd	r24, Y+23	; 0x17
    2f8a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	3f ef       	ldi	r19, 0xFF	; 255
    2f90:	4f e7       	ldi	r20, 0x7F	; 127
    2f92:	57 e4       	ldi	r21, 0x47	; 71
    2f94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f98:	18 16       	cp	r1, r24
    2f9a:	4c f5       	brge	.+82     	; 0x2fee <SelectMode+0xaee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f9c:	69 8d       	ldd	r22, Y+25	; 0x19
    2f9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fa0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fa2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	40 e2       	ldi	r20, 0x20	; 32
    2faa:	51 e4       	ldi	r21, 0x41	; 65
    2fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	bc 01       	movw	r22, r24
    2fb6:	cd 01       	movw	r24, r26
    2fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	9c 8b       	std	Y+20, r25	; 0x14
    2fc2:	8b 8b       	std	Y+19, r24	; 0x13
    2fc4:	0f c0       	rjmp	.+30     	; 0x2fe4 <SelectMode+0xae4>
    2fc6:	88 ec       	ldi	r24, 0xC8	; 200
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	9a 8b       	std	Y+18, r25	; 0x12
    2fcc:	89 8b       	std	Y+17, r24	; 0x11
    2fce:	89 89       	ldd	r24, Y+17	; 0x11
    2fd0:	9a 89       	ldd	r25, Y+18	; 0x12
    2fd2:	01 97       	sbiw	r24, 0x01	; 1
    2fd4:	f1 f7       	brne	.-4      	; 0x2fd2 <SelectMode+0xad2>
    2fd6:	9a 8b       	std	Y+18, r25	; 0x12
    2fd8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fda:	8b 89       	ldd	r24, Y+19	; 0x13
    2fdc:	9c 89       	ldd	r25, Y+20	; 0x14
    2fde:	01 97       	sbiw	r24, 0x01	; 1
    2fe0:	9c 8b       	std	Y+20, r25	; 0x14
    2fe2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe4:	8b 89       	ldd	r24, Y+19	; 0x13
    2fe6:	9c 89       	ldd	r25, Y+20	; 0x14
    2fe8:	00 97       	sbiw	r24, 0x00	; 0
    2fea:	69 f7       	brne	.-38     	; 0x2fc6 <SelectMode+0xac6>
    2fec:	14 c0       	rjmp	.+40     	; 0x3016 <SelectMode+0xb16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fee:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ff4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffa:	dc 01       	movw	r26, r24
    2ffc:	cb 01       	movw	r24, r22
    2ffe:	9c 8b       	std	Y+20, r25	; 0x14
    3000:	8b 8b       	std	Y+19, r24	; 0x13
    3002:	8b 89       	ldd	r24, Y+19	; 0x13
    3004:	9c 89       	ldd	r25, Y+20	; 0x14
    3006:	98 8b       	std	Y+16, r25	; 0x10
    3008:	8f 87       	std	Y+15, r24	; 0x0f
    300a:	8f 85       	ldd	r24, Y+15	; 0x0f
    300c:	98 89       	ldd	r25, Y+16	; 0x10
    300e:	01 97       	sbiw	r24, 0x01	; 1
    3010:	f1 f7       	brne	.-4      	; 0x300e <SelectMode+0xb0e>
    3012:	98 8b       	std	Y+16, r25	; 0x10
    3014:	8f 87       	std	Y+15, r24	; 0x0f
    3016:	80 e0       	ldi	r24, 0x00	; 0
    3018:	90 e4       	ldi	r25, 0x40	; 64
    301a:	ac e9       	ldi	r26, 0x9C	; 156
    301c:	b5 e4       	ldi	r27, 0x45	; 69
    301e:	8b 87       	std	Y+11, r24	; 0x0b
    3020:	9c 87       	std	Y+12, r25	; 0x0c
    3022:	ad 87       	std	Y+13, r26	; 0x0d
    3024:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3026:	6b 85       	ldd	r22, Y+11	; 0x0b
    3028:	7c 85       	ldd	r23, Y+12	; 0x0c
    302a:	8d 85       	ldd	r24, Y+13	; 0x0d
    302c:	9e 85       	ldd	r25, Y+14	; 0x0e
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	4a ef       	ldi	r20, 0xFA	; 250
    3034:	54 e4       	ldi	r21, 0x44	; 68
    3036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	8f 83       	std	Y+7, r24	; 0x07
    3040:	98 87       	std	Y+8, r25	; 0x08
    3042:	a9 87       	std	Y+9, r26	; 0x09
    3044:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3046:	6f 81       	ldd	r22, Y+7	; 0x07
    3048:	78 85       	ldd	r23, Y+8	; 0x08
    304a:	89 85       	ldd	r24, Y+9	; 0x09
    304c:	9a 85       	ldd	r25, Y+10	; 0x0a
    304e:	20 e0       	ldi	r18, 0x00	; 0
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	40 e8       	ldi	r20, 0x80	; 128
    3054:	5f e3       	ldi	r21, 0x3F	; 63
    3056:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    305a:	88 23       	and	r24, r24
    305c:	2c f4       	brge	.+10     	; 0x3068 <SelectMode+0xb68>
		__ticks = 1;
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	9e 83       	std	Y+6, r25	; 0x06
    3064:	8d 83       	std	Y+5, r24	; 0x05
    3066:	3f c0       	rjmp	.+126    	; 0x30e6 <SelectMode+0xbe6>
	else if (__tmp > 65535)
    3068:	6f 81       	ldd	r22, Y+7	; 0x07
    306a:	78 85       	ldd	r23, Y+8	; 0x08
    306c:	89 85       	ldd	r24, Y+9	; 0x09
    306e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	3f ef       	ldi	r19, 0xFF	; 255
    3074:	4f e7       	ldi	r20, 0x7F	; 127
    3076:	57 e4       	ldi	r21, 0x47	; 71
    3078:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    307c:	18 16       	cp	r1, r24
    307e:	4c f5       	brge	.+82     	; 0x30d2 <SelectMode+0xbd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3080:	6b 85       	ldd	r22, Y+11	; 0x0b
    3082:	7c 85       	ldd	r23, Y+12	; 0x0c
    3084:	8d 85       	ldd	r24, Y+13	; 0x0d
    3086:	9e 85       	ldd	r25, Y+14	; 0x0e
    3088:	20 e0       	ldi	r18, 0x00	; 0
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	40 e2       	ldi	r20, 0x20	; 32
    308e:	51 e4       	ldi	r21, 0x41	; 65
    3090:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3094:	dc 01       	movw	r26, r24
    3096:	cb 01       	movw	r24, r22
    3098:	bc 01       	movw	r22, r24
    309a:	cd 01       	movw	r24, r26
    309c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a0:	dc 01       	movw	r26, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	9e 83       	std	Y+6, r25	; 0x06
    30a6:	8d 83       	std	Y+5, r24	; 0x05
    30a8:	0f c0       	rjmp	.+30     	; 0x30c8 <SelectMode+0xbc8>
    30aa:	88 ec       	ldi	r24, 0xC8	; 200
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	9c 83       	std	Y+4, r25	; 0x04
    30b0:	8b 83       	std	Y+3, r24	; 0x03
    30b2:	8b 81       	ldd	r24, Y+3	; 0x03
    30b4:	9c 81       	ldd	r25, Y+4	; 0x04
    30b6:	01 97       	sbiw	r24, 0x01	; 1
    30b8:	f1 f7       	brne	.-4      	; 0x30b6 <SelectMode+0xbb6>
    30ba:	9c 83       	std	Y+4, r25	; 0x04
    30bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30be:	8d 81       	ldd	r24, Y+5	; 0x05
    30c0:	9e 81       	ldd	r25, Y+6	; 0x06
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	9e 83       	std	Y+6, r25	; 0x06
    30c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c8:	8d 81       	ldd	r24, Y+5	; 0x05
    30ca:	9e 81       	ldd	r25, Y+6	; 0x06
    30cc:	00 97       	sbiw	r24, 0x00	; 0
    30ce:	69 f7       	brne	.-38     	; 0x30aa <SelectMode+0xbaa>
    30d0:	14 c0       	rjmp	.+40     	; 0x30fa <SelectMode+0xbfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d2:	6f 81       	ldd	r22, Y+7	; 0x07
    30d4:	78 85       	ldd	r23, Y+8	; 0x08
    30d6:	89 85       	ldd	r24, Y+9	; 0x09
    30d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    30da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30de:	dc 01       	movw	r26, r24
    30e0:	cb 01       	movw	r24, r22
    30e2:	9e 83       	std	Y+6, r25	; 0x06
    30e4:	8d 83       	std	Y+5, r24	; 0x05
    30e6:	8d 81       	ldd	r24, Y+5	; 0x05
    30e8:	9e 81       	ldd	r25, Y+6	; 0x06
    30ea:	9a 83       	std	Y+2, r25	; 0x02
    30ec:	89 83       	std	Y+1, r24	; 0x01
    30ee:	89 81       	ldd	r24, Y+1	; 0x01
    30f0:	9a 81       	ldd	r25, Y+2	; 0x02
    30f2:	01 97       	sbiw	r24, 0x01	; 1
    30f4:	f1 f7       	brne	.-4      	; 0x30f2 <SelectMode+0xbf2>
    30f6:	9a 83       	std	Y+2, r25	; 0x02
    30f8:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(5000);
				_delay_ms(5000);
				_delay_ms(5000);
				LED_voidTurnOFF(BLOCKED_LED_PORT, BLOCKED_LED_PIN);
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	62 e0       	ldi	r22, 0x02	; 2
    30fe:	0e 94 8d 0c 	call	0x191a	; 0x191a <LED_voidTurnOFF>
				Local_u8PassAttempts = 0;
    3102:	fe 01       	movw	r30, r28
    3104:	ef 58       	subi	r30, 0x8F	; 143
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	10 82       	st	Z, r1
    310a:	14 ca       	rjmp	.-3032   	; 0x2534 <SelectMode+0x34>
				goto Label1;
			}
			goto Label3;
		}
	}
}
    310c:	c8 58       	subi	r28, 0x88	; 136
    310e:	df 4f       	sbci	r29, 0xFF	; 255
    3110:	0f b6       	in	r0, 0x3f	; 63
    3112:	f8 94       	cli
    3114:	de bf       	out	0x3e, r29	; 62
    3116:	0f be       	out	0x3f, r0	; 63
    3118:	cd bf       	out	0x3d, r28	; 61
    311a:	cf 91       	pop	r28
    311c:	df 91       	pop	r29
    311e:	1f 91       	pop	r17
    3120:	0f 91       	pop	r16
    3122:	08 95       	ret

00003124 <CheckPassword>:

u8 CheckPassword(u8* EnteredPass, u8* StoredPass, u8 size)
{
    3124:	df 93       	push	r29
    3126:	cf 93       	push	r28
    3128:	cd b7       	in	r28, 0x3d	; 61
    312a:	de b7       	in	r29, 0x3e	; 62
    312c:	27 97       	sbiw	r28, 0x07	; 7
    312e:	0f b6       	in	r0, 0x3f	; 63
    3130:	f8 94       	cli
    3132:	de bf       	out	0x3e, r29	; 62
    3134:	0f be       	out	0x3f, r0	; 63
    3136:	cd bf       	out	0x3d, r28	; 61
    3138:	9b 83       	std	Y+3, r25	; 0x03
    313a:	8a 83       	std	Y+2, r24	; 0x02
    313c:	7d 83       	std	Y+5, r23	; 0x05
    313e:	6c 83       	std	Y+4, r22	; 0x04
    3140:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_u8Counter = 0;
    3142:	19 82       	std	Y+1, r1	; 0x01
    3144:	19 c0       	rjmp	.+50     	; 0x3178 <CheckPassword+0x54>
	while(Local_u8Counter < size)
	{
		//check that every entered digit is equal to the one stored in the EEPROM...
		if(*(EnteredPass + Local_u8Counter) != *(StoredPass + Local_u8Counter))
    3146:	89 81       	ldd	r24, Y+1	; 0x01
    3148:	28 2f       	mov	r18, r24
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	8a 81       	ldd	r24, Y+2	; 0x02
    314e:	9b 81       	ldd	r25, Y+3	; 0x03
    3150:	fc 01       	movw	r30, r24
    3152:	e2 0f       	add	r30, r18
    3154:	f3 1f       	adc	r31, r19
    3156:	40 81       	ld	r20, Z
    3158:	89 81       	ldd	r24, Y+1	; 0x01
    315a:	28 2f       	mov	r18, r24
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	8c 81       	ldd	r24, Y+4	; 0x04
    3160:	9d 81       	ldd	r25, Y+5	; 0x05
    3162:	fc 01       	movw	r30, r24
    3164:	e2 0f       	add	r30, r18
    3166:	f3 1f       	adc	r31, r19
    3168:	80 81       	ld	r24, Z
    316a:	48 17       	cp	r20, r24
    316c:	11 f0       	breq	.+4      	; 0x3172 <CheckPassword+0x4e>
		{
			//if any number of them is wrong return wrong pass
			return WRONG_PASS;
    316e:	1f 82       	std	Y+7, r1	; 0x07
    3170:	09 c0       	rjmp	.+18     	; 0x3184 <CheckPassword+0x60>
		}
		//increase counter to store next digit
		Local_u8Counter++;
    3172:	89 81       	ldd	r24, Y+1	; 0x01
    3174:	8f 5f       	subi	r24, 0xFF	; 255
    3176:	89 83       	std	Y+1, r24	; 0x01
}

u8 CheckPassword(u8* EnteredPass, u8* StoredPass, u8 size)
{
	u8 Local_u8Counter = 0;
	while(Local_u8Counter < size)
    3178:	99 81       	ldd	r25, Y+1	; 0x01
    317a:	8e 81       	ldd	r24, Y+6	; 0x06
    317c:	98 17       	cp	r25, r24
    317e:	18 f3       	brcs	.-58     	; 0x3146 <CheckPassword+0x22>
			return WRONG_PASS;
		}
		//increase counter to store next digit
		Local_u8Counter++;
	}
	return CORRECT_PASS;
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	8f 83       	std	Y+7, r24	; 0x07
    3184:	8f 81       	ldd	r24, Y+7	; 0x07
}
    3186:	27 96       	adiw	r28, 0x07	; 7
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	f8 94       	cli
    318c:	de bf       	out	0x3e, r29	; 62
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	cd bf       	out	0x3d, r28	; 61
    3192:	cf 91       	pop	r28
    3194:	df 91       	pop	r29
    3196:	08 95       	ret

00003198 <ADMIN_Menu>:

void ADMIN_Menu(void)
{
    3198:	df 93       	push	r29
    319a:	cf 93       	push	r28
    319c:	cd b7       	in	r28, 0x3d	; 61
    319e:	de b7       	in	r29, 0x3e	; 62
    31a0:	ed 97       	sbiw	r28, 0x3d	; 61
    31a2:	0f b6       	in	r0, 0x3f	; 63
    31a4:	f8 94       	cli
    31a6:	de bf       	out	0x3e, r29	; 62
    31a8:	0f be       	out	0x3f, r0	; 63
    31aa:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8KeyPressed = KPD_NOT_PRESSED, Local_u8DoorStatue = 0,Local_u8GarageStatue = 0, Local_u8LEDStatue = 0, Local_u8AirCondStatue = 0;
    31ac:	8f ef       	ldi	r24, 0xFF	; 255
    31ae:	8d af       	std	Y+61, r24	; 0x3d
    31b0:	1c ae       	std	Y+60, r1	; 0x3c
    31b2:	1b ae       	std	Y+59, r1	; 0x3b
    31b4:	1a ae       	std	Y+58, r1	; 0x3a
    31b6:	19 ae       	std	Y+57, r1	; 0x39
	//turn on ADMIN led
	LED_voidTurnON(ADMIN_LED_PORT, ADMIN_LED_PIN);
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	60 e0       	ldi	r22, 0x00	; 0
    31bc:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <LED_voidTurnON>
	LCD_CLEAR_ALL_SCREEN();
    31c0:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_CLEAR_ALL_SCREEN>
	LCD_GOTO_XY(0,0);
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	60 e0       	ldi	r22, 0x00	; 0
    31c8:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
	SEND_A_STRING("Welcome ADMIN");
    31cc:	8e ee       	ldi	r24, 0xEE	; 238
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
	label4: LCD_CLEAR_ALL_SCREEN();
    31d4:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_CLEAR_ALL_SCREEN>
	SEND_A_STRING("1:Room1 2:Room2");
    31d8:	8c ef       	ldi	r24, 0xFC	; 252
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
	LCD_GOTO_XY(1,0);
    31e0:	81 e0       	ldi	r24, 0x01	; 1
    31e2:	60 e0       	ldi	r22, 0x00	; 0
    31e4:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
	SEND_A_STRING("3:Room3 4:more");
    31e8:	8c e0       	ldi	r24, 0x0C	; 12
    31ea:	91 e0       	ldi	r25, 0x01	; 1
    31ec:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
	Local_u8KeyPressed = KPD_NOT_PRESSED;
    31f0:	8f ef       	ldi	r24, 0xFF	; 255
    31f2:	8d af       	std	Y+61, r24	; 0x3d
    31f4:	03 c0       	rjmp	.+6      	; 0x31fc <ADMIN_Menu+0x64>
	while(Local_u8KeyPressed == KPD_NOT_PRESSED)
	{
		Local_u8KeyPressed = KPD_GETKEY();
    31f6:	0e 94 67 10 	call	0x20ce	; 0x20ce <KPD_GETKEY>
    31fa:	8d af       	std	Y+61, r24	; 0x3d
	label4: LCD_CLEAR_ALL_SCREEN();
	SEND_A_STRING("1:Room1 2:Room2");
	LCD_GOTO_XY(1,0);
	SEND_A_STRING("3:Room3 4:more");
	Local_u8KeyPressed = KPD_NOT_PRESSED;
	while(Local_u8KeyPressed == KPD_NOT_PRESSED)
    31fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    31fe:	8f 3f       	cpi	r24, 0xFF	; 255
    3200:	d1 f3       	breq	.-12     	; 0x31f6 <ADMIN_Menu+0x5e>
	{
		Local_u8KeyPressed = KPD_GETKEY();
	}
	LCD_CLEAR_ALL_SCREEN();
    3202:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_CLEAR_ALL_SCREEN>
	LCD_GOTO_XY(0,0);
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	60 e0       	ldi	r22, 0x00	; 0
    320a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
	if(Local_u8KeyPressed == CHOOSE_ROOM1)
    320e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3210:	81 33       	cpi	r24, 0x31	; 49
    3212:	09 f0       	breq	.+2      	; 0x3216 <ADMIN_Menu+0x7e>
    3214:	ad c0       	rjmp	.+346    	; 0x3370 <ADMIN_Menu+0x1d8>
	{
		SPI_ui8TransmitRecive(ROOM1_STATUS);
    3216:	81 e1       	ldi	r24, 0x11	; 17
    3218:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    321c:	80 e0       	ldi	r24, 0x00	; 0
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	a8 ec       	ldi	r26, 0xC8	; 200
    3222:	b2 e4       	ldi	r27, 0x42	; 66
    3224:	8d ab       	std	Y+53, r24	; 0x35
    3226:	9e ab       	std	Y+54, r25	; 0x36
    3228:	af ab       	std	Y+55, r26	; 0x37
    322a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    322c:	6d a9       	ldd	r22, Y+53	; 0x35
    322e:	7e a9       	ldd	r23, Y+54	; 0x36
    3230:	8f a9       	ldd	r24, Y+55	; 0x37
    3232:	98 ad       	ldd	r25, Y+56	; 0x38
    3234:	20 e0       	ldi	r18, 0x00	; 0
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	4a ef       	ldi	r20, 0xFA	; 250
    323a:	54 e4       	ldi	r21, 0x44	; 68
    323c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	89 ab       	std	Y+49, r24	; 0x31
    3246:	9a ab       	std	Y+50, r25	; 0x32
    3248:	ab ab       	std	Y+51, r26	; 0x33
    324a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    324c:	69 a9       	ldd	r22, Y+49	; 0x31
    324e:	7a a9       	ldd	r23, Y+50	; 0x32
    3250:	8b a9       	ldd	r24, Y+51	; 0x33
    3252:	9c a9       	ldd	r25, Y+52	; 0x34
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	40 e8       	ldi	r20, 0x80	; 128
    325a:	5f e3       	ldi	r21, 0x3F	; 63
    325c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3260:	88 23       	and	r24, r24
    3262:	2c f4       	brge	.+10     	; 0x326e <ADMIN_Menu+0xd6>
		__ticks = 1;
    3264:	81 e0       	ldi	r24, 0x01	; 1
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	98 ab       	std	Y+48, r25	; 0x30
    326a:	8f a7       	std	Y+47, r24	; 0x2f
    326c:	3f c0       	rjmp	.+126    	; 0x32ec <ADMIN_Menu+0x154>
	else if (__tmp > 65535)
    326e:	69 a9       	ldd	r22, Y+49	; 0x31
    3270:	7a a9       	ldd	r23, Y+50	; 0x32
    3272:	8b a9       	ldd	r24, Y+51	; 0x33
    3274:	9c a9       	ldd	r25, Y+52	; 0x34
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	3f ef       	ldi	r19, 0xFF	; 255
    327a:	4f e7       	ldi	r20, 0x7F	; 127
    327c:	57 e4       	ldi	r21, 0x47	; 71
    327e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3282:	18 16       	cp	r1, r24
    3284:	4c f5       	brge	.+82     	; 0x32d8 <ADMIN_Menu+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3286:	6d a9       	ldd	r22, Y+53	; 0x35
    3288:	7e a9       	ldd	r23, Y+54	; 0x36
    328a:	8f a9       	ldd	r24, Y+55	; 0x37
    328c:	98 ad       	ldd	r25, Y+56	; 0x38
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	40 e2       	ldi	r20, 0x20	; 32
    3294:	51 e4       	ldi	r21, 0x41	; 65
    3296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    329a:	dc 01       	movw	r26, r24
    329c:	cb 01       	movw	r24, r22
    329e:	bc 01       	movw	r22, r24
    32a0:	cd 01       	movw	r24, r26
    32a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a6:	dc 01       	movw	r26, r24
    32a8:	cb 01       	movw	r24, r22
    32aa:	98 ab       	std	Y+48, r25	; 0x30
    32ac:	8f a7       	std	Y+47, r24	; 0x2f
    32ae:	0f c0       	rjmp	.+30     	; 0x32ce <ADMIN_Menu+0x136>
    32b0:	88 ec       	ldi	r24, 0xC8	; 200
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	9e a7       	std	Y+46, r25	; 0x2e
    32b6:	8d a7       	std	Y+45, r24	; 0x2d
    32b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    32ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    32bc:	01 97       	sbiw	r24, 0x01	; 1
    32be:	f1 f7       	brne	.-4      	; 0x32bc <ADMIN_Menu+0x124>
    32c0:	9e a7       	std	Y+46, r25	; 0x2e
    32c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    32c6:	98 a9       	ldd	r25, Y+48	; 0x30
    32c8:	01 97       	sbiw	r24, 0x01	; 1
    32ca:	98 ab       	std	Y+48, r25	; 0x30
    32cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    32d0:	98 a9       	ldd	r25, Y+48	; 0x30
    32d2:	00 97       	sbiw	r24, 0x00	; 0
    32d4:	69 f7       	brne	.-38     	; 0x32b0 <ADMIN_Menu+0x118>
    32d6:	14 c0       	rjmp	.+40     	; 0x3300 <ADMIN_Menu+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32d8:	69 a9       	ldd	r22, Y+49	; 0x31
    32da:	7a a9       	ldd	r23, Y+50	; 0x32
    32dc:	8b a9       	ldd	r24, Y+51	; 0x33
    32de:	9c a9       	ldd	r25, Y+52	; 0x34
    32e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	98 ab       	std	Y+48, r25	; 0x30
    32ea:	8f a7       	std	Y+47, r24	; 0x2f
    32ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    32ee:	98 a9       	ldd	r25, Y+48	; 0x30
    32f0:	9c a7       	std	Y+44, r25	; 0x2c
    32f2:	8b a7       	std	Y+43, r24	; 0x2b
    32f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    32f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    32f8:	01 97       	sbiw	r24, 0x01	; 1
    32fa:	f1 f7       	brne	.-4      	; 0x32f8 <ADMIN_Menu+0x160>
    32fc:	9c a7       	std	Y+44, r25	; 0x2c
    32fe:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(100);
		Local_u8LEDStatue = SPI_ui8TransmitRecive(DEMAND_RESPONSE);
    3300:	8f ef       	ldi	r24, 0xFF	; 255
    3302:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    3306:	8a af       	std	Y+58, r24	; 0x3a
		if(Local_u8LEDStatue == ON_STATUS)
    3308:	8a ad       	ldd	r24, Y+58	; 0x3a
    330a:	81 30       	cpi	r24, 0x01	; 1
    330c:	29 f4       	brne	.+10     	; 0x3318 <ADMIN_Menu+0x180>
		{
			SEND_A_STRING("LED statue: ON");
    330e:	8b e1       	ldi	r24, 0x1B	; 27
    3310:	91 e0       	ldi	r25, 0x01	; 1
    3312:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
    3316:	0c c0       	rjmp	.+24     	; 0x3330 <ADMIN_Menu+0x198>
		}
		else if(Local_u8LEDStatue == OFF_STATUS)
    3318:	8a ad       	ldd	r24, Y+58	; 0x3a
    331a:	88 23       	and	r24, r24
    331c:	29 f4       	brne	.+10     	; 0x3328 <ADMIN_Menu+0x190>
		{
			SEND_A_STRING("LED statue: OFF");
    331e:	8a e2       	ldi	r24, 0x2A	; 42
    3320:	91 e0       	ldi	r25, 0x01	; 1
    3322:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
    3326:	04 c0       	rjmp	.+8      	; 0x3330 <ADMIN_Menu+0x198>
		}
		else
		{
			SEND_A_STRING("Error");
    3328:	8a e3       	ldi	r24, 0x3A	; 58
    332a:	91 e0       	ldi	r25, 0x01	; 1
    332c:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
		}
		LCD_GOTO_XY(1,0);
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	60 e0       	ldi	r22, 0x00	; 0
    3334:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
		SEND_A_STRING("1:ON 2:OFF");
    3338:	80 e4       	ldi	r24, 0x40	; 64
    333a:	91 e0       	ldi	r25, 0x01	; 1
    333c:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
		Local_u8KeyPressed = KPD_NOT_PRESSED;
    3340:	8f ef       	ldi	r24, 0xFF	; 255
    3342:	8d af       	std	Y+61, r24	; 0x3d
    3344:	03 c0       	rjmp	.+6      	; 0x334c <ADMIN_Menu+0x1b4>
		while(Local_u8KeyPressed == KPD_NOT_PRESSED)
		{
			Local_u8KeyPressed = KPD_GETKEY();
    3346:	0e 94 67 10 	call	0x20ce	; 0x20ce <KPD_GETKEY>
    334a:	8d af       	std	Y+61, r24	; 0x3d
			SEND_A_STRING("Error");
		}
		LCD_GOTO_XY(1,0);
		SEND_A_STRING("1:ON 2:OFF");
		Local_u8KeyPressed = KPD_NOT_PRESSED;
		while(Local_u8KeyPressed == KPD_NOT_PRESSED)
    334c:	8d ad       	ldd	r24, Y+61	; 0x3d
    334e:	8f 3f       	cpi	r24, 0xFF	; 255
    3350:	d1 f3       	breq	.-12     	; 0x3346 <ADMIN_Menu+0x1ae>
		{
			Local_u8KeyPressed = KPD_GETKEY();
		}
		if(Local_u8KeyPressed == TURN_ON_LED)
    3352:	8d ad       	ldd	r24, Y+61	; 0x3d
    3354:	81 33       	cpi	r24, 0x31	; 49
    3356:	21 f4       	brne	.+8      	; 0x3360 <ADMIN_Menu+0x1c8>
		{
			SPI_ui8TransmitRecive(ROOM1_TURN_ON);
    3358:	81 e2       	ldi	r24, 0x21	; 33
    335a:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    335e:	3a cf       	rjmp	.-396    	; 0x31d4 <ADMIN_Menu+0x3c>
		}
		else if(Local_u8KeyPressed == TURN_OFF_LED)
    3360:	8d ad       	ldd	r24, Y+61	; 0x3d
    3362:	82 33       	cpi	r24, 0x32	; 50
    3364:	09 f0       	breq	.+2      	; 0x3368 <ADMIN_Menu+0x1d0>
    3366:	36 cf       	rjmp	.-404    	; 0x31d4 <ADMIN_Menu+0x3c>
		{
			SPI_ui8TransmitRecive(ROOM1_TURN_OFF);
    3368:	81 e3       	ldi	r24, 0x31	; 49
    336a:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    336e:	32 cf       	rjmp	.-412    	; 0x31d4 <ADMIN_Menu+0x3c>
		}
		goto label4;
	}
	else if(Local_u8KeyPressed == CHOOSE_ROOM2)
    3370:	8d ad       	ldd	r24, Y+61	; 0x3d
    3372:	82 33       	cpi	r24, 0x32	; 50
    3374:	09 f0       	breq	.+2      	; 0x3378 <ADMIN_Menu+0x1e0>
    3376:	a8 c0       	rjmp	.+336    	; 0x34c8 <ADMIN_Menu+0x330>
	{
		SPI_ui8TransmitRecive(ROOM2_STATUS);
    3378:	82 e1       	ldi	r24, 0x12	; 18
    337a:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    337e:	80 e0       	ldi	r24, 0x00	; 0
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	a8 ec       	ldi	r26, 0xC8	; 200
    3384:	b2 e4       	ldi	r27, 0x42	; 66
    3386:	8f a3       	std	Y+39, r24	; 0x27
    3388:	98 a7       	std	Y+40, r25	; 0x28
    338a:	a9 a7       	std	Y+41, r26	; 0x29
    338c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    338e:	6f a1       	ldd	r22, Y+39	; 0x27
    3390:	78 a5       	ldd	r23, Y+40	; 0x28
    3392:	89 a5       	ldd	r24, Y+41	; 0x29
    3394:	9a a5       	ldd	r25, Y+42	; 0x2a
    3396:	20 e0       	ldi	r18, 0x00	; 0
    3398:	30 e0       	ldi	r19, 0x00	; 0
    339a:	4a ef       	ldi	r20, 0xFA	; 250
    339c:	54 e4       	ldi	r21, 0x44	; 68
    339e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33a2:	dc 01       	movw	r26, r24
    33a4:	cb 01       	movw	r24, r22
    33a6:	8b a3       	std	Y+35, r24	; 0x23
    33a8:	9c a3       	std	Y+36, r25	; 0x24
    33aa:	ad a3       	std	Y+37, r26	; 0x25
    33ac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    33ae:	6b a1       	ldd	r22, Y+35	; 0x23
    33b0:	7c a1       	ldd	r23, Y+36	; 0x24
    33b2:	8d a1       	ldd	r24, Y+37	; 0x25
    33b4:	9e a1       	ldd	r25, Y+38	; 0x26
    33b6:	20 e0       	ldi	r18, 0x00	; 0
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	40 e8       	ldi	r20, 0x80	; 128
    33bc:	5f e3       	ldi	r21, 0x3F	; 63
    33be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33c2:	88 23       	and	r24, r24
    33c4:	2c f4       	brge	.+10     	; 0x33d0 <ADMIN_Menu+0x238>
		__ticks = 1;
    33c6:	81 e0       	ldi	r24, 0x01	; 1
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	9a a3       	std	Y+34, r25	; 0x22
    33cc:	89 a3       	std	Y+33, r24	; 0x21
    33ce:	3f c0       	rjmp	.+126    	; 0x344e <ADMIN_Menu+0x2b6>
	else if (__tmp > 65535)
    33d0:	6b a1       	ldd	r22, Y+35	; 0x23
    33d2:	7c a1       	ldd	r23, Y+36	; 0x24
    33d4:	8d a1       	ldd	r24, Y+37	; 0x25
    33d6:	9e a1       	ldd	r25, Y+38	; 0x26
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	3f ef       	ldi	r19, 0xFF	; 255
    33dc:	4f e7       	ldi	r20, 0x7F	; 127
    33de:	57 e4       	ldi	r21, 0x47	; 71
    33e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33e4:	18 16       	cp	r1, r24
    33e6:	4c f5       	brge	.+82     	; 0x343a <ADMIN_Menu+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e8:	6f a1       	ldd	r22, Y+39	; 0x27
    33ea:	78 a5       	ldd	r23, Y+40	; 0x28
    33ec:	89 a5       	ldd	r24, Y+41	; 0x29
    33ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    33f0:	20 e0       	ldi	r18, 0x00	; 0
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	40 e2       	ldi	r20, 0x20	; 32
    33f6:	51 e4       	ldi	r21, 0x41	; 65
    33f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fc:	dc 01       	movw	r26, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	bc 01       	movw	r22, r24
    3402:	cd 01       	movw	r24, r26
    3404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3408:	dc 01       	movw	r26, r24
    340a:	cb 01       	movw	r24, r22
    340c:	9a a3       	std	Y+34, r25	; 0x22
    340e:	89 a3       	std	Y+33, r24	; 0x21
    3410:	0f c0       	rjmp	.+30     	; 0x3430 <ADMIN_Menu+0x298>
    3412:	88 ec       	ldi	r24, 0xC8	; 200
    3414:	90 e0       	ldi	r25, 0x00	; 0
    3416:	98 a3       	std	Y+32, r25	; 0x20
    3418:	8f 8f       	std	Y+31, r24	; 0x1f
    341a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    341c:	98 a1       	ldd	r25, Y+32	; 0x20
    341e:	01 97       	sbiw	r24, 0x01	; 1
    3420:	f1 f7       	brne	.-4      	; 0x341e <ADMIN_Menu+0x286>
    3422:	98 a3       	std	Y+32, r25	; 0x20
    3424:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3426:	89 a1       	ldd	r24, Y+33	; 0x21
    3428:	9a a1       	ldd	r25, Y+34	; 0x22
    342a:	01 97       	sbiw	r24, 0x01	; 1
    342c:	9a a3       	std	Y+34, r25	; 0x22
    342e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3430:	89 a1       	ldd	r24, Y+33	; 0x21
    3432:	9a a1       	ldd	r25, Y+34	; 0x22
    3434:	00 97       	sbiw	r24, 0x00	; 0
    3436:	69 f7       	brne	.-38     	; 0x3412 <ADMIN_Menu+0x27a>
    3438:	14 c0       	rjmp	.+40     	; 0x3462 <ADMIN_Menu+0x2ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    343a:	6b a1       	ldd	r22, Y+35	; 0x23
    343c:	7c a1       	ldd	r23, Y+36	; 0x24
    343e:	8d a1       	ldd	r24, Y+37	; 0x25
    3440:	9e a1       	ldd	r25, Y+38	; 0x26
    3442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3446:	dc 01       	movw	r26, r24
    3448:	cb 01       	movw	r24, r22
    344a:	9a a3       	std	Y+34, r25	; 0x22
    344c:	89 a3       	std	Y+33, r24	; 0x21
    344e:	89 a1       	ldd	r24, Y+33	; 0x21
    3450:	9a a1       	ldd	r25, Y+34	; 0x22
    3452:	9e 8f       	std	Y+30, r25	; 0x1e
    3454:	8d 8f       	std	Y+29, r24	; 0x1d
    3456:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3458:	9e 8d       	ldd	r25, Y+30	; 0x1e
    345a:	01 97       	sbiw	r24, 0x01	; 1
    345c:	f1 f7       	brne	.-4      	; 0x345a <ADMIN_Menu+0x2c2>
    345e:	9e 8f       	std	Y+30, r25	; 0x1e
    3460:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		Local_u8LEDStatue = SPI_ui8TransmitRecive(DEMAND_RESPONSE);
    3462:	8f ef       	ldi	r24, 0xFF	; 255
    3464:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    3468:	8a af       	std	Y+58, r24	; 0x3a
		if(Local_u8LEDStatue == ON_STATUS)
    346a:	8a ad       	ldd	r24, Y+58	; 0x3a
    346c:	81 30       	cpi	r24, 0x01	; 1
    346e:	29 f4       	brne	.+10     	; 0x347a <ADMIN_Menu+0x2e2>
		{
			SEND_A_STRING("LED statue: ON");
    3470:	8b e1       	ldi	r24, 0x1B	; 27
    3472:	91 e0       	ldi	r25, 0x01	; 1
    3474:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
    3478:	07 c0       	rjmp	.+14     	; 0x3488 <ADMIN_Menu+0x2f0>
		}
		else if(Local_u8LEDStatue == OFF_STATUS)
    347a:	8a ad       	ldd	r24, Y+58	; 0x3a
    347c:	88 23       	and	r24, r24
    347e:	21 f4       	brne	.+8      	; 0x3488 <ADMIN_Menu+0x2f0>
		{
			SEND_A_STRING("LED statue: OFF");
    3480:	8a e2       	ldi	r24, 0x2A	; 42
    3482:	91 e0       	ldi	r25, 0x01	; 1
    3484:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
		}
		LCD_GOTO_XY(1,0);
    3488:	81 e0       	ldi	r24, 0x01	; 1
    348a:	60 e0       	ldi	r22, 0x00	; 0
    348c:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
		SEND_A_STRING("1:ON 2:OFF");
    3490:	80 e4       	ldi	r24, 0x40	; 64
    3492:	91 e0       	ldi	r25, 0x01	; 1
    3494:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
		Local_u8KeyPressed = KPD_NOT_PRESSED;
    3498:	8f ef       	ldi	r24, 0xFF	; 255
    349a:	8d af       	std	Y+61, r24	; 0x3d
    349c:	03 c0       	rjmp	.+6      	; 0x34a4 <ADMIN_Menu+0x30c>
		while(Local_u8KeyPressed == KPD_NOT_PRESSED)
		{
			Local_u8KeyPressed = KPD_GETKEY();
    349e:	0e 94 67 10 	call	0x20ce	; 0x20ce <KPD_GETKEY>
    34a2:	8d af       	std	Y+61, r24	; 0x3d
			SEND_A_STRING("LED statue: OFF");
		}
		LCD_GOTO_XY(1,0);
		SEND_A_STRING("1:ON 2:OFF");
		Local_u8KeyPressed = KPD_NOT_PRESSED;
		while(Local_u8KeyPressed == KPD_NOT_PRESSED)
    34a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    34a6:	8f 3f       	cpi	r24, 0xFF	; 255
    34a8:	d1 f3       	breq	.-12     	; 0x349e <ADMIN_Menu+0x306>
		{
			Local_u8KeyPressed = KPD_GETKEY();
		}
		if(Local_u8KeyPressed == TURN_ON_LED)
    34aa:	8d ad       	ldd	r24, Y+61	; 0x3d
    34ac:	81 33       	cpi	r24, 0x31	; 49
    34ae:	21 f4       	brne	.+8      	; 0x34b8 <ADMIN_Menu+0x320>
		{
			SPI_ui8TransmitRecive(ROOM2_TURN_ON);
    34b0:	82 e2       	ldi	r24, 0x22	; 34
    34b2:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    34b6:	8e ce       	rjmp	.-740    	; 0x31d4 <ADMIN_Menu+0x3c>
		}
		else if(Local_u8KeyPressed == TURN_OFF_LED)
    34b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    34ba:	82 33       	cpi	r24, 0x32	; 50
    34bc:	09 f0       	breq	.+2      	; 0x34c0 <ADMIN_Menu+0x328>
    34be:	8a ce       	rjmp	.-748    	; 0x31d4 <ADMIN_Menu+0x3c>
		{
			SPI_ui8TransmitRecive(ROOM2_TURN_OFF);
    34c0:	82 e3       	ldi	r24, 0x32	; 50
    34c2:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    34c6:	86 ce       	rjmp	.-756    	; 0x31d4 <ADMIN_Menu+0x3c>
		}
		goto label4;

	}
	else if(Local_u8KeyPressed == CHOOSE_ROOM3)
    34c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    34ca:	83 33       	cpi	r24, 0x33	; 51
    34cc:	09 f0       	breq	.+2      	; 0x34d0 <ADMIN_Menu+0x338>
    34ce:	a8 c0       	rjmp	.+336    	; 0x3620 <ADMIN_Menu+0x488>
	{
		SPI_ui8TransmitRecive(ROOM3_STATUS);
    34d0:	83 e1       	ldi	r24, 0x13	; 19
    34d2:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    34d6:	80 e0       	ldi	r24, 0x00	; 0
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	a8 ec       	ldi	r26, 0xC8	; 200
    34dc:	b2 e4       	ldi	r27, 0x42	; 66
    34de:	89 8f       	std	Y+25, r24	; 0x19
    34e0:	9a 8f       	std	Y+26, r25	; 0x1a
    34e2:	ab 8f       	std	Y+27, r26	; 0x1b
    34e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34e6:	69 8d       	ldd	r22, Y+25	; 0x19
    34e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	4a ef       	ldi	r20, 0xFA	; 250
    34f4:	54 e4       	ldi	r21, 0x44	; 68
    34f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fa:	dc 01       	movw	r26, r24
    34fc:	cb 01       	movw	r24, r22
    34fe:	8d 8b       	std	Y+21, r24	; 0x15
    3500:	9e 8b       	std	Y+22, r25	; 0x16
    3502:	af 8b       	std	Y+23, r26	; 0x17
    3504:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3506:	6d 89       	ldd	r22, Y+21	; 0x15
    3508:	7e 89       	ldd	r23, Y+22	; 0x16
    350a:	8f 89       	ldd	r24, Y+23	; 0x17
    350c:	98 8d       	ldd	r25, Y+24	; 0x18
    350e:	20 e0       	ldi	r18, 0x00	; 0
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	40 e8       	ldi	r20, 0x80	; 128
    3514:	5f e3       	ldi	r21, 0x3F	; 63
    3516:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    351a:	88 23       	and	r24, r24
    351c:	2c f4       	brge	.+10     	; 0x3528 <ADMIN_Menu+0x390>
		__ticks = 1;
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	9c 8b       	std	Y+20, r25	; 0x14
    3524:	8b 8b       	std	Y+19, r24	; 0x13
    3526:	3f c0       	rjmp	.+126    	; 0x35a6 <ADMIN_Menu+0x40e>
	else if (__tmp > 65535)
    3528:	6d 89       	ldd	r22, Y+21	; 0x15
    352a:	7e 89       	ldd	r23, Y+22	; 0x16
    352c:	8f 89       	ldd	r24, Y+23	; 0x17
    352e:	98 8d       	ldd	r25, Y+24	; 0x18
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	3f ef       	ldi	r19, 0xFF	; 255
    3534:	4f e7       	ldi	r20, 0x7F	; 127
    3536:	57 e4       	ldi	r21, 0x47	; 71
    3538:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    353c:	18 16       	cp	r1, r24
    353e:	4c f5       	brge	.+82     	; 0x3592 <ADMIN_Menu+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3540:	69 8d       	ldd	r22, Y+25	; 0x19
    3542:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3544:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3546:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	40 e2       	ldi	r20, 0x20	; 32
    354e:	51 e4       	ldi	r21, 0x41	; 65
    3550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3554:	dc 01       	movw	r26, r24
    3556:	cb 01       	movw	r24, r22
    3558:	bc 01       	movw	r22, r24
    355a:	cd 01       	movw	r24, r26
    355c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3560:	dc 01       	movw	r26, r24
    3562:	cb 01       	movw	r24, r22
    3564:	9c 8b       	std	Y+20, r25	; 0x14
    3566:	8b 8b       	std	Y+19, r24	; 0x13
    3568:	0f c0       	rjmp	.+30     	; 0x3588 <ADMIN_Menu+0x3f0>
    356a:	88 ec       	ldi	r24, 0xC8	; 200
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	9a 8b       	std	Y+18, r25	; 0x12
    3570:	89 8b       	std	Y+17, r24	; 0x11
    3572:	89 89       	ldd	r24, Y+17	; 0x11
    3574:	9a 89       	ldd	r25, Y+18	; 0x12
    3576:	01 97       	sbiw	r24, 0x01	; 1
    3578:	f1 f7       	brne	.-4      	; 0x3576 <ADMIN_Menu+0x3de>
    357a:	9a 8b       	std	Y+18, r25	; 0x12
    357c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    357e:	8b 89       	ldd	r24, Y+19	; 0x13
    3580:	9c 89       	ldd	r25, Y+20	; 0x14
    3582:	01 97       	sbiw	r24, 0x01	; 1
    3584:	9c 8b       	std	Y+20, r25	; 0x14
    3586:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3588:	8b 89       	ldd	r24, Y+19	; 0x13
    358a:	9c 89       	ldd	r25, Y+20	; 0x14
    358c:	00 97       	sbiw	r24, 0x00	; 0
    358e:	69 f7       	brne	.-38     	; 0x356a <ADMIN_Menu+0x3d2>
    3590:	14 c0       	rjmp	.+40     	; 0x35ba <ADMIN_Menu+0x422>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3592:	6d 89       	ldd	r22, Y+21	; 0x15
    3594:	7e 89       	ldd	r23, Y+22	; 0x16
    3596:	8f 89       	ldd	r24, Y+23	; 0x17
    3598:	98 8d       	ldd	r25, Y+24	; 0x18
    359a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    359e:	dc 01       	movw	r26, r24
    35a0:	cb 01       	movw	r24, r22
    35a2:	9c 8b       	std	Y+20, r25	; 0x14
    35a4:	8b 8b       	std	Y+19, r24	; 0x13
    35a6:	8b 89       	ldd	r24, Y+19	; 0x13
    35a8:	9c 89       	ldd	r25, Y+20	; 0x14
    35aa:	98 8b       	std	Y+16, r25	; 0x10
    35ac:	8f 87       	std	Y+15, r24	; 0x0f
    35ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    35b0:	98 89       	ldd	r25, Y+16	; 0x10
    35b2:	01 97       	sbiw	r24, 0x01	; 1
    35b4:	f1 f7       	brne	.-4      	; 0x35b2 <ADMIN_Menu+0x41a>
    35b6:	98 8b       	std	Y+16, r25	; 0x10
    35b8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		Local_u8LEDStatue = SPI_ui8TransmitRecive(DEMAND_RESPONSE);
    35ba:	8f ef       	ldi	r24, 0xFF	; 255
    35bc:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    35c0:	8a af       	std	Y+58, r24	; 0x3a
		if(Local_u8LEDStatue == ON_STATUS)
    35c2:	8a ad       	ldd	r24, Y+58	; 0x3a
    35c4:	81 30       	cpi	r24, 0x01	; 1
    35c6:	29 f4       	brne	.+10     	; 0x35d2 <ADMIN_Menu+0x43a>
		{
			SEND_A_STRING("LED statue: ON");
    35c8:	8b e1       	ldi	r24, 0x1B	; 27
    35ca:	91 e0       	ldi	r25, 0x01	; 1
    35cc:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
    35d0:	07 c0       	rjmp	.+14     	; 0x35e0 <ADMIN_Menu+0x448>
		}
		else if(Local_u8LEDStatue == OFF_STATUS)
    35d2:	8a ad       	ldd	r24, Y+58	; 0x3a
    35d4:	88 23       	and	r24, r24
    35d6:	21 f4       	brne	.+8      	; 0x35e0 <ADMIN_Menu+0x448>
		{
			SEND_A_STRING("LED statue: OFF");
    35d8:	8a e2       	ldi	r24, 0x2A	; 42
    35da:	91 e0       	ldi	r25, 0x01	; 1
    35dc:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
		}
		LCD_GOTO_XY(1,0);
    35e0:	81 e0       	ldi	r24, 0x01	; 1
    35e2:	60 e0       	ldi	r22, 0x00	; 0
    35e4:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
		SEND_A_STRING("1:ON 2:OFF");
    35e8:	80 e4       	ldi	r24, 0x40	; 64
    35ea:	91 e0       	ldi	r25, 0x01	; 1
    35ec:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
		Local_u8KeyPressed = KPD_NOT_PRESSED;
    35f0:	8f ef       	ldi	r24, 0xFF	; 255
    35f2:	8d af       	std	Y+61, r24	; 0x3d
    35f4:	03 c0       	rjmp	.+6      	; 0x35fc <ADMIN_Menu+0x464>
		while(Local_u8KeyPressed == KPD_NOT_PRESSED)
		{
			Local_u8KeyPressed = KPD_GETKEY();
    35f6:	0e 94 67 10 	call	0x20ce	; 0x20ce <KPD_GETKEY>
    35fa:	8d af       	std	Y+61, r24	; 0x3d
			SEND_A_STRING("LED statue: OFF");
		}
		LCD_GOTO_XY(1,0);
		SEND_A_STRING("1:ON 2:OFF");
		Local_u8KeyPressed = KPD_NOT_PRESSED;
		while(Local_u8KeyPressed == KPD_NOT_PRESSED)
    35fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    35fe:	8f 3f       	cpi	r24, 0xFF	; 255
    3600:	d1 f3       	breq	.-12     	; 0x35f6 <ADMIN_Menu+0x45e>
		{
			Local_u8KeyPressed = KPD_GETKEY();
		}
		if(Local_u8KeyPressed == TURN_ON_LED)
    3602:	8d ad       	ldd	r24, Y+61	; 0x3d
    3604:	81 33       	cpi	r24, 0x31	; 49
    3606:	21 f4       	brne	.+8      	; 0x3610 <ADMIN_Menu+0x478>
		{
			SPI_ui8TransmitRecive(ROOM3_TURN_ON);
    3608:	83 e2       	ldi	r24, 0x23	; 35
    360a:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    360e:	e2 cd       	rjmp	.-1084   	; 0x31d4 <ADMIN_Menu+0x3c>
		}
		else if(Local_u8KeyPressed == TURN_OFF_LED)
    3610:	8d ad       	ldd	r24, Y+61	; 0x3d
    3612:	82 33       	cpi	r24, 0x32	; 50
    3614:	09 f0       	breq	.+2      	; 0x3618 <ADMIN_Menu+0x480>
    3616:	de cd       	rjmp	.-1092   	; 0x31d4 <ADMIN_Menu+0x3c>
		{
			SPI_ui8TransmitRecive(ROOM3_TURN_OFF);
    3618:	83 e3       	ldi	r24, 0x33	; 51
    361a:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    361e:	da cd       	rjmp	.-1100   	; 0x31d4 <ADMIN_Menu+0x3c>
		}
		goto label4;
	}
	else if(Local_u8KeyPressed == CHOOSE_MORE)
    3620:	8d ad       	ldd	r24, Y+61	; 0x3d
    3622:	84 33       	cpi	r24, 0x34	; 52
    3624:	09 f0       	breq	.+2      	; 0x3628 <ADMIN_Menu+0x490>
    3626:	42 c1       	rjmp	.+644    	; 0x38ac <ADMIN_Menu+0x714>
	{
		Label5: LCD_CLEAR_ALL_SCREEN();
    3628:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_CLEAR_ALL_SCREEN>
		LCD_GOTO_XY(0,0);
    362c:	80 e0       	ldi	r24, 0x00	; 0
    362e:	60 e0       	ldi	r22, 0x00	; 0
    3630:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
		SEND_A_STRING("1:A.C 2:Garage");
    3634:	8b e4       	ldi	r24, 0x4B	; 75
    3636:	91 e0       	ldi	r25, 0x01	; 1
    3638:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
		LCD_GOTO_XY(1,0);
    363c:	81 e0       	ldi	r24, 0x01	; 1
    363e:	60 e0       	ldi	r22, 0x00	; 0
    3640:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
		SEND_A_STRING("3:Door 4:Ret");
    3644:	8a e5       	ldi	r24, 0x5A	; 90
    3646:	91 e0       	ldi	r25, 0x01	; 1
    3648:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
		Local_u8KeyPressed = KPD_NOT_PRESSED;
    364c:	8f ef       	ldi	r24, 0xFF	; 255
    364e:	8d af       	std	Y+61, r24	; 0x3d
    3650:	03 c0       	rjmp	.+6      	; 0x3658 <ADMIN_Menu+0x4c0>
		while(Local_u8KeyPressed == KPD_NOT_PRESSED)
		{
			Local_u8KeyPressed = KPD_GETKEY();
    3652:	0e 94 67 10 	call	0x20ce	; 0x20ce <KPD_GETKEY>
    3656:	8d af       	std	Y+61, r24	; 0x3d
		LCD_GOTO_XY(0,0);
		SEND_A_STRING("1:A.C 2:Garage");
		LCD_GOTO_XY(1,0);
		SEND_A_STRING("3:Door 4:Ret");
		Local_u8KeyPressed = KPD_NOT_PRESSED;
		while(Local_u8KeyPressed == KPD_NOT_PRESSED)
    3658:	8d ad       	ldd	r24, Y+61	; 0x3d
    365a:	8f 3f       	cpi	r24, 0xFF	; 255
    365c:	d1 f3       	breq	.-12     	; 0x3652 <ADMIN_Menu+0x4ba>
		{
			Local_u8KeyPressed = KPD_GETKEY();
		}
		LCD_CLEAR_ALL_SCREEN();
    365e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_CLEAR_ALL_SCREEN>
		LCD_GOTO_XY(0,0);
    3662:	80 e0       	ldi	r24, 0x00	; 0
    3664:	60 e0       	ldi	r22, 0x00	; 0
    3666:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
		if(Local_u8KeyPressed == CHOOSE_AIRCOND_ADMIN)
    366a:	8d ad       	ldd	r24, Y+61	; 0x3d
    366c:	81 33       	cpi	r24, 0x31	; 49
    366e:	09 f0       	breq	.+2      	; 0x3672 <ADMIN_Menu+0x4da>
    3670:	a8 c0       	rjmp	.+336    	; 0x37c2 <ADMIN_Menu+0x62a>
		{
			SPI_ui8TransmitRecive(AIR_COND_STATUS);
    3672:	84 e1       	ldi	r24, 0x14	; 20
    3674:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    3678:	80 e0       	ldi	r24, 0x00	; 0
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	a8 ec       	ldi	r26, 0xC8	; 200
    367e:	b2 e4       	ldi	r27, 0x42	; 66
    3680:	8b 87       	std	Y+11, r24	; 0x0b
    3682:	9c 87       	std	Y+12, r25	; 0x0c
    3684:	ad 87       	std	Y+13, r26	; 0x0d
    3686:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3688:	6b 85       	ldd	r22, Y+11	; 0x0b
    368a:	7c 85       	ldd	r23, Y+12	; 0x0c
    368c:	8d 85       	ldd	r24, Y+13	; 0x0d
    368e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3690:	20 e0       	ldi	r18, 0x00	; 0
    3692:	30 e0       	ldi	r19, 0x00	; 0
    3694:	4a ef       	ldi	r20, 0xFA	; 250
    3696:	54 e4       	ldi	r21, 0x44	; 68
    3698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    369c:	dc 01       	movw	r26, r24
    369e:	cb 01       	movw	r24, r22
    36a0:	8f 83       	std	Y+7, r24	; 0x07
    36a2:	98 87       	std	Y+8, r25	; 0x08
    36a4:	a9 87       	std	Y+9, r26	; 0x09
    36a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36a8:	6f 81       	ldd	r22, Y+7	; 0x07
    36aa:	78 85       	ldd	r23, Y+8	; 0x08
    36ac:	89 85       	ldd	r24, Y+9	; 0x09
    36ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    36b0:	20 e0       	ldi	r18, 0x00	; 0
    36b2:	30 e0       	ldi	r19, 0x00	; 0
    36b4:	40 e8       	ldi	r20, 0x80	; 128
    36b6:	5f e3       	ldi	r21, 0x3F	; 63
    36b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36bc:	88 23       	and	r24, r24
    36be:	2c f4       	brge	.+10     	; 0x36ca <ADMIN_Menu+0x532>
		__ticks = 1;
    36c0:	81 e0       	ldi	r24, 0x01	; 1
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	9e 83       	std	Y+6, r25	; 0x06
    36c6:	8d 83       	std	Y+5, r24	; 0x05
    36c8:	3f c0       	rjmp	.+126    	; 0x3748 <ADMIN_Menu+0x5b0>
	else if (__tmp > 65535)
    36ca:	6f 81       	ldd	r22, Y+7	; 0x07
    36cc:	78 85       	ldd	r23, Y+8	; 0x08
    36ce:	89 85       	ldd	r24, Y+9	; 0x09
    36d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	3f ef       	ldi	r19, 0xFF	; 255
    36d6:	4f e7       	ldi	r20, 0x7F	; 127
    36d8:	57 e4       	ldi	r21, 0x47	; 71
    36da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36de:	18 16       	cp	r1, r24
    36e0:	4c f5       	brge	.+82     	; 0x3734 <ADMIN_Menu+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    36e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    36e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    36e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    36ea:	20 e0       	ldi	r18, 0x00	; 0
    36ec:	30 e0       	ldi	r19, 0x00	; 0
    36ee:	40 e2       	ldi	r20, 0x20	; 32
    36f0:	51 e4       	ldi	r21, 0x41	; 65
    36f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f6:	dc 01       	movw	r26, r24
    36f8:	cb 01       	movw	r24, r22
    36fa:	bc 01       	movw	r22, r24
    36fc:	cd 01       	movw	r24, r26
    36fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3702:	dc 01       	movw	r26, r24
    3704:	cb 01       	movw	r24, r22
    3706:	9e 83       	std	Y+6, r25	; 0x06
    3708:	8d 83       	std	Y+5, r24	; 0x05
    370a:	0f c0       	rjmp	.+30     	; 0x372a <ADMIN_Menu+0x592>
    370c:	88 ec       	ldi	r24, 0xC8	; 200
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	9c 83       	std	Y+4, r25	; 0x04
    3712:	8b 83       	std	Y+3, r24	; 0x03
    3714:	8b 81       	ldd	r24, Y+3	; 0x03
    3716:	9c 81       	ldd	r25, Y+4	; 0x04
    3718:	01 97       	sbiw	r24, 0x01	; 1
    371a:	f1 f7       	brne	.-4      	; 0x3718 <ADMIN_Menu+0x580>
    371c:	9c 83       	std	Y+4, r25	; 0x04
    371e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3720:	8d 81       	ldd	r24, Y+5	; 0x05
    3722:	9e 81       	ldd	r25, Y+6	; 0x06
    3724:	01 97       	sbiw	r24, 0x01	; 1
    3726:	9e 83       	std	Y+6, r25	; 0x06
    3728:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    372a:	8d 81       	ldd	r24, Y+5	; 0x05
    372c:	9e 81       	ldd	r25, Y+6	; 0x06
    372e:	00 97       	sbiw	r24, 0x00	; 0
    3730:	69 f7       	brne	.-38     	; 0x370c <ADMIN_Menu+0x574>
    3732:	14 c0       	rjmp	.+40     	; 0x375c <ADMIN_Menu+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3734:	6f 81       	ldd	r22, Y+7	; 0x07
    3736:	78 85       	ldd	r23, Y+8	; 0x08
    3738:	89 85       	ldd	r24, Y+9	; 0x09
    373a:	9a 85       	ldd	r25, Y+10	; 0x0a
    373c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3740:	dc 01       	movw	r26, r24
    3742:	cb 01       	movw	r24, r22
    3744:	9e 83       	std	Y+6, r25	; 0x06
    3746:	8d 83       	std	Y+5, r24	; 0x05
    3748:	8d 81       	ldd	r24, Y+5	; 0x05
    374a:	9e 81       	ldd	r25, Y+6	; 0x06
    374c:	9a 83       	std	Y+2, r25	; 0x02
    374e:	89 83       	std	Y+1, r24	; 0x01
    3750:	89 81       	ldd	r24, Y+1	; 0x01
    3752:	9a 81       	ldd	r25, Y+2	; 0x02
    3754:	01 97       	sbiw	r24, 0x01	; 1
    3756:	f1 f7       	brne	.-4      	; 0x3754 <ADMIN_Menu+0x5bc>
    3758:	9a 83       	std	Y+2, r25	; 0x02
    375a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
			Local_u8AirCondStatue = SPI_ui8TransmitRecive(DEMAND_RESPONSE);
    375c:	8f ef       	ldi	r24, 0xFF	; 255
    375e:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    3762:	89 af       	std	Y+57, r24	; 0x39
			if(Local_u8AirCondStatue == ON_STATUS)
    3764:	89 ad       	ldd	r24, Y+57	; 0x39
    3766:	81 30       	cpi	r24, 0x01	; 1
    3768:	29 f4       	brne	.+10     	; 0x3774 <ADMIN_Menu+0x5dc>
			{
				SEND_A_STRING("A.C statue:ON");
    376a:	87 e6       	ldi	r24, 0x67	; 103
    376c:	91 e0       	ldi	r25, 0x01	; 1
    376e:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
    3772:	07 c0       	rjmp	.+14     	; 0x3782 <ADMIN_Menu+0x5ea>
			}
			else if(Local_u8AirCondStatue == OFF_STATUS)
    3774:	89 ad       	ldd	r24, Y+57	; 0x39
    3776:	88 23       	and	r24, r24
    3778:	21 f4       	brne	.+8      	; 0x3782 <ADMIN_Menu+0x5ea>
			{
				SEND_A_STRING("A.C statue:OFF");
    377a:	85 e7       	ldi	r24, 0x75	; 117
    377c:	91 e0       	ldi	r25, 0x01	; 1
    377e:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
			}
			LCD_GOTO_XY(1,0);
    3782:	81 e0       	ldi	r24, 0x01	; 1
    3784:	60 e0       	ldi	r22, 0x00	; 0
    3786:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
			SEND_A_STRING("1:ON 2:OFF");
    378a:	80 e4       	ldi	r24, 0x40	; 64
    378c:	91 e0       	ldi	r25, 0x01	; 1
    378e:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
			Local_u8KeyPressed = KPD_NOT_PRESSED;
    3792:	8f ef       	ldi	r24, 0xFF	; 255
    3794:	8d af       	std	Y+61, r24	; 0x3d
    3796:	03 c0       	rjmp	.+6      	; 0x379e <ADMIN_Menu+0x606>
			while(Local_u8KeyPressed == KPD_NOT_PRESSED)
			{
				Local_u8KeyPressed = KPD_GETKEY();
    3798:	0e 94 67 10 	call	0x20ce	; 0x20ce <KPD_GETKEY>
    379c:	8d af       	std	Y+61, r24	; 0x3d
				SEND_A_STRING("A.C statue:OFF");
			}
			LCD_GOTO_XY(1,0);
			SEND_A_STRING("1:ON 2:OFF");
			Local_u8KeyPressed = KPD_NOT_PRESSED;
			while(Local_u8KeyPressed == KPD_NOT_PRESSED)
    379e:	8d ad       	ldd	r24, Y+61	; 0x3d
    37a0:	8f 3f       	cpi	r24, 0xFF	; 255
    37a2:	d1 f3       	breq	.-12     	; 0x3798 <ADMIN_Menu+0x600>
			{
				Local_u8KeyPressed = KPD_GETKEY();
			}
			if(Local_u8KeyPressed == TURN_ON_AC)
    37a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    37a6:	81 33       	cpi	r24, 0x31	; 49
    37a8:	21 f4       	brne	.+8      	; 0x37b2 <ADMIN_Menu+0x61a>
			{
				SPI_ui8TransmitRecive(AIR_COND_TURN_ON);
    37aa:	84 e2       	ldi	r24, 0x24	; 36
    37ac:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    37b0:	3b cf       	rjmp	.-394    	; 0x3628 <ADMIN_Menu+0x490>
			}
			else if(Local_u8KeyPressed == TURN_OFF_AC)
    37b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    37b4:	82 33       	cpi	r24, 0x32	; 50
    37b6:	09 f0       	breq	.+2      	; 0x37ba <ADMIN_Menu+0x622>
    37b8:	37 cf       	rjmp	.-402    	; 0x3628 <ADMIN_Menu+0x490>
			{
				SPI_ui8TransmitRecive(AIR_COND_TURN_OFF);
    37ba:	84 e3       	ldi	r24, 0x34	; 52
    37bc:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    37c0:	33 cf       	rjmp	.-410    	; 0x3628 <ADMIN_Menu+0x490>
			}
			goto Label5;

		}
		else if(Local_u8KeyPressed == CHOOSE_GARAGE)
    37c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    37c4:	82 33       	cpi	r24, 0x32	; 50
    37c6:	b1 f5       	brne	.+108    	; 0x3834 <ADMIN_Menu+0x69c>
		{

			Local_u8GarageStatue = GARAGE_STATUS();
    37c8:	0e 94 48 0c 	call	0x1890	; 0x1890 <GARAGE_STATUS>
    37cc:	8b af       	std	Y+59, r24	; 0x3b
			LCD_CLEAR_ALL_SCREEN();
    37ce:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_CLEAR_ALL_SCREEN>
			LCD_GOTO_XY(0,0);
    37d2:	80 e0       	ldi	r24, 0x00	; 0
    37d4:	60 e0       	ldi	r22, 0x00	; 0
    37d6:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
			if(Local_u8GarageStatue == GARAGE_CLOSED)
    37da:	8b ad       	ldd	r24, Y+59	; 0x3b
    37dc:	88 23       	and	r24, r24
    37de:	29 f4       	brne	.+10     	; 0x37ea <ADMIN_Menu+0x652>
			{
				SEND_A_STRING("Statue: closed");
    37e0:	84 e8       	ldi	r24, 0x84	; 132
    37e2:	91 e0       	ldi	r25, 0x01	; 1
    37e4:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
    37e8:	07 c0       	rjmp	.+14     	; 0x37f8 <ADMIN_Menu+0x660>
			}
			else if(Local_u8GarageStatue == GARAGE_OPEN)
    37ea:	8b ad       	ldd	r24, Y+59	; 0x3b
    37ec:	81 30       	cpi	r24, 0x01	; 1
    37ee:	21 f4       	brne	.+8      	; 0x37f8 <ADMIN_Menu+0x660>
			{
				SEND_A_STRING("Statue: opened");
    37f0:	83 e9       	ldi	r24, 0x93	; 147
    37f2:	91 e0       	ldi	r25, 0x01	; 1
    37f4:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
			}
			LCD_GOTO_XY(1,0);
    37f8:	81 e0       	ldi	r24, 0x01	; 1
    37fa:	60 e0       	ldi	r22, 0x00	; 0
    37fc:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
			SEND_A_STRING("1:Open 2:Close");
    3800:	82 ea       	ldi	r24, 0xA2	; 162
    3802:	91 e0       	ldi	r25, 0x01	; 1
    3804:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
			Local_u8KeyPressed = KPD_NOT_PRESSED;
    3808:	8f ef       	ldi	r24, 0xFF	; 255
    380a:	8d af       	std	Y+61, r24	; 0x3d
    380c:	03 c0       	rjmp	.+6      	; 0x3814 <ADMIN_Menu+0x67c>
			while(Local_u8KeyPressed == KPD_NOT_PRESSED)
			{
				Local_u8KeyPressed = KPD_GETKEY();
    380e:	0e 94 67 10 	call	0x20ce	; 0x20ce <KPD_GETKEY>
    3812:	8d af       	std	Y+61, r24	; 0x3d
				SEND_A_STRING("Statue: opened");
			}
			LCD_GOTO_XY(1,0);
			SEND_A_STRING("1:Open 2:Close");
			Local_u8KeyPressed = KPD_NOT_PRESSED;
			while(Local_u8KeyPressed == KPD_NOT_PRESSED)
    3814:	8d ad       	ldd	r24, Y+61	; 0x3d
    3816:	8f 3f       	cpi	r24, 0xFF	; 255
    3818:	d1 f3       	breq	.-12     	; 0x380e <ADMIN_Menu+0x676>
			{
				Local_u8KeyPressed = KPD_GETKEY();
			}
			if(Local_u8KeyPressed == OPEN_GARAGE)
    381a:	8d ad       	ldd	r24, Y+61	; 0x3d
    381c:	81 33       	cpi	r24, 0x31	; 49
    381e:	19 f4       	brne	.+6      	; 0x3826 <ADMIN_Menu+0x68e>
			{
				SERVO_OPEN_GARAGE();
    3820:	0e 94 0f 0c 	call	0x181e	; 0x181e <SERVO_OPEN_GARAGE>
    3824:	01 cf       	rjmp	.-510    	; 0x3628 <ADMIN_Menu+0x490>
				goto Label5;
			}
			else if(Local_u8KeyPressed == CLOSE_GARAGE)
    3826:	8d ad       	ldd	r24, Y+61	; 0x3d
    3828:	82 33       	cpi	r24, 0x32	; 50
    382a:	09 f0       	breq	.+2      	; 0x382e <ADMIN_Menu+0x696>
    382c:	3f c0       	rjmp	.+126    	; 0x38ac <ADMIN_Menu+0x714>
			{
				SERVO_CLOSE_GARAGE();
    382e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <SERVO_CLOSE_GARAGE>
    3832:	fa ce       	rjmp	.-524    	; 0x3628 <ADMIN_Menu+0x490>
				goto Label5;
			}
		}
		else if(Local_u8KeyPressed == CHOOSE_DOOR)
    3834:	8d ad       	ldd	r24, Y+61	; 0x3d
    3836:	83 33       	cpi	r24, 0x33	; 51
    3838:	a9 f5       	brne	.+106    	; 0x38a4 <ADMIN_Menu+0x70c>
		{
			Local_u8DoorStatue = DOOR_STATUS();
    383a:	0e 94 25 0c 	call	0x184a	; 0x184a <DOOR_STATUS>
    383e:	8c af       	std	Y+60, r24	; 0x3c
			LCD_CLEAR_ALL_SCREEN();
    3840:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_CLEAR_ALL_SCREEN>
			LCD_GOTO_XY(0,0);
    3844:	80 e0       	ldi	r24, 0x00	; 0
    3846:	60 e0       	ldi	r22, 0x00	; 0
    3848:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
			if(Local_u8DoorStatue == DOOR_CLOSED)
    384c:	8c ad       	ldd	r24, Y+60	; 0x3c
    384e:	88 23       	and	r24, r24
    3850:	29 f4       	brne	.+10     	; 0x385c <ADMIN_Menu+0x6c4>
			{
				SEND_A_STRING("Statue: closed");
    3852:	84 e8       	ldi	r24, 0x84	; 132
    3854:	91 e0       	ldi	r25, 0x01	; 1
    3856:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
    385a:	07 c0       	rjmp	.+14     	; 0x386a <ADMIN_Menu+0x6d2>
			}
			else if(Local_u8DoorStatue == DOOR_OPEN)
    385c:	8c ad       	ldd	r24, Y+60	; 0x3c
    385e:	81 30       	cpi	r24, 0x01	; 1
    3860:	21 f4       	brne	.+8      	; 0x386a <ADMIN_Menu+0x6d2>
			{
				SEND_A_STRING("Statue: opened");
    3862:	83 e9       	ldi	r24, 0x93	; 147
    3864:	91 e0       	ldi	r25, 0x01	; 1
    3866:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
			}
			LCD_GOTO_XY(1,0);
    386a:	81 e0       	ldi	r24, 0x01	; 1
    386c:	60 e0       	ldi	r22, 0x00	; 0
    386e:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
			SEND_A_STRING("1:Open 2:Close");
    3872:	82 ea       	ldi	r24, 0xA2	; 162
    3874:	91 e0       	ldi	r25, 0x01	; 1
    3876:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
			Local_u8KeyPressed = KPD_NOT_PRESSED;
    387a:	8f ef       	ldi	r24, 0xFF	; 255
    387c:	8d af       	std	Y+61, r24	; 0x3d
    387e:	03 c0       	rjmp	.+6      	; 0x3886 <ADMIN_Menu+0x6ee>
			while(Local_u8KeyPressed == KPD_NOT_PRESSED)
			{
				Local_u8KeyPressed = KPD_GETKEY();
    3880:	0e 94 67 10 	call	0x20ce	; 0x20ce <KPD_GETKEY>
    3884:	8d af       	std	Y+61, r24	; 0x3d
				SEND_A_STRING("Statue: opened");
			}
			LCD_GOTO_XY(1,0);
			SEND_A_STRING("1:Open 2:Close");
			Local_u8KeyPressed = KPD_NOT_PRESSED;
			while(Local_u8KeyPressed == KPD_NOT_PRESSED)
    3886:	8d ad       	ldd	r24, Y+61	; 0x3d
    3888:	8f 3f       	cpi	r24, 0xFF	; 255
    388a:	d1 f3       	breq	.-12     	; 0x3880 <ADMIN_Menu+0x6e8>
			{
				Local_u8KeyPressed = KPD_GETKEY();
			}
			if(Local_u8KeyPressed == OPEN_DOOR)
    388c:	8d ad       	ldd	r24, Y+61	; 0x3d
    388e:	81 33       	cpi	r24, 0x31	; 49
    3890:	19 f4       	brne	.+6      	; 0x3898 <ADMIN_Menu+0x700>
			{
				SERVO_OPEN_DOOR();
    3892:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <SERVO_OPEN_DOOR>
    3896:	c8 ce       	rjmp	.-624    	; 0x3628 <ADMIN_Menu+0x490>
				goto Label5;
			}
			else if(Local_u8KeyPressed == CLOSE_DOOR)
    3898:	8d ad       	ldd	r24, Y+61	; 0x3d
    389a:	82 33       	cpi	r24, 0x32	; 50
    389c:	39 f4       	brne	.+14     	; 0x38ac <ADMIN_Menu+0x714>
			{
				SERVO_CLOSE_DOOR();
    389e:	0e 94 04 0c 	call	0x1808	; 0x1808 <SERVO_CLOSE_DOOR>
    38a2:	c2 ce       	rjmp	.-636    	; 0x3628 <ADMIN_Menu+0x490>
				goto Label5;
			}
		}
		else if(Local_u8KeyPressed == CHOOSE_RETURN)
    38a4:	8d ad       	ldd	r24, Y+61	; 0x3d
    38a6:	84 33       	cpi	r24, 0x34	; 52
    38a8:	09 f4       	brne	.+2      	; 0x38ac <ADMIN_Menu+0x714>
    38aa:	94 cc       	rjmp	.-1752   	; 0x31d4 <ADMIN_Menu+0x3c>
		{
			goto label4;
		}

	}
}
    38ac:	ed 96       	adiw	r28, 0x3d	; 61
    38ae:	0f b6       	in	r0, 0x3f	; 63
    38b0:	f8 94       	cli
    38b2:	de bf       	out	0x3e, r29	; 62
    38b4:	0f be       	out	0x3f, r0	; 63
    38b6:	cd bf       	out	0x3d, r28	; 61
    38b8:	cf 91       	pop	r28
    38ba:	df 91       	pop	r29
    38bc:	08 95       	ret

000038be <USER_Menu>:
	}

}*/

void USER_Menu(void)
{
    38be:	df 93       	push	r29
    38c0:	cf 93       	push	r28
    38c2:	cd b7       	in	r28, 0x3d	; 61
    38c4:	de b7       	in	r29, 0x3e	; 62
    38c6:	eb 97       	sbiw	r28, 0x3b	; 59
    38c8:	0f b6       	in	r0, 0x3f	; 63
    38ca:	f8 94       	cli
    38cc:	de bf       	out	0x3e, r29	; 62
    38ce:	0f be       	out	0x3f, r0	; 63
    38d0:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8KeyPressed = KPD_NOT_PRESSED, Local_u8LEDStatue, Local_u8AirCondStatue;
    38d2:	8f ef       	ldi	r24, 0xFF	; 255
    38d4:	8b af       	std	Y+59, r24	; 0x3b
	//turn on user led
	LED_voidTurnON(USER_LED_PORT, USER_LED_PIN);
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	61 e0       	ldi	r22, 0x01	; 1
    38da:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <LED_voidTurnON>
	LCD_CLEAR_ALL_SCREEN();
    38de:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_CLEAR_ALL_SCREEN>
	LCD_GOTO_XY(0,0);
    38e2:	80 e0       	ldi	r24, 0x00	; 0
    38e4:	60 e0       	ldi	r22, 0x00	; 0
    38e6:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
	SEND_A_STRING("Welcome user");
    38ea:	81 eb       	ldi	r24, 0xB1	; 177
    38ec:	91 e0       	ldi	r25, 0x01	; 1
    38ee:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
	label4: LCD_CLEAR_ALL_SCREEN();
    38f2:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_CLEAR_ALL_SCREEN>
	SEND_A_STRING("1:Room1 2:Room2");
    38f6:	8c ef       	ldi	r24, 0xFC	; 252
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
	LCD_GOTO_XY(1,0);
    38fe:	81 e0       	ldi	r24, 0x01	; 1
    3900:	60 e0       	ldi	r22, 0x00	; 0
    3902:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
	SEND_A_STRING("3:Room3 4:A.C");
    3906:	8e eb       	ldi	r24, 0xBE	; 190
    3908:	91 e0       	ldi	r25, 0x01	; 1
    390a:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
	Local_u8KeyPressed = KPD_NOT_PRESSED;
    390e:	8f ef       	ldi	r24, 0xFF	; 255
    3910:	8b af       	std	Y+59, r24	; 0x3b
    3912:	03 c0       	rjmp	.+6      	; 0x391a <USER_Menu+0x5c>
	while(Local_u8KeyPressed == KPD_NOT_PRESSED)
	{
		Local_u8KeyPressed = KPD_GETKEY();
    3914:	0e 94 67 10 	call	0x20ce	; 0x20ce <KPD_GETKEY>
    3918:	8b af       	std	Y+59, r24	; 0x3b
	label4: LCD_CLEAR_ALL_SCREEN();
	SEND_A_STRING("1:Room1 2:Room2");
	LCD_GOTO_XY(1,0);
	SEND_A_STRING("3:Room3 4:A.C");
	Local_u8KeyPressed = KPD_NOT_PRESSED;
	while(Local_u8KeyPressed == KPD_NOT_PRESSED)
    391a:	8b ad       	ldd	r24, Y+59	; 0x3b
    391c:	8f 3f       	cpi	r24, 0xFF	; 255
    391e:	d1 f3       	breq	.-12     	; 0x3914 <USER_Menu+0x56>
	{
		Local_u8KeyPressed = KPD_GETKEY();
	}
	LCD_CLEAR_ALL_SCREEN();
    3920:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_CLEAR_ALL_SCREEN>
	LCD_GOTO_XY(0,0);
    3924:	80 e0       	ldi	r24, 0x00	; 0
    3926:	60 e0       	ldi	r22, 0x00	; 0
    3928:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
	if(Local_u8KeyPressed == CHOOSE_ROOM1)
    392c:	8b ad       	ldd	r24, Y+59	; 0x3b
    392e:	81 33       	cpi	r24, 0x31	; 49
    3930:	09 f0       	breq	.+2      	; 0x3934 <USER_Menu+0x76>
    3932:	a8 c0       	rjmp	.+336    	; 0x3a84 <USER_Menu+0x1c6>
	{
		SPI_ui8TransmitRecive(ROOM1_STATUS);
    3934:	81 e1       	ldi	r24, 0x11	; 17
    3936:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    393a:	80 e0       	ldi	r24, 0x00	; 0
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	a8 ec       	ldi	r26, 0xC8	; 200
    3940:	b2 e4       	ldi	r27, 0x42	; 66
    3942:	8d ab       	std	Y+53, r24	; 0x35
    3944:	9e ab       	std	Y+54, r25	; 0x36
    3946:	af ab       	std	Y+55, r26	; 0x37
    3948:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    394a:	6d a9       	ldd	r22, Y+53	; 0x35
    394c:	7e a9       	ldd	r23, Y+54	; 0x36
    394e:	8f a9       	ldd	r24, Y+55	; 0x37
    3950:	98 ad       	ldd	r25, Y+56	; 0x38
    3952:	20 e0       	ldi	r18, 0x00	; 0
    3954:	30 e0       	ldi	r19, 0x00	; 0
    3956:	4a ef       	ldi	r20, 0xFA	; 250
    3958:	54 e4       	ldi	r21, 0x44	; 68
    395a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    395e:	dc 01       	movw	r26, r24
    3960:	cb 01       	movw	r24, r22
    3962:	89 ab       	std	Y+49, r24	; 0x31
    3964:	9a ab       	std	Y+50, r25	; 0x32
    3966:	ab ab       	std	Y+51, r26	; 0x33
    3968:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    396a:	69 a9       	ldd	r22, Y+49	; 0x31
    396c:	7a a9       	ldd	r23, Y+50	; 0x32
    396e:	8b a9       	ldd	r24, Y+51	; 0x33
    3970:	9c a9       	ldd	r25, Y+52	; 0x34
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	40 e8       	ldi	r20, 0x80	; 128
    3978:	5f e3       	ldi	r21, 0x3F	; 63
    397a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    397e:	88 23       	and	r24, r24
    3980:	2c f4       	brge	.+10     	; 0x398c <USER_Menu+0xce>
		__ticks = 1;
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	98 ab       	std	Y+48, r25	; 0x30
    3988:	8f a7       	std	Y+47, r24	; 0x2f
    398a:	3f c0       	rjmp	.+126    	; 0x3a0a <USER_Menu+0x14c>
	else if (__tmp > 65535)
    398c:	69 a9       	ldd	r22, Y+49	; 0x31
    398e:	7a a9       	ldd	r23, Y+50	; 0x32
    3990:	8b a9       	ldd	r24, Y+51	; 0x33
    3992:	9c a9       	ldd	r25, Y+52	; 0x34
    3994:	20 e0       	ldi	r18, 0x00	; 0
    3996:	3f ef       	ldi	r19, 0xFF	; 255
    3998:	4f e7       	ldi	r20, 0x7F	; 127
    399a:	57 e4       	ldi	r21, 0x47	; 71
    399c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39a0:	18 16       	cp	r1, r24
    39a2:	4c f5       	brge	.+82     	; 0x39f6 <USER_Menu+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39a4:	6d a9       	ldd	r22, Y+53	; 0x35
    39a6:	7e a9       	ldd	r23, Y+54	; 0x36
    39a8:	8f a9       	ldd	r24, Y+55	; 0x37
    39aa:	98 ad       	ldd	r25, Y+56	; 0x38
    39ac:	20 e0       	ldi	r18, 0x00	; 0
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	40 e2       	ldi	r20, 0x20	; 32
    39b2:	51 e4       	ldi	r21, 0x41	; 65
    39b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b8:	dc 01       	movw	r26, r24
    39ba:	cb 01       	movw	r24, r22
    39bc:	bc 01       	movw	r22, r24
    39be:	cd 01       	movw	r24, r26
    39c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c4:	dc 01       	movw	r26, r24
    39c6:	cb 01       	movw	r24, r22
    39c8:	98 ab       	std	Y+48, r25	; 0x30
    39ca:	8f a7       	std	Y+47, r24	; 0x2f
    39cc:	0f c0       	rjmp	.+30     	; 0x39ec <USER_Menu+0x12e>
    39ce:	88 ec       	ldi	r24, 0xC8	; 200
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	9e a7       	std	Y+46, r25	; 0x2e
    39d4:	8d a7       	std	Y+45, r24	; 0x2d
    39d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    39d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    39da:	01 97       	sbiw	r24, 0x01	; 1
    39dc:	f1 f7       	brne	.-4      	; 0x39da <USER_Menu+0x11c>
    39de:	9e a7       	std	Y+46, r25	; 0x2e
    39e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    39e4:	98 a9       	ldd	r25, Y+48	; 0x30
    39e6:	01 97       	sbiw	r24, 0x01	; 1
    39e8:	98 ab       	std	Y+48, r25	; 0x30
    39ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    39ee:	98 a9       	ldd	r25, Y+48	; 0x30
    39f0:	00 97       	sbiw	r24, 0x00	; 0
    39f2:	69 f7       	brne	.-38     	; 0x39ce <USER_Menu+0x110>
    39f4:	14 c0       	rjmp	.+40     	; 0x3a1e <USER_Menu+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39f6:	69 a9       	ldd	r22, Y+49	; 0x31
    39f8:	7a a9       	ldd	r23, Y+50	; 0x32
    39fa:	8b a9       	ldd	r24, Y+51	; 0x33
    39fc:	9c a9       	ldd	r25, Y+52	; 0x34
    39fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a02:	dc 01       	movw	r26, r24
    3a04:	cb 01       	movw	r24, r22
    3a06:	98 ab       	std	Y+48, r25	; 0x30
    3a08:	8f a7       	std	Y+47, r24	; 0x2f
    3a0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a0c:	98 a9       	ldd	r25, Y+48	; 0x30
    3a0e:	9c a7       	std	Y+44, r25	; 0x2c
    3a10:	8b a7       	std	Y+43, r24	; 0x2b
    3a12:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a14:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a16:	01 97       	sbiw	r24, 0x01	; 1
    3a18:	f1 f7       	brne	.-4      	; 0x3a16 <USER_Menu+0x158>
    3a1a:	9c a7       	std	Y+44, r25	; 0x2c
    3a1c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(100);
		Local_u8LEDStatue = SPI_ui8TransmitRecive(DEMAND_RESPONSE);
    3a1e:	8f ef       	ldi	r24, 0xFF	; 255
    3a20:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    3a24:	8a af       	std	Y+58, r24	; 0x3a
		if(Local_u8LEDStatue == ON_STATUS)
    3a26:	8a ad       	ldd	r24, Y+58	; 0x3a
    3a28:	81 30       	cpi	r24, 0x01	; 1
    3a2a:	29 f4       	brne	.+10     	; 0x3a36 <USER_Menu+0x178>
		{
			SEND_A_STRING("LED statue:ON");
    3a2c:	8c ec       	ldi	r24, 0xCC	; 204
    3a2e:	91 e0       	ldi	r25, 0x01	; 1
    3a30:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
    3a34:	07 c0       	rjmp	.+14     	; 0x3a44 <USER_Menu+0x186>
		}
		else if(Local_u8LEDStatue == OFF_STATUS)
    3a36:	8a ad       	ldd	r24, Y+58	; 0x3a
    3a38:	88 23       	and	r24, r24
    3a3a:	21 f4       	brne	.+8      	; 0x3a44 <USER_Menu+0x186>
		{
			SEND_A_STRING("LED statue:OFF");
    3a3c:	8a ed       	ldi	r24, 0xDA	; 218
    3a3e:	91 e0       	ldi	r25, 0x01	; 1
    3a40:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
		}
		LCD_GOTO_XY(1,0);
    3a44:	81 e0       	ldi	r24, 0x01	; 1
    3a46:	60 e0       	ldi	r22, 0x00	; 0
    3a48:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
		SEND_A_STRING("1:ON 2:OFF");
    3a4c:	80 e4       	ldi	r24, 0x40	; 64
    3a4e:	91 e0       	ldi	r25, 0x01	; 1
    3a50:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
		Local_u8KeyPressed = KPD_NOT_PRESSED;
    3a54:	8f ef       	ldi	r24, 0xFF	; 255
    3a56:	8b af       	std	Y+59, r24	; 0x3b
    3a58:	03 c0       	rjmp	.+6      	; 0x3a60 <USER_Menu+0x1a2>
		while(Local_u8KeyPressed == KPD_NOT_PRESSED)
		{
			Local_u8KeyPressed = KPD_GETKEY();
    3a5a:	0e 94 67 10 	call	0x20ce	; 0x20ce <KPD_GETKEY>
    3a5e:	8b af       	std	Y+59, r24	; 0x3b
			SEND_A_STRING("LED statue:OFF");
		}
		LCD_GOTO_XY(1,0);
		SEND_A_STRING("1:ON 2:OFF");
		Local_u8KeyPressed = KPD_NOT_PRESSED;
		while(Local_u8KeyPressed == KPD_NOT_PRESSED)
    3a60:	8b ad       	ldd	r24, Y+59	; 0x3b
    3a62:	8f 3f       	cpi	r24, 0xFF	; 255
    3a64:	d1 f3       	breq	.-12     	; 0x3a5a <USER_Menu+0x19c>
		{
			Local_u8KeyPressed = KPD_GETKEY();
		}
		if(Local_u8KeyPressed == TURN_ON_LED)
    3a66:	8b ad       	ldd	r24, Y+59	; 0x3b
    3a68:	81 33       	cpi	r24, 0x31	; 49
    3a6a:	21 f4       	brne	.+8      	; 0x3a74 <USER_Menu+0x1b6>
		{
			SPI_ui8TransmitRecive(ROOM1_TURN_ON);
    3a6c:	81 e2       	ldi	r24, 0x21	; 33
    3a6e:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    3a72:	3f cf       	rjmp	.-386    	; 0x38f2 <USER_Menu+0x34>
		}
		else if(Local_u8KeyPressed == TURN_OFF_LED)
    3a74:	8b ad       	ldd	r24, Y+59	; 0x3b
    3a76:	82 33       	cpi	r24, 0x32	; 50
    3a78:	09 f0       	breq	.+2      	; 0x3a7c <USER_Menu+0x1be>
    3a7a:	3b cf       	rjmp	.-394    	; 0x38f2 <USER_Menu+0x34>
		{
			SPI_ui8TransmitRecive(ROOM1_TURN_OFF);
    3a7c:	81 e3       	ldi	r24, 0x31	; 49
    3a7e:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    3a82:	37 cf       	rjmp	.-402    	; 0x38f2 <USER_Menu+0x34>
		}
		goto label4;
	}
	else if(Local_u8KeyPressed == CHOOSE_ROOM2)
    3a84:	8b ad       	ldd	r24, Y+59	; 0x3b
    3a86:	82 33       	cpi	r24, 0x32	; 50
    3a88:	09 f0       	breq	.+2      	; 0x3a8c <USER_Menu+0x1ce>
    3a8a:	a8 c0       	rjmp	.+336    	; 0x3bdc <USER_Menu+0x31e>
	{
		SPI_ui8TransmitRecive(ROOM2_STATUS);
    3a8c:	82 e1       	ldi	r24, 0x12	; 18
    3a8e:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    3a92:	80 e0       	ldi	r24, 0x00	; 0
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	a8 ec       	ldi	r26, 0xC8	; 200
    3a98:	b2 e4       	ldi	r27, 0x42	; 66
    3a9a:	8f a3       	std	Y+39, r24	; 0x27
    3a9c:	98 a7       	std	Y+40, r25	; 0x28
    3a9e:	a9 a7       	std	Y+41, r26	; 0x29
    3aa0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aa2:	6f a1       	ldd	r22, Y+39	; 0x27
    3aa4:	78 a5       	ldd	r23, Y+40	; 0x28
    3aa6:	89 a5       	ldd	r24, Y+41	; 0x29
    3aa8:	9a a5       	ldd	r25, Y+42	; 0x2a
    3aaa:	20 e0       	ldi	r18, 0x00	; 0
    3aac:	30 e0       	ldi	r19, 0x00	; 0
    3aae:	4a ef       	ldi	r20, 0xFA	; 250
    3ab0:	54 e4       	ldi	r21, 0x44	; 68
    3ab2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ab6:	dc 01       	movw	r26, r24
    3ab8:	cb 01       	movw	r24, r22
    3aba:	8b a3       	std	Y+35, r24	; 0x23
    3abc:	9c a3       	std	Y+36, r25	; 0x24
    3abe:	ad a3       	std	Y+37, r26	; 0x25
    3ac0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3ac2:	6b a1       	ldd	r22, Y+35	; 0x23
    3ac4:	7c a1       	ldd	r23, Y+36	; 0x24
    3ac6:	8d a1       	ldd	r24, Y+37	; 0x25
    3ac8:	9e a1       	ldd	r25, Y+38	; 0x26
    3aca:	20 e0       	ldi	r18, 0x00	; 0
    3acc:	30 e0       	ldi	r19, 0x00	; 0
    3ace:	40 e8       	ldi	r20, 0x80	; 128
    3ad0:	5f e3       	ldi	r21, 0x3F	; 63
    3ad2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ad6:	88 23       	and	r24, r24
    3ad8:	2c f4       	brge	.+10     	; 0x3ae4 <USER_Menu+0x226>
		__ticks = 1;
    3ada:	81 e0       	ldi	r24, 0x01	; 1
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	9a a3       	std	Y+34, r25	; 0x22
    3ae0:	89 a3       	std	Y+33, r24	; 0x21
    3ae2:	3f c0       	rjmp	.+126    	; 0x3b62 <USER_Menu+0x2a4>
	else if (__tmp > 65535)
    3ae4:	6b a1       	ldd	r22, Y+35	; 0x23
    3ae6:	7c a1       	ldd	r23, Y+36	; 0x24
    3ae8:	8d a1       	ldd	r24, Y+37	; 0x25
    3aea:	9e a1       	ldd	r25, Y+38	; 0x26
    3aec:	20 e0       	ldi	r18, 0x00	; 0
    3aee:	3f ef       	ldi	r19, 0xFF	; 255
    3af0:	4f e7       	ldi	r20, 0x7F	; 127
    3af2:	57 e4       	ldi	r21, 0x47	; 71
    3af4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3af8:	18 16       	cp	r1, r24
    3afa:	4c f5       	brge	.+82     	; 0x3b4e <USER_Menu+0x290>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3afc:	6f a1       	ldd	r22, Y+39	; 0x27
    3afe:	78 a5       	ldd	r23, Y+40	; 0x28
    3b00:	89 a5       	ldd	r24, Y+41	; 0x29
    3b02:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b04:	20 e0       	ldi	r18, 0x00	; 0
    3b06:	30 e0       	ldi	r19, 0x00	; 0
    3b08:	40 e2       	ldi	r20, 0x20	; 32
    3b0a:	51 e4       	ldi	r21, 0x41	; 65
    3b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b10:	dc 01       	movw	r26, r24
    3b12:	cb 01       	movw	r24, r22
    3b14:	bc 01       	movw	r22, r24
    3b16:	cd 01       	movw	r24, r26
    3b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b1c:	dc 01       	movw	r26, r24
    3b1e:	cb 01       	movw	r24, r22
    3b20:	9a a3       	std	Y+34, r25	; 0x22
    3b22:	89 a3       	std	Y+33, r24	; 0x21
    3b24:	0f c0       	rjmp	.+30     	; 0x3b44 <USER_Menu+0x286>
    3b26:	88 ec       	ldi	r24, 0xC8	; 200
    3b28:	90 e0       	ldi	r25, 0x00	; 0
    3b2a:	98 a3       	std	Y+32, r25	; 0x20
    3b2c:	8f 8f       	std	Y+31, r24	; 0x1f
    3b2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b30:	98 a1       	ldd	r25, Y+32	; 0x20
    3b32:	01 97       	sbiw	r24, 0x01	; 1
    3b34:	f1 f7       	brne	.-4      	; 0x3b32 <USER_Menu+0x274>
    3b36:	98 a3       	std	Y+32, r25	; 0x20
    3b38:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b3a:	89 a1       	ldd	r24, Y+33	; 0x21
    3b3c:	9a a1       	ldd	r25, Y+34	; 0x22
    3b3e:	01 97       	sbiw	r24, 0x01	; 1
    3b40:	9a a3       	std	Y+34, r25	; 0x22
    3b42:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b44:	89 a1       	ldd	r24, Y+33	; 0x21
    3b46:	9a a1       	ldd	r25, Y+34	; 0x22
    3b48:	00 97       	sbiw	r24, 0x00	; 0
    3b4a:	69 f7       	brne	.-38     	; 0x3b26 <USER_Menu+0x268>
    3b4c:	14 c0       	rjmp	.+40     	; 0x3b76 <USER_Menu+0x2b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b4e:	6b a1       	ldd	r22, Y+35	; 0x23
    3b50:	7c a1       	ldd	r23, Y+36	; 0x24
    3b52:	8d a1       	ldd	r24, Y+37	; 0x25
    3b54:	9e a1       	ldd	r25, Y+38	; 0x26
    3b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b5a:	dc 01       	movw	r26, r24
    3b5c:	cb 01       	movw	r24, r22
    3b5e:	9a a3       	std	Y+34, r25	; 0x22
    3b60:	89 a3       	std	Y+33, r24	; 0x21
    3b62:	89 a1       	ldd	r24, Y+33	; 0x21
    3b64:	9a a1       	ldd	r25, Y+34	; 0x22
    3b66:	9e 8f       	std	Y+30, r25	; 0x1e
    3b68:	8d 8f       	std	Y+29, r24	; 0x1d
    3b6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b6e:	01 97       	sbiw	r24, 0x01	; 1
    3b70:	f1 f7       	brne	.-4      	; 0x3b6e <USER_Menu+0x2b0>
    3b72:	9e 8f       	std	Y+30, r25	; 0x1e
    3b74:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		Local_u8LEDStatue = SPI_ui8TransmitRecive(DEMAND_RESPONSE);
    3b76:	8f ef       	ldi	r24, 0xFF	; 255
    3b78:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    3b7c:	8a af       	std	Y+58, r24	; 0x3a
		if(Local_u8LEDStatue == ON_STATUS)
    3b7e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b80:	81 30       	cpi	r24, 0x01	; 1
    3b82:	29 f4       	brne	.+10     	; 0x3b8e <USER_Menu+0x2d0>
		{
			SEND_A_STRING("LED statue:ON");
    3b84:	8c ec       	ldi	r24, 0xCC	; 204
    3b86:	91 e0       	ldi	r25, 0x01	; 1
    3b88:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
    3b8c:	07 c0       	rjmp	.+14     	; 0x3b9c <USER_Menu+0x2de>
		}
		else if(Local_u8LEDStatue == OFF_STATUS)
    3b8e:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b90:	88 23       	and	r24, r24
    3b92:	21 f4       	brne	.+8      	; 0x3b9c <USER_Menu+0x2de>
		{
			SEND_A_STRING("LED statue:OFF");
    3b94:	8a ed       	ldi	r24, 0xDA	; 218
    3b96:	91 e0       	ldi	r25, 0x01	; 1
    3b98:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
		}
		LCD_GOTO_XY(1,0);
    3b9c:	81 e0       	ldi	r24, 0x01	; 1
    3b9e:	60 e0       	ldi	r22, 0x00	; 0
    3ba0:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
		SEND_A_STRING("1:ON 2:OFF");
    3ba4:	80 e4       	ldi	r24, 0x40	; 64
    3ba6:	91 e0       	ldi	r25, 0x01	; 1
    3ba8:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
		Local_u8KeyPressed = KPD_NOT_PRESSED;
    3bac:	8f ef       	ldi	r24, 0xFF	; 255
    3bae:	8b af       	std	Y+59, r24	; 0x3b
    3bb0:	03 c0       	rjmp	.+6      	; 0x3bb8 <USER_Menu+0x2fa>
		while(Local_u8KeyPressed == KPD_NOT_PRESSED)
		{
			Local_u8KeyPressed = KPD_GETKEY();
    3bb2:	0e 94 67 10 	call	0x20ce	; 0x20ce <KPD_GETKEY>
    3bb6:	8b af       	std	Y+59, r24	; 0x3b
			SEND_A_STRING("LED statue:OFF");
		}
		LCD_GOTO_XY(1,0);
		SEND_A_STRING("1:ON 2:OFF");
		Local_u8KeyPressed = KPD_NOT_PRESSED;
		while(Local_u8KeyPressed == KPD_NOT_PRESSED)
    3bb8:	8b ad       	ldd	r24, Y+59	; 0x3b
    3bba:	8f 3f       	cpi	r24, 0xFF	; 255
    3bbc:	d1 f3       	breq	.-12     	; 0x3bb2 <USER_Menu+0x2f4>
		{
			Local_u8KeyPressed = KPD_GETKEY();
		}
		if(Local_u8KeyPressed == TURN_ON_LED)
    3bbe:	8b ad       	ldd	r24, Y+59	; 0x3b
    3bc0:	81 33       	cpi	r24, 0x31	; 49
    3bc2:	21 f4       	brne	.+8      	; 0x3bcc <USER_Menu+0x30e>
		{
			SPI_ui8TransmitRecive(ROOM2_TURN_ON);
    3bc4:	82 e2       	ldi	r24, 0x22	; 34
    3bc6:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    3bca:	93 ce       	rjmp	.-730    	; 0x38f2 <USER_Menu+0x34>
		}
		else if(Local_u8KeyPressed == TURN_OFF_LED)
    3bcc:	8b ad       	ldd	r24, Y+59	; 0x3b
    3bce:	82 33       	cpi	r24, 0x32	; 50
    3bd0:	09 f0       	breq	.+2      	; 0x3bd4 <USER_Menu+0x316>
    3bd2:	8f ce       	rjmp	.-738    	; 0x38f2 <USER_Menu+0x34>
		{
			SPI_ui8TransmitRecive(ROOM2_TURN_OFF);
    3bd4:	82 e3       	ldi	r24, 0x32	; 50
    3bd6:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    3bda:	8b ce       	rjmp	.-746    	; 0x38f2 <USER_Menu+0x34>
		}
		goto label4;
	}
	else if(Local_u8KeyPressed == CHOOSE_ROOM3)
    3bdc:	8b ad       	ldd	r24, Y+59	; 0x3b
    3bde:	83 33       	cpi	r24, 0x33	; 51
    3be0:	09 f0       	breq	.+2      	; 0x3be4 <USER_Menu+0x326>
    3be2:	a8 c0       	rjmp	.+336    	; 0x3d34 <USER_Menu+0x476>
	{
		SPI_ui8TransmitRecive(ROOM3_STATUS);
    3be4:	83 e1       	ldi	r24, 0x13	; 19
    3be6:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    3bea:	80 e0       	ldi	r24, 0x00	; 0
    3bec:	90 e0       	ldi	r25, 0x00	; 0
    3bee:	a8 ec       	ldi	r26, 0xC8	; 200
    3bf0:	b2 e4       	ldi	r27, 0x42	; 66
    3bf2:	89 8f       	std	Y+25, r24	; 0x19
    3bf4:	9a 8f       	std	Y+26, r25	; 0x1a
    3bf6:	ab 8f       	std	Y+27, r26	; 0x1b
    3bf8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bfa:	69 8d       	ldd	r22, Y+25	; 0x19
    3bfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c02:	20 e0       	ldi	r18, 0x00	; 0
    3c04:	30 e0       	ldi	r19, 0x00	; 0
    3c06:	4a ef       	ldi	r20, 0xFA	; 250
    3c08:	54 e4       	ldi	r21, 0x44	; 68
    3c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c0e:	dc 01       	movw	r26, r24
    3c10:	cb 01       	movw	r24, r22
    3c12:	8d 8b       	std	Y+21, r24	; 0x15
    3c14:	9e 8b       	std	Y+22, r25	; 0x16
    3c16:	af 8b       	std	Y+23, r26	; 0x17
    3c18:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c1a:	6d 89       	ldd	r22, Y+21	; 0x15
    3c1c:	7e 89       	ldd	r23, Y+22	; 0x16
    3c1e:	8f 89       	ldd	r24, Y+23	; 0x17
    3c20:	98 8d       	ldd	r25, Y+24	; 0x18
    3c22:	20 e0       	ldi	r18, 0x00	; 0
    3c24:	30 e0       	ldi	r19, 0x00	; 0
    3c26:	40 e8       	ldi	r20, 0x80	; 128
    3c28:	5f e3       	ldi	r21, 0x3F	; 63
    3c2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c2e:	88 23       	and	r24, r24
    3c30:	2c f4       	brge	.+10     	; 0x3c3c <USER_Menu+0x37e>
		__ticks = 1;
    3c32:	81 e0       	ldi	r24, 0x01	; 1
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	9c 8b       	std	Y+20, r25	; 0x14
    3c38:	8b 8b       	std	Y+19, r24	; 0x13
    3c3a:	3f c0       	rjmp	.+126    	; 0x3cba <USER_Menu+0x3fc>
	else if (__tmp > 65535)
    3c3c:	6d 89       	ldd	r22, Y+21	; 0x15
    3c3e:	7e 89       	ldd	r23, Y+22	; 0x16
    3c40:	8f 89       	ldd	r24, Y+23	; 0x17
    3c42:	98 8d       	ldd	r25, Y+24	; 0x18
    3c44:	20 e0       	ldi	r18, 0x00	; 0
    3c46:	3f ef       	ldi	r19, 0xFF	; 255
    3c48:	4f e7       	ldi	r20, 0x7F	; 127
    3c4a:	57 e4       	ldi	r21, 0x47	; 71
    3c4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c50:	18 16       	cp	r1, r24
    3c52:	4c f5       	brge	.+82     	; 0x3ca6 <USER_Menu+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c54:	69 8d       	ldd	r22, Y+25	; 0x19
    3c56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c5c:	20 e0       	ldi	r18, 0x00	; 0
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	40 e2       	ldi	r20, 0x20	; 32
    3c62:	51 e4       	ldi	r21, 0x41	; 65
    3c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c68:	dc 01       	movw	r26, r24
    3c6a:	cb 01       	movw	r24, r22
    3c6c:	bc 01       	movw	r22, r24
    3c6e:	cd 01       	movw	r24, r26
    3c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c74:	dc 01       	movw	r26, r24
    3c76:	cb 01       	movw	r24, r22
    3c78:	9c 8b       	std	Y+20, r25	; 0x14
    3c7a:	8b 8b       	std	Y+19, r24	; 0x13
    3c7c:	0f c0       	rjmp	.+30     	; 0x3c9c <USER_Menu+0x3de>
    3c7e:	88 ec       	ldi	r24, 0xC8	; 200
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	9a 8b       	std	Y+18, r25	; 0x12
    3c84:	89 8b       	std	Y+17, r24	; 0x11
    3c86:	89 89       	ldd	r24, Y+17	; 0x11
    3c88:	9a 89       	ldd	r25, Y+18	; 0x12
    3c8a:	01 97       	sbiw	r24, 0x01	; 1
    3c8c:	f1 f7       	brne	.-4      	; 0x3c8a <USER_Menu+0x3cc>
    3c8e:	9a 8b       	std	Y+18, r25	; 0x12
    3c90:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c92:	8b 89       	ldd	r24, Y+19	; 0x13
    3c94:	9c 89       	ldd	r25, Y+20	; 0x14
    3c96:	01 97       	sbiw	r24, 0x01	; 1
    3c98:	9c 8b       	std	Y+20, r25	; 0x14
    3c9a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c9c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c9e:	9c 89       	ldd	r25, Y+20	; 0x14
    3ca0:	00 97       	sbiw	r24, 0x00	; 0
    3ca2:	69 f7       	brne	.-38     	; 0x3c7e <USER_Menu+0x3c0>
    3ca4:	14 c0       	rjmp	.+40     	; 0x3cce <USER_Menu+0x410>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ca6:	6d 89       	ldd	r22, Y+21	; 0x15
    3ca8:	7e 89       	ldd	r23, Y+22	; 0x16
    3caa:	8f 89       	ldd	r24, Y+23	; 0x17
    3cac:	98 8d       	ldd	r25, Y+24	; 0x18
    3cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cb2:	dc 01       	movw	r26, r24
    3cb4:	cb 01       	movw	r24, r22
    3cb6:	9c 8b       	std	Y+20, r25	; 0x14
    3cb8:	8b 8b       	std	Y+19, r24	; 0x13
    3cba:	8b 89       	ldd	r24, Y+19	; 0x13
    3cbc:	9c 89       	ldd	r25, Y+20	; 0x14
    3cbe:	98 8b       	std	Y+16, r25	; 0x10
    3cc0:	8f 87       	std	Y+15, r24	; 0x0f
    3cc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cc4:	98 89       	ldd	r25, Y+16	; 0x10
    3cc6:	01 97       	sbiw	r24, 0x01	; 1
    3cc8:	f1 f7       	brne	.-4      	; 0x3cc6 <USER_Menu+0x408>
    3cca:	98 8b       	std	Y+16, r25	; 0x10
    3ccc:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		Local_u8LEDStatue = SPI_ui8TransmitRecive(DEMAND_RESPONSE);
    3cce:	8f ef       	ldi	r24, 0xFF	; 255
    3cd0:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    3cd4:	8a af       	std	Y+58, r24	; 0x3a
		if(Local_u8LEDStatue == ON_STATUS)
    3cd6:	8a ad       	ldd	r24, Y+58	; 0x3a
    3cd8:	81 30       	cpi	r24, 0x01	; 1
    3cda:	29 f4       	brne	.+10     	; 0x3ce6 <USER_Menu+0x428>
		{
			SEND_A_STRING("LED statue:ON");
    3cdc:	8c ec       	ldi	r24, 0xCC	; 204
    3cde:	91 e0       	ldi	r25, 0x01	; 1
    3ce0:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
    3ce4:	07 c0       	rjmp	.+14     	; 0x3cf4 <USER_Menu+0x436>
		}
		else if(Local_u8LEDStatue == OFF_STATUS)
    3ce6:	8a ad       	ldd	r24, Y+58	; 0x3a
    3ce8:	88 23       	and	r24, r24
    3cea:	21 f4       	brne	.+8      	; 0x3cf4 <USER_Menu+0x436>
		{
			SEND_A_STRING("LED statue:OFF");
    3cec:	8a ed       	ldi	r24, 0xDA	; 218
    3cee:	91 e0       	ldi	r25, 0x01	; 1
    3cf0:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
		}
		LCD_GOTO_XY(1,0);
    3cf4:	81 e0       	ldi	r24, 0x01	; 1
    3cf6:	60 e0       	ldi	r22, 0x00	; 0
    3cf8:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
		SEND_A_STRING("1:ON 2:OFF");
    3cfc:	80 e4       	ldi	r24, 0x40	; 64
    3cfe:	91 e0       	ldi	r25, 0x01	; 1
    3d00:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
		Local_u8KeyPressed = KPD_NOT_PRESSED;
    3d04:	8f ef       	ldi	r24, 0xFF	; 255
    3d06:	8b af       	std	Y+59, r24	; 0x3b
    3d08:	03 c0       	rjmp	.+6      	; 0x3d10 <USER_Menu+0x452>
		while(Local_u8KeyPressed == KPD_NOT_PRESSED)
		{
			Local_u8KeyPressed = KPD_GETKEY();
    3d0a:	0e 94 67 10 	call	0x20ce	; 0x20ce <KPD_GETKEY>
    3d0e:	8b af       	std	Y+59, r24	; 0x3b
			SEND_A_STRING("LED statue:OFF");
		}
		LCD_GOTO_XY(1,0);
		SEND_A_STRING("1:ON 2:OFF");
		Local_u8KeyPressed = KPD_NOT_PRESSED;
		while(Local_u8KeyPressed == KPD_NOT_PRESSED)
    3d10:	8b ad       	ldd	r24, Y+59	; 0x3b
    3d12:	8f 3f       	cpi	r24, 0xFF	; 255
    3d14:	d1 f3       	breq	.-12     	; 0x3d0a <USER_Menu+0x44c>
		{
			Local_u8KeyPressed = KPD_GETKEY();
		}
		if(Local_u8KeyPressed == TURN_ON_LED)
    3d16:	8b ad       	ldd	r24, Y+59	; 0x3b
    3d18:	81 33       	cpi	r24, 0x31	; 49
    3d1a:	21 f4       	brne	.+8      	; 0x3d24 <USER_Menu+0x466>
		{
			SPI_ui8TransmitRecive(ROOM3_TURN_ON);
    3d1c:	83 e2       	ldi	r24, 0x23	; 35
    3d1e:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    3d22:	e7 cd       	rjmp	.-1074   	; 0x38f2 <USER_Menu+0x34>
		}
		else if(Local_u8KeyPressed == TURN_OFF_LED)
    3d24:	8b ad       	ldd	r24, Y+59	; 0x3b
    3d26:	82 33       	cpi	r24, 0x32	; 50
    3d28:	09 f0       	breq	.+2      	; 0x3d2c <USER_Menu+0x46e>
    3d2a:	e3 cd       	rjmp	.-1082   	; 0x38f2 <USER_Menu+0x34>
		{
			SPI_ui8TransmitRecive(ROOM3_TURN_OFF);
    3d2c:	83 e3       	ldi	r24, 0x33	; 51
    3d2e:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    3d32:	df cd       	rjmp	.-1090   	; 0x38f2 <USER_Menu+0x34>
		}
		goto label4;
	}
	else if(Local_u8KeyPressed == CHOOSE_AIRCOND_USER)
    3d34:	8b ad       	ldd	r24, Y+59	; 0x3b
    3d36:	84 33       	cpi	r24, 0x34	; 52
    3d38:	09 f0       	breq	.+2      	; 0x3d3c <USER_Menu+0x47e>
    3d3a:	a8 c0       	rjmp	.+336    	; 0x3e8c <USER_Menu+0x5ce>
	{
		SPI_ui8TransmitRecive(AIR_COND_STATUS);
    3d3c:	84 e1       	ldi	r24, 0x14	; 20
    3d3e:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    3d42:	80 e0       	ldi	r24, 0x00	; 0
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	a8 ec       	ldi	r26, 0xC8	; 200
    3d48:	b2 e4       	ldi	r27, 0x42	; 66
    3d4a:	8b 87       	std	Y+11, r24	; 0x0b
    3d4c:	9c 87       	std	Y+12, r25	; 0x0c
    3d4e:	ad 87       	std	Y+13, r26	; 0x0d
    3d50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d52:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d54:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d56:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d58:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d5a:	20 e0       	ldi	r18, 0x00	; 0
    3d5c:	30 e0       	ldi	r19, 0x00	; 0
    3d5e:	4a ef       	ldi	r20, 0xFA	; 250
    3d60:	54 e4       	ldi	r21, 0x44	; 68
    3d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d66:	dc 01       	movw	r26, r24
    3d68:	cb 01       	movw	r24, r22
    3d6a:	8f 83       	std	Y+7, r24	; 0x07
    3d6c:	98 87       	std	Y+8, r25	; 0x08
    3d6e:	a9 87       	std	Y+9, r26	; 0x09
    3d70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d72:	6f 81       	ldd	r22, Y+7	; 0x07
    3d74:	78 85       	ldd	r23, Y+8	; 0x08
    3d76:	89 85       	ldd	r24, Y+9	; 0x09
    3d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d7a:	20 e0       	ldi	r18, 0x00	; 0
    3d7c:	30 e0       	ldi	r19, 0x00	; 0
    3d7e:	40 e8       	ldi	r20, 0x80	; 128
    3d80:	5f e3       	ldi	r21, 0x3F	; 63
    3d82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d86:	88 23       	and	r24, r24
    3d88:	2c f4       	brge	.+10     	; 0x3d94 <USER_Menu+0x4d6>
		__ticks = 1;
    3d8a:	81 e0       	ldi	r24, 0x01	; 1
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	9e 83       	std	Y+6, r25	; 0x06
    3d90:	8d 83       	std	Y+5, r24	; 0x05
    3d92:	3f c0       	rjmp	.+126    	; 0x3e12 <USER_Menu+0x554>
	else if (__tmp > 65535)
    3d94:	6f 81       	ldd	r22, Y+7	; 0x07
    3d96:	78 85       	ldd	r23, Y+8	; 0x08
    3d98:	89 85       	ldd	r24, Y+9	; 0x09
    3d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d9c:	20 e0       	ldi	r18, 0x00	; 0
    3d9e:	3f ef       	ldi	r19, 0xFF	; 255
    3da0:	4f e7       	ldi	r20, 0x7F	; 127
    3da2:	57 e4       	ldi	r21, 0x47	; 71
    3da4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3da8:	18 16       	cp	r1, r24
    3daa:	4c f5       	brge	.+82     	; 0x3dfe <USER_Menu+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dac:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dae:	7c 85       	ldd	r23, Y+12	; 0x0c
    3db0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3db2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3db4:	20 e0       	ldi	r18, 0x00	; 0
    3db6:	30 e0       	ldi	r19, 0x00	; 0
    3db8:	40 e2       	ldi	r20, 0x20	; 32
    3dba:	51 e4       	ldi	r21, 0x41	; 65
    3dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dc0:	dc 01       	movw	r26, r24
    3dc2:	cb 01       	movw	r24, r22
    3dc4:	bc 01       	movw	r22, r24
    3dc6:	cd 01       	movw	r24, r26
    3dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dcc:	dc 01       	movw	r26, r24
    3dce:	cb 01       	movw	r24, r22
    3dd0:	9e 83       	std	Y+6, r25	; 0x06
    3dd2:	8d 83       	std	Y+5, r24	; 0x05
    3dd4:	0f c0       	rjmp	.+30     	; 0x3df4 <USER_Menu+0x536>
    3dd6:	88 ec       	ldi	r24, 0xC8	; 200
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	9c 83       	std	Y+4, r25	; 0x04
    3ddc:	8b 83       	std	Y+3, r24	; 0x03
    3dde:	8b 81       	ldd	r24, Y+3	; 0x03
    3de0:	9c 81       	ldd	r25, Y+4	; 0x04
    3de2:	01 97       	sbiw	r24, 0x01	; 1
    3de4:	f1 f7       	brne	.-4      	; 0x3de2 <USER_Menu+0x524>
    3de6:	9c 83       	std	Y+4, r25	; 0x04
    3de8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dea:	8d 81       	ldd	r24, Y+5	; 0x05
    3dec:	9e 81       	ldd	r25, Y+6	; 0x06
    3dee:	01 97       	sbiw	r24, 0x01	; 1
    3df0:	9e 83       	std	Y+6, r25	; 0x06
    3df2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3df4:	8d 81       	ldd	r24, Y+5	; 0x05
    3df6:	9e 81       	ldd	r25, Y+6	; 0x06
    3df8:	00 97       	sbiw	r24, 0x00	; 0
    3dfa:	69 f7       	brne	.-38     	; 0x3dd6 <USER_Menu+0x518>
    3dfc:	14 c0       	rjmp	.+40     	; 0x3e26 <USER_Menu+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    3e00:	78 85       	ldd	r23, Y+8	; 0x08
    3e02:	89 85       	ldd	r24, Y+9	; 0x09
    3e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e0a:	dc 01       	movw	r26, r24
    3e0c:	cb 01       	movw	r24, r22
    3e0e:	9e 83       	std	Y+6, r25	; 0x06
    3e10:	8d 83       	std	Y+5, r24	; 0x05
    3e12:	8d 81       	ldd	r24, Y+5	; 0x05
    3e14:	9e 81       	ldd	r25, Y+6	; 0x06
    3e16:	9a 83       	std	Y+2, r25	; 0x02
    3e18:	89 83       	std	Y+1, r24	; 0x01
    3e1a:	89 81       	ldd	r24, Y+1	; 0x01
    3e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e1e:	01 97       	sbiw	r24, 0x01	; 1
    3e20:	f1 f7       	brne	.-4      	; 0x3e1e <USER_Menu+0x560>
    3e22:	9a 83       	std	Y+2, r25	; 0x02
    3e24:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);
		Local_u8AirCondStatue = SPI_ui8TransmitRecive(DEMAND_RESPONSE);
    3e26:	8f ef       	ldi	r24, 0xFF	; 255
    3e28:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    3e2c:	89 af       	std	Y+57, r24	; 0x39
		if(Local_u8AirCondStatue == ON_STATUS)
    3e2e:	89 ad       	ldd	r24, Y+57	; 0x39
    3e30:	81 30       	cpi	r24, 0x01	; 1
    3e32:	29 f4       	brne	.+10     	; 0x3e3e <USER_Menu+0x580>
		{
			SEND_A_STRING("A.C statue:ON");
    3e34:	87 e6       	ldi	r24, 0x67	; 103
    3e36:	91 e0       	ldi	r25, 0x01	; 1
    3e38:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
    3e3c:	07 c0       	rjmp	.+14     	; 0x3e4c <USER_Menu+0x58e>
		}
		else if(Local_u8AirCondStatue == OFF_STATUS)
    3e3e:	89 ad       	ldd	r24, Y+57	; 0x39
    3e40:	88 23       	and	r24, r24
    3e42:	21 f4       	brne	.+8      	; 0x3e4c <USER_Menu+0x58e>
		{
			SEND_A_STRING("A.C statue:OFF");
    3e44:	85 e7       	ldi	r24, 0x75	; 117
    3e46:	91 e0       	ldi	r25, 0x01	; 1
    3e48:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
		}
		LCD_GOTO_XY(1,0);
    3e4c:	81 e0       	ldi	r24, 0x01	; 1
    3e4e:	60 e0       	ldi	r22, 0x00	; 0
    3e50:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <LCD_GOTO_XY>
		SEND_A_STRING("1:ON 2:OFF");
    3e54:	80 e4       	ldi	r24, 0x40	; 64
    3e56:	91 e0       	ldi	r25, 0x01	; 1
    3e58:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <SEND_A_STRING>
		Local_u8KeyPressed = KPD_NOT_PRESSED;
    3e5c:	8f ef       	ldi	r24, 0xFF	; 255
    3e5e:	8b af       	std	Y+59, r24	; 0x3b
    3e60:	03 c0       	rjmp	.+6      	; 0x3e68 <USER_Menu+0x5aa>
		while(Local_u8KeyPressed == KPD_NOT_PRESSED)
		{
			Local_u8KeyPressed = KPD_GETKEY();
    3e62:	0e 94 67 10 	call	0x20ce	; 0x20ce <KPD_GETKEY>
    3e66:	8b af       	std	Y+59, r24	; 0x3b
			SEND_A_STRING("A.C statue:OFF");
		}
		LCD_GOTO_XY(1,0);
		SEND_A_STRING("1:ON 2:OFF");
		Local_u8KeyPressed = KPD_NOT_PRESSED;
		while(Local_u8KeyPressed == KPD_NOT_PRESSED)
    3e68:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e6a:	8f 3f       	cpi	r24, 0xFF	; 255
    3e6c:	d1 f3       	breq	.-12     	; 0x3e62 <USER_Menu+0x5a4>
		{
			Local_u8KeyPressed = KPD_GETKEY();
		}
		if(Local_u8KeyPressed == TURN_ON_AC)
    3e6e:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e70:	81 33       	cpi	r24, 0x31	; 49
    3e72:	21 f4       	brne	.+8      	; 0x3e7c <USER_Menu+0x5be>
		{
			SPI_ui8TransmitRecive(AIR_COND_TURN_ON);
    3e74:	84 e2       	ldi	r24, 0x24	; 36
    3e76:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    3e7a:	3b cd       	rjmp	.-1418   	; 0x38f2 <USER_Menu+0x34>
		}
		else if(Local_u8KeyPressed == TURN_OFF_AC)
    3e7c:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e7e:	82 33       	cpi	r24, 0x32	; 50
    3e80:	09 f0       	breq	.+2      	; 0x3e84 <USER_Menu+0x5c6>
    3e82:	37 cd       	rjmp	.-1426   	; 0x38f2 <USER_Menu+0x34>
		{
			SPI_ui8TransmitRecive(AIR_COND_TURN_OFF);
    3e84:	84 e3       	ldi	r24, 0x34	; 52
    3e86:	0e 94 8f 08 	call	0x111e	; 0x111e <SPI_ui8TransmitRecive>
    3e8a:	33 cd       	rjmp	.-1434   	; 0x38f2 <USER_Menu+0x34>
		}
		goto label4;
	}
}
    3e8c:	eb 96       	adiw	r28, 0x3b	; 59
    3e8e:	0f b6       	in	r0, 0x3f	; 63
    3e90:	f8 94       	cli
    3e92:	de bf       	out	0x3e, r29	; 62
    3e94:	0f be       	out	0x3f, r0	; 63
    3e96:	cd bf       	out	0x3d, r28	; 61
    3e98:	cf 91       	pop	r28
    3e9a:	df 91       	pop	r29
    3e9c:	08 95       	ret

00003e9e <__prologue_saves__>:
    3e9e:	2f 92       	push	r2
    3ea0:	3f 92       	push	r3
    3ea2:	4f 92       	push	r4
    3ea4:	5f 92       	push	r5
    3ea6:	6f 92       	push	r6
    3ea8:	7f 92       	push	r7
    3eaa:	8f 92       	push	r8
    3eac:	9f 92       	push	r9
    3eae:	af 92       	push	r10
    3eb0:	bf 92       	push	r11
    3eb2:	cf 92       	push	r12
    3eb4:	df 92       	push	r13
    3eb6:	ef 92       	push	r14
    3eb8:	ff 92       	push	r15
    3eba:	0f 93       	push	r16
    3ebc:	1f 93       	push	r17
    3ebe:	cf 93       	push	r28
    3ec0:	df 93       	push	r29
    3ec2:	cd b7       	in	r28, 0x3d	; 61
    3ec4:	de b7       	in	r29, 0x3e	; 62
    3ec6:	ca 1b       	sub	r28, r26
    3ec8:	db 0b       	sbc	r29, r27
    3eca:	0f b6       	in	r0, 0x3f	; 63
    3ecc:	f8 94       	cli
    3ece:	de bf       	out	0x3e, r29	; 62
    3ed0:	0f be       	out	0x3f, r0	; 63
    3ed2:	cd bf       	out	0x3d, r28	; 61
    3ed4:	09 94       	ijmp

00003ed6 <__epilogue_restores__>:
    3ed6:	2a 88       	ldd	r2, Y+18	; 0x12
    3ed8:	39 88       	ldd	r3, Y+17	; 0x11
    3eda:	48 88       	ldd	r4, Y+16	; 0x10
    3edc:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ede:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ee0:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ee2:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ee4:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ee6:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ee8:	b9 84       	ldd	r11, Y+9	; 0x09
    3eea:	c8 84       	ldd	r12, Y+8	; 0x08
    3eec:	df 80       	ldd	r13, Y+7	; 0x07
    3eee:	ee 80       	ldd	r14, Y+6	; 0x06
    3ef0:	fd 80       	ldd	r15, Y+5	; 0x05
    3ef2:	0c 81       	ldd	r16, Y+4	; 0x04
    3ef4:	1b 81       	ldd	r17, Y+3	; 0x03
    3ef6:	aa 81       	ldd	r26, Y+2	; 0x02
    3ef8:	b9 81       	ldd	r27, Y+1	; 0x01
    3efa:	ce 0f       	add	r28, r30
    3efc:	d1 1d       	adc	r29, r1
    3efe:	0f b6       	in	r0, 0x3f	; 63
    3f00:	f8 94       	cli
    3f02:	de bf       	out	0x3e, r29	; 62
    3f04:	0f be       	out	0x3f, r0	; 63
    3f06:	cd bf       	out	0x3d, r28	; 61
    3f08:	ed 01       	movw	r28, r26
    3f0a:	08 95       	ret

00003f0c <sprintf>:
    3f0c:	ae e0       	ldi	r26, 0x0E	; 14
    3f0e:	b0 e0       	ldi	r27, 0x00	; 0
    3f10:	ec e8       	ldi	r30, 0x8C	; 140
    3f12:	ff e1       	ldi	r31, 0x1F	; 31
    3f14:	0c 94 5d 1f 	jmp	0x3eba	; 0x3eba <__prologue_saves__+0x1c>
    3f18:	0d 89       	ldd	r16, Y+21	; 0x15
    3f1a:	1e 89       	ldd	r17, Y+22	; 0x16
    3f1c:	86 e0       	ldi	r24, 0x06	; 6
    3f1e:	8c 83       	std	Y+4, r24	; 0x04
    3f20:	1a 83       	std	Y+2, r17	; 0x02
    3f22:	09 83       	std	Y+1, r16	; 0x01
    3f24:	8f ef       	ldi	r24, 0xFF	; 255
    3f26:	9f e7       	ldi	r25, 0x7F	; 127
    3f28:	9e 83       	std	Y+6, r25	; 0x06
    3f2a:	8d 83       	std	Y+5, r24	; 0x05
    3f2c:	9e 01       	movw	r18, r28
    3f2e:	27 5e       	subi	r18, 0xE7	; 231
    3f30:	3f 4f       	sbci	r19, 0xFF	; 255
    3f32:	ce 01       	movw	r24, r28
    3f34:	01 96       	adiw	r24, 0x01	; 1
    3f36:	6f 89       	ldd	r22, Y+23	; 0x17
    3f38:	78 8d       	ldd	r23, Y+24	; 0x18
    3f3a:	a9 01       	movw	r20, r18
    3f3c:	0e 94 aa 1f 	call	0x3f54	; 0x3f54 <vfprintf>
    3f40:	2f 81       	ldd	r18, Y+7	; 0x07
    3f42:	38 85       	ldd	r19, Y+8	; 0x08
    3f44:	02 0f       	add	r16, r18
    3f46:	13 1f       	adc	r17, r19
    3f48:	f8 01       	movw	r30, r16
    3f4a:	10 82       	st	Z, r1
    3f4c:	2e 96       	adiw	r28, 0x0e	; 14
    3f4e:	e4 e0       	ldi	r30, 0x04	; 4
    3f50:	0c 94 79 1f 	jmp	0x3ef2	; 0x3ef2 <__epilogue_restores__+0x1c>

00003f54 <vfprintf>:
    3f54:	ab e0       	ldi	r26, 0x0B	; 11
    3f56:	b0 e0       	ldi	r27, 0x00	; 0
    3f58:	e0 eb       	ldi	r30, 0xB0	; 176
    3f5a:	ff e1       	ldi	r31, 0x1F	; 31
    3f5c:	0c 94 4f 1f 	jmp	0x3e9e	; 0x3e9e <__prologue_saves__>
    3f60:	3c 01       	movw	r6, r24
    3f62:	2b 01       	movw	r4, r22
    3f64:	5a 01       	movw	r10, r20
    3f66:	fc 01       	movw	r30, r24
    3f68:	17 82       	std	Z+7, r1	; 0x07
    3f6a:	16 82       	std	Z+6, r1	; 0x06
    3f6c:	83 81       	ldd	r24, Z+3	; 0x03
    3f6e:	81 fd       	sbrc	r24, 1
    3f70:	03 c0       	rjmp	.+6      	; 0x3f78 <vfprintf+0x24>
    3f72:	6f ef       	ldi	r22, 0xFF	; 255
    3f74:	7f ef       	ldi	r23, 0xFF	; 255
    3f76:	c6 c1       	rjmp	.+908    	; 0x4304 <vfprintf+0x3b0>
    3f78:	9a e0       	ldi	r25, 0x0A	; 10
    3f7a:	89 2e       	mov	r8, r25
    3f7c:	1e 01       	movw	r2, r28
    3f7e:	08 94       	sec
    3f80:	21 1c       	adc	r2, r1
    3f82:	31 1c       	adc	r3, r1
    3f84:	f3 01       	movw	r30, r6
    3f86:	23 81       	ldd	r18, Z+3	; 0x03
    3f88:	f2 01       	movw	r30, r4
    3f8a:	23 fd       	sbrc	r18, 3
    3f8c:	85 91       	lpm	r24, Z+
    3f8e:	23 ff       	sbrs	r18, 3
    3f90:	81 91       	ld	r24, Z+
    3f92:	2f 01       	movw	r4, r30
    3f94:	88 23       	and	r24, r24
    3f96:	09 f4       	brne	.+2      	; 0x3f9a <vfprintf+0x46>
    3f98:	b2 c1       	rjmp	.+868    	; 0x42fe <vfprintf+0x3aa>
    3f9a:	85 32       	cpi	r24, 0x25	; 37
    3f9c:	39 f4       	brne	.+14     	; 0x3fac <vfprintf+0x58>
    3f9e:	23 fd       	sbrc	r18, 3
    3fa0:	85 91       	lpm	r24, Z+
    3fa2:	23 ff       	sbrs	r18, 3
    3fa4:	81 91       	ld	r24, Z+
    3fa6:	2f 01       	movw	r4, r30
    3fa8:	85 32       	cpi	r24, 0x25	; 37
    3faa:	29 f4       	brne	.+10     	; 0x3fb6 <vfprintf+0x62>
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	b3 01       	movw	r22, r6
    3fb0:	0e 94 9d 21 	call	0x433a	; 0x433a <fputc>
    3fb4:	e7 cf       	rjmp	.-50     	; 0x3f84 <vfprintf+0x30>
    3fb6:	98 2f       	mov	r25, r24
    3fb8:	ff 24       	eor	r15, r15
    3fba:	ee 24       	eor	r14, r14
    3fbc:	99 24       	eor	r9, r9
    3fbe:	ff e1       	ldi	r31, 0x1F	; 31
    3fc0:	ff 15       	cp	r31, r15
    3fc2:	d0 f0       	brcs	.+52     	; 0x3ff8 <vfprintf+0xa4>
    3fc4:	9b 32       	cpi	r25, 0x2B	; 43
    3fc6:	69 f0       	breq	.+26     	; 0x3fe2 <vfprintf+0x8e>
    3fc8:	9c 32       	cpi	r25, 0x2C	; 44
    3fca:	28 f4       	brcc	.+10     	; 0x3fd6 <vfprintf+0x82>
    3fcc:	90 32       	cpi	r25, 0x20	; 32
    3fce:	59 f0       	breq	.+22     	; 0x3fe6 <vfprintf+0x92>
    3fd0:	93 32       	cpi	r25, 0x23	; 35
    3fd2:	91 f4       	brne	.+36     	; 0x3ff8 <vfprintf+0xa4>
    3fd4:	0e c0       	rjmp	.+28     	; 0x3ff2 <vfprintf+0x9e>
    3fd6:	9d 32       	cpi	r25, 0x2D	; 45
    3fd8:	49 f0       	breq	.+18     	; 0x3fec <vfprintf+0x98>
    3fda:	90 33       	cpi	r25, 0x30	; 48
    3fdc:	69 f4       	brne	.+26     	; 0x3ff8 <vfprintf+0xa4>
    3fde:	41 e0       	ldi	r20, 0x01	; 1
    3fe0:	24 c0       	rjmp	.+72     	; 0x402a <vfprintf+0xd6>
    3fe2:	52 e0       	ldi	r21, 0x02	; 2
    3fe4:	f5 2a       	or	r15, r21
    3fe6:	84 e0       	ldi	r24, 0x04	; 4
    3fe8:	f8 2a       	or	r15, r24
    3fea:	28 c0       	rjmp	.+80     	; 0x403c <vfprintf+0xe8>
    3fec:	98 e0       	ldi	r25, 0x08	; 8
    3fee:	f9 2a       	or	r15, r25
    3ff0:	25 c0       	rjmp	.+74     	; 0x403c <vfprintf+0xe8>
    3ff2:	e0 e1       	ldi	r30, 0x10	; 16
    3ff4:	fe 2a       	or	r15, r30
    3ff6:	22 c0       	rjmp	.+68     	; 0x403c <vfprintf+0xe8>
    3ff8:	f7 fc       	sbrc	r15, 7
    3ffa:	29 c0       	rjmp	.+82     	; 0x404e <vfprintf+0xfa>
    3ffc:	89 2f       	mov	r24, r25
    3ffe:	80 53       	subi	r24, 0x30	; 48
    4000:	8a 30       	cpi	r24, 0x0A	; 10
    4002:	70 f4       	brcc	.+28     	; 0x4020 <vfprintf+0xcc>
    4004:	f6 fe       	sbrs	r15, 6
    4006:	05 c0       	rjmp	.+10     	; 0x4012 <vfprintf+0xbe>
    4008:	98 9c       	mul	r9, r8
    400a:	90 2c       	mov	r9, r0
    400c:	11 24       	eor	r1, r1
    400e:	98 0e       	add	r9, r24
    4010:	15 c0       	rjmp	.+42     	; 0x403c <vfprintf+0xe8>
    4012:	e8 9c       	mul	r14, r8
    4014:	e0 2c       	mov	r14, r0
    4016:	11 24       	eor	r1, r1
    4018:	e8 0e       	add	r14, r24
    401a:	f0 e2       	ldi	r31, 0x20	; 32
    401c:	ff 2a       	or	r15, r31
    401e:	0e c0       	rjmp	.+28     	; 0x403c <vfprintf+0xe8>
    4020:	9e 32       	cpi	r25, 0x2E	; 46
    4022:	29 f4       	brne	.+10     	; 0x402e <vfprintf+0xda>
    4024:	f6 fc       	sbrc	r15, 6
    4026:	6b c1       	rjmp	.+726    	; 0x42fe <vfprintf+0x3aa>
    4028:	40 e4       	ldi	r20, 0x40	; 64
    402a:	f4 2a       	or	r15, r20
    402c:	07 c0       	rjmp	.+14     	; 0x403c <vfprintf+0xe8>
    402e:	9c 36       	cpi	r25, 0x6C	; 108
    4030:	19 f4       	brne	.+6      	; 0x4038 <vfprintf+0xe4>
    4032:	50 e8       	ldi	r21, 0x80	; 128
    4034:	f5 2a       	or	r15, r21
    4036:	02 c0       	rjmp	.+4      	; 0x403c <vfprintf+0xe8>
    4038:	98 36       	cpi	r25, 0x68	; 104
    403a:	49 f4       	brne	.+18     	; 0x404e <vfprintf+0xfa>
    403c:	f2 01       	movw	r30, r4
    403e:	23 fd       	sbrc	r18, 3
    4040:	95 91       	lpm	r25, Z+
    4042:	23 ff       	sbrs	r18, 3
    4044:	91 91       	ld	r25, Z+
    4046:	2f 01       	movw	r4, r30
    4048:	99 23       	and	r25, r25
    404a:	09 f0       	breq	.+2      	; 0x404e <vfprintf+0xfa>
    404c:	b8 cf       	rjmp	.-144    	; 0x3fbe <vfprintf+0x6a>
    404e:	89 2f       	mov	r24, r25
    4050:	85 54       	subi	r24, 0x45	; 69
    4052:	83 30       	cpi	r24, 0x03	; 3
    4054:	18 f0       	brcs	.+6      	; 0x405c <vfprintf+0x108>
    4056:	80 52       	subi	r24, 0x20	; 32
    4058:	83 30       	cpi	r24, 0x03	; 3
    405a:	38 f4       	brcc	.+14     	; 0x406a <vfprintf+0x116>
    405c:	44 e0       	ldi	r20, 0x04	; 4
    405e:	50 e0       	ldi	r21, 0x00	; 0
    4060:	a4 0e       	add	r10, r20
    4062:	b5 1e       	adc	r11, r21
    4064:	5f e3       	ldi	r21, 0x3F	; 63
    4066:	59 83       	std	Y+1, r21	; 0x01
    4068:	0f c0       	rjmp	.+30     	; 0x4088 <vfprintf+0x134>
    406a:	93 36       	cpi	r25, 0x63	; 99
    406c:	31 f0       	breq	.+12     	; 0x407a <vfprintf+0x126>
    406e:	93 37       	cpi	r25, 0x73	; 115
    4070:	79 f0       	breq	.+30     	; 0x4090 <vfprintf+0x13c>
    4072:	93 35       	cpi	r25, 0x53	; 83
    4074:	09 f0       	breq	.+2      	; 0x4078 <vfprintf+0x124>
    4076:	56 c0       	rjmp	.+172    	; 0x4124 <vfprintf+0x1d0>
    4078:	20 c0       	rjmp	.+64     	; 0x40ba <vfprintf+0x166>
    407a:	f5 01       	movw	r30, r10
    407c:	80 81       	ld	r24, Z
    407e:	89 83       	std	Y+1, r24	; 0x01
    4080:	42 e0       	ldi	r20, 0x02	; 2
    4082:	50 e0       	ldi	r21, 0x00	; 0
    4084:	a4 0e       	add	r10, r20
    4086:	b5 1e       	adc	r11, r21
    4088:	61 01       	movw	r12, r2
    408a:	01 e0       	ldi	r16, 0x01	; 1
    408c:	10 e0       	ldi	r17, 0x00	; 0
    408e:	12 c0       	rjmp	.+36     	; 0x40b4 <vfprintf+0x160>
    4090:	f5 01       	movw	r30, r10
    4092:	c0 80       	ld	r12, Z
    4094:	d1 80       	ldd	r13, Z+1	; 0x01
    4096:	f6 fc       	sbrc	r15, 6
    4098:	03 c0       	rjmp	.+6      	; 0x40a0 <vfprintf+0x14c>
    409a:	6f ef       	ldi	r22, 0xFF	; 255
    409c:	7f ef       	ldi	r23, 0xFF	; 255
    409e:	02 c0       	rjmp	.+4      	; 0x40a4 <vfprintf+0x150>
    40a0:	69 2d       	mov	r22, r9
    40a2:	70 e0       	ldi	r23, 0x00	; 0
    40a4:	42 e0       	ldi	r20, 0x02	; 2
    40a6:	50 e0       	ldi	r21, 0x00	; 0
    40a8:	a4 0e       	add	r10, r20
    40aa:	b5 1e       	adc	r11, r21
    40ac:	c6 01       	movw	r24, r12
    40ae:	0e 94 92 21 	call	0x4324	; 0x4324 <strnlen>
    40b2:	8c 01       	movw	r16, r24
    40b4:	5f e7       	ldi	r21, 0x7F	; 127
    40b6:	f5 22       	and	r15, r21
    40b8:	14 c0       	rjmp	.+40     	; 0x40e2 <vfprintf+0x18e>
    40ba:	f5 01       	movw	r30, r10
    40bc:	c0 80       	ld	r12, Z
    40be:	d1 80       	ldd	r13, Z+1	; 0x01
    40c0:	f6 fc       	sbrc	r15, 6
    40c2:	03 c0       	rjmp	.+6      	; 0x40ca <vfprintf+0x176>
    40c4:	6f ef       	ldi	r22, 0xFF	; 255
    40c6:	7f ef       	ldi	r23, 0xFF	; 255
    40c8:	02 c0       	rjmp	.+4      	; 0x40ce <vfprintf+0x17a>
    40ca:	69 2d       	mov	r22, r9
    40cc:	70 e0       	ldi	r23, 0x00	; 0
    40ce:	42 e0       	ldi	r20, 0x02	; 2
    40d0:	50 e0       	ldi	r21, 0x00	; 0
    40d2:	a4 0e       	add	r10, r20
    40d4:	b5 1e       	adc	r11, r21
    40d6:	c6 01       	movw	r24, r12
    40d8:	0e 94 87 21 	call	0x430e	; 0x430e <strnlen_P>
    40dc:	8c 01       	movw	r16, r24
    40de:	50 e8       	ldi	r21, 0x80	; 128
    40e0:	f5 2a       	or	r15, r21
    40e2:	f3 fe       	sbrs	r15, 3
    40e4:	07 c0       	rjmp	.+14     	; 0x40f4 <vfprintf+0x1a0>
    40e6:	1a c0       	rjmp	.+52     	; 0x411c <vfprintf+0x1c8>
    40e8:	80 e2       	ldi	r24, 0x20	; 32
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	b3 01       	movw	r22, r6
    40ee:	0e 94 9d 21 	call	0x433a	; 0x433a <fputc>
    40f2:	ea 94       	dec	r14
    40f4:	8e 2d       	mov	r24, r14
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	08 17       	cp	r16, r24
    40fa:	19 07       	cpc	r17, r25
    40fc:	a8 f3       	brcs	.-22     	; 0x40e8 <vfprintf+0x194>
    40fe:	0e c0       	rjmp	.+28     	; 0x411c <vfprintf+0x1c8>
    4100:	f6 01       	movw	r30, r12
    4102:	f7 fc       	sbrc	r15, 7
    4104:	85 91       	lpm	r24, Z+
    4106:	f7 fe       	sbrs	r15, 7
    4108:	81 91       	ld	r24, Z+
    410a:	6f 01       	movw	r12, r30
    410c:	90 e0       	ldi	r25, 0x00	; 0
    410e:	b3 01       	movw	r22, r6
    4110:	0e 94 9d 21 	call	0x433a	; 0x433a <fputc>
    4114:	e1 10       	cpse	r14, r1
    4116:	ea 94       	dec	r14
    4118:	01 50       	subi	r16, 0x01	; 1
    411a:	10 40       	sbci	r17, 0x00	; 0
    411c:	01 15       	cp	r16, r1
    411e:	11 05       	cpc	r17, r1
    4120:	79 f7       	brne	.-34     	; 0x4100 <vfprintf+0x1ac>
    4122:	ea c0       	rjmp	.+468    	; 0x42f8 <vfprintf+0x3a4>
    4124:	94 36       	cpi	r25, 0x64	; 100
    4126:	11 f0       	breq	.+4      	; 0x412c <vfprintf+0x1d8>
    4128:	99 36       	cpi	r25, 0x69	; 105
    412a:	69 f5       	brne	.+90     	; 0x4186 <vfprintf+0x232>
    412c:	f7 fe       	sbrs	r15, 7
    412e:	08 c0       	rjmp	.+16     	; 0x4140 <vfprintf+0x1ec>
    4130:	f5 01       	movw	r30, r10
    4132:	20 81       	ld	r18, Z
    4134:	31 81       	ldd	r19, Z+1	; 0x01
    4136:	42 81       	ldd	r20, Z+2	; 0x02
    4138:	53 81       	ldd	r21, Z+3	; 0x03
    413a:	84 e0       	ldi	r24, 0x04	; 4
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	0a c0       	rjmp	.+20     	; 0x4154 <vfprintf+0x200>
    4140:	f5 01       	movw	r30, r10
    4142:	80 81       	ld	r24, Z
    4144:	91 81       	ldd	r25, Z+1	; 0x01
    4146:	9c 01       	movw	r18, r24
    4148:	44 27       	eor	r20, r20
    414a:	37 fd       	sbrc	r19, 7
    414c:	40 95       	com	r20
    414e:	54 2f       	mov	r21, r20
    4150:	82 e0       	ldi	r24, 0x02	; 2
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	a8 0e       	add	r10, r24
    4156:	b9 1e       	adc	r11, r25
    4158:	9f e6       	ldi	r25, 0x6F	; 111
    415a:	f9 22       	and	r15, r25
    415c:	57 ff       	sbrs	r21, 7
    415e:	09 c0       	rjmp	.+18     	; 0x4172 <vfprintf+0x21e>
    4160:	50 95       	com	r21
    4162:	40 95       	com	r20
    4164:	30 95       	com	r19
    4166:	21 95       	neg	r18
    4168:	3f 4f       	sbci	r19, 0xFF	; 255
    416a:	4f 4f       	sbci	r20, 0xFF	; 255
    416c:	5f 4f       	sbci	r21, 0xFF	; 255
    416e:	e0 e8       	ldi	r30, 0x80	; 128
    4170:	fe 2a       	or	r15, r30
    4172:	ca 01       	movw	r24, r20
    4174:	b9 01       	movw	r22, r18
    4176:	a1 01       	movw	r20, r2
    4178:	2a e0       	ldi	r18, 0x0A	; 10
    417a:	30 e0       	ldi	r19, 0x00	; 0
    417c:	0e 94 c9 21 	call	0x4392	; 0x4392 <__ultoa_invert>
    4180:	d8 2e       	mov	r13, r24
    4182:	d2 18       	sub	r13, r2
    4184:	40 c0       	rjmp	.+128    	; 0x4206 <vfprintf+0x2b2>
    4186:	95 37       	cpi	r25, 0x75	; 117
    4188:	29 f4       	brne	.+10     	; 0x4194 <vfprintf+0x240>
    418a:	1f 2d       	mov	r17, r15
    418c:	1f 7e       	andi	r17, 0xEF	; 239
    418e:	2a e0       	ldi	r18, 0x0A	; 10
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	1d c0       	rjmp	.+58     	; 0x41ce <vfprintf+0x27a>
    4194:	1f 2d       	mov	r17, r15
    4196:	19 7f       	andi	r17, 0xF9	; 249
    4198:	9f 36       	cpi	r25, 0x6F	; 111
    419a:	61 f0       	breq	.+24     	; 0x41b4 <vfprintf+0x260>
    419c:	90 37       	cpi	r25, 0x70	; 112
    419e:	20 f4       	brcc	.+8      	; 0x41a8 <vfprintf+0x254>
    41a0:	98 35       	cpi	r25, 0x58	; 88
    41a2:	09 f0       	breq	.+2      	; 0x41a6 <vfprintf+0x252>
    41a4:	ac c0       	rjmp	.+344    	; 0x42fe <vfprintf+0x3aa>
    41a6:	0f c0       	rjmp	.+30     	; 0x41c6 <vfprintf+0x272>
    41a8:	90 37       	cpi	r25, 0x70	; 112
    41aa:	39 f0       	breq	.+14     	; 0x41ba <vfprintf+0x266>
    41ac:	98 37       	cpi	r25, 0x78	; 120
    41ae:	09 f0       	breq	.+2      	; 0x41b2 <vfprintf+0x25e>
    41b0:	a6 c0       	rjmp	.+332    	; 0x42fe <vfprintf+0x3aa>
    41b2:	04 c0       	rjmp	.+8      	; 0x41bc <vfprintf+0x268>
    41b4:	28 e0       	ldi	r18, 0x08	; 8
    41b6:	30 e0       	ldi	r19, 0x00	; 0
    41b8:	0a c0       	rjmp	.+20     	; 0x41ce <vfprintf+0x27a>
    41ba:	10 61       	ori	r17, 0x10	; 16
    41bc:	14 fd       	sbrc	r17, 4
    41be:	14 60       	ori	r17, 0x04	; 4
    41c0:	20 e1       	ldi	r18, 0x10	; 16
    41c2:	30 e0       	ldi	r19, 0x00	; 0
    41c4:	04 c0       	rjmp	.+8      	; 0x41ce <vfprintf+0x27a>
    41c6:	14 fd       	sbrc	r17, 4
    41c8:	16 60       	ori	r17, 0x06	; 6
    41ca:	20 e1       	ldi	r18, 0x10	; 16
    41cc:	32 e0       	ldi	r19, 0x02	; 2
    41ce:	17 ff       	sbrs	r17, 7
    41d0:	08 c0       	rjmp	.+16     	; 0x41e2 <vfprintf+0x28e>
    41d2:	f5 01       	movw	r30, r10
    41d4:	60 81       	ld	r22, Z
    41d6:	71 81       	ldd	r23, Z+1	; 0x01
    41d8:	82 81       	ldd	r24, Z+2	; 0x02
    41da:	93 81       	ldd	r25, Z+3	; 0x03
    41dc:	44 e0       	ldi	r20, 0x04	; 4
    41de:	50 e0       	ldi	r21, 0x00	; 0
    41e0:	08 c0       	rjmp	.+16     	; 0x41f2 <vfprintf+0x29e>
    41e2:	f5 01       	movw	r30, r10
    41e4:	80 81       	ld	r24, Z
    41e6:	91 81       	ldd	r25, Z+1	; 0x01
    41e8:	bc 01       	movw	r22, r24
    41ea:	80 e0       	ldi	r24, 0x00	; 0
    41ec:	90 e0       	ldi	r25, 0x00	; 0
    41ee:	42 e0       	ldi	r20, 0x02	; 2
    41f0:	50 e0       	ldi	r21, 0x00	; 0
    41f2:	a4 0e       	add	r10, r20
    41f4:	b5 1e       	adc	r11, r21
    41f6:	a1 01       	movw	r20, r2
    41f8:	0e 94 c9 21 	call	0x4392	; 0x4392 <__ultoa_invert>
    41fc:	d8 2e       	mov	r13, r24
    41fe:	d2 18       	sub	r13, r2
    4200:	8f e7       	ldi	r24, 0x7F	; 127
    4202:	f8 2e       	mov	r15, r24
    4204:	f1 22       	and	r15, r17
    4206:	f6 fe       	sbrs	r15, 6
    4208:	0b c0       	rjmp	.+22     	; 0x4220 <vfprintf+0x2cc>
    420a:	5e ef       	ldi	r21, 0xFE	; 254
    420c:	f5 22       	and	r15, r21
    420e:	d9 14       	cp	r13, r9
    4210:	38 f4       	brcc	.+14     	; 0x4220 <vfprintf+0x2cc>
    4212:	f4 fe       	sbrs	r15, 4
    4214:	07 c0       	rjmp	.+14     	; 0x4224 <vfprintf+0x2d0>
    4216:	f2 fc       	sbrc	r15, 2
    4218:	05 c0       	rjmp	.+10     	; 0x4224 <vfprintf+0x2d0>
    421a:	8f ee       	ldi	r24, 0xEF	; 239
    421c:	f8 22       	and	r15, r24
    421e:	02 c0       	rjmp	.+4      	; 0x4224 <vfprintf+0x2d0>
    4220:	1d 2d       	mov	r17, r13
    4222:	01 c0       	rjmp	.+2      	; 0x4226 <vfprintf+0x2d2>
    4224:	19 2d       	mov	r17, r9
    4226:	f4 fe       	sbrs	r15, 4
    4228:	0d c0       	rjmp	.+26     	; 0x4244 <vfprintf+0x2f0>
    422a:	fe 01       	movw	r30, r28
    422c:	ed 0d       	add	r30, r13
    422e:	f1 1d       	adc	r31, r1
    4230:	80 81       	ld	r24, Z
    4232:	80 33       	cpi	r24, 0x30	; 48
    4234:	19 f4       	brne	.+6      	; 0x423c <vfprintf+0x2e8>
    4236:	99 ee       	ldi	r25, 0xE9	; 233
    4238:	f9 22       	and	r15, r25
    423a:	08 c0       	rjmp	.+16     	; 0x424c <vfprintf+0x2f8>
    423c:	1f 5f       	subi	r17, 0xFF	; 255
    423e:	f2 fe       	sbrs	r15, 2
    4240:	05 c0       	rjmp	.+10     	; 0x424c <vfprintf+0x2f8>
    4242:	03 c0       	rjmp	.+6      	; 0x424a <vfprintf+0x2f6>
    4244:	8f 2d       	mov	r24, r15
    4246:	86 78       	andi	r24, 0x86	; 134
    4248:	09 f0       	breq	.+2      	; 0x424c <vfprintf+0x2f8>
    424a:	1f 5f       	subi	r17, 0xFF	; 255
    424c:	0f 2d       	mov	r16, r15
    424e:	f3 fc       	sbrc	r15, 3
    4250:	14 c0       	rjmp	.+40     	; 0x427a <vfprintf+0x326>
    4252:	f0 fe       	sbrs	r15, 0
    4254:	0f c0       	rjmp	.+30     	; 0x4274 <vfprintf+0x320>
    4256:	1e 15       	cp	r17, r14
    4258:	10 f0       	brcs	.+4      	; 0x425e <vfprintf+0x30a>
    425a:	9d 2c       	mov	r9, r13
    425c:	0b c0       	rjmp	.+22     	; 0x4274 <vfprintf+0x320>
    425e:	9d 2c       	mov	r9, r13
    4260:	9e 0c       	add	r9, r14
    4262:	91 1a       	sub	r9, r17
    4264:	1e 2d       	mov	r17, r14
    4266:	06 c0       	rjmp	.+12     	; 0x4274 <vfprintf+0x320>
    4268:	80 e2       	ldi	r24, 0x20	; 32
    426a:	90 e0       	ldi	r25, 0x00	; 0
    426c:	b3 01       	movw	r22, r6
    426e:	0e 94 9d 21 	call	0x433a	; 0x433a <fputc>
    4272:	1f 5f       	subi	r17, 0xFF	; 255
    4274:	1e 15       	cp	r17, r14
    4276:	c0 f3       	brcs	.-16     	; 0x4268 <vfprintf+0x314>
    4278:	04 c0       	rjmp	.+8      	; 0x4282 <vfprintf+0x32e>
    427a:	1e 15       	cp	r17, r14
    427c:	10 f4       	brcc	.+4      	; 0x4282 <vfprintf+0x32e>
    427e:	e1 1a       	sub	r14, r17
    4280:	01 c0       	rjmp	.+2      	; 0x4284 <vfprintf+0x330>
    4282:	ee 24       	eor	r14, r14
    4284:	04 ff       	sbrs	r16, 4
    4286:	0f c0       	rjmp	.+30     	; 0x42a6 <vfprintf+0x352>
    4288:	80 e3       	ldi	r24, 0x30	; 48
    428a:	90 e0       	ldi	r25, 0x00	; 0
    428c:	b3 01       	movw	r22, r6
    428e:	0e 94 9d 21 	call	0x433a	; 0x433a <fputc>
    4292:	02 ff       	sbrs	r16, 2
    4294:	1d c0       	rjmp	.+58     	; 0x42d0 <vfprintf+0x37c>
    4296:	01 fd       	sbrc	r16, 1
    4298:	03 c0       	rjmp	.+6      	; 0x42a0 <vfprintf+0x34c>
    429a:	88 e7       	ldi	r24, 0x78	; 120
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	0e c0       	rjmp	.+28     	; 0x42bc <vfprintf+0x368>
    42a0:	88 e5       	ldi	r24, 0x58	; 88
    42a2:	90 e0       	ldi	r25, 0x00	; 0
    42a4:	0b c0       	rjmp	.+22     	; 0x42bc <vfprintf+0x368>
    42a6:	80 2f       	mov	r24, r16
    42a8:	86 78       	andi	r24, 0x86	; 134
    42aa:	91 f0       	breq	.+36     	; 0x42d0 <vfprintf+0x37c>
    42ac:	01 ff       	sbrs	r16, 1
    42ae:	02 c0       	rjmp	.+4      	; 0x42b4 <vfprintf+0x360>
    42b0:	8b e2       	ldi	r24, 0x2B	; 43
    42b2:	01 c0       	rjmp	.+2      	; 0x42b6 <vfprintf+0x362>
    42b4:	80 e2       	ldi	r24, 0x20	; 32
    42b6:	f7 fc       	sbrc	r15, 7
    42b8:	8d e2       	ldi	r24, 0x2D	; 45
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	b3 01       	movw	r22, r6
    42be:	0e 94 9d 21 	call	0x433a	; 0x433a <fputc>
    42c2:	06 c0       	rjmp	.+12     	; 0x42d0 <vfprintf+0x37c>
    42c4:	80 e3       	ldi	r24, 0x30	; 48
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	b3 01       	movw	r22, r6
    42ca:	0e 94 9d 21 	call	0x433a	; 0x433a <fputc>
    42ce:	9a 94       	dec	r9
    42d0:	d9 14       	cp	r13, r9
    42d2:	c0 f3       	brcs	.-16     	; 0x42c4 <vfprintf+0x370>
    42d4:	da 94       	dec	r13
    42d6:	f1 01       	movw	r30, r2
    42d8:	ed 0d       	add	r30, r13
    42da:	f1 1d       	adc	r31, r1
    42dc:	80 81       	ld	r24, Z
    42de:	90 e0       	ldi	r25, 0x00	; 0
    42e0:	b3 01       	movw	r22, r6
    42e2:	0e 94 9d 21 	call	0x433a	; 0x433a <fputc>
    42e6:	dd 20       	and	r13, r13
    42e8:	a9 f7       	brne	.-22     	; 0x42d4 <vfprintf+0x380>
    42ea:	06 c0       	rjmp	.+12     	; 0x42f8 <vfprintf+0x3a4>
    42ec:	80 e2       	ldi	r24, 0x20	; 32
    42ee:	90 e0       	ldi	r25, 0x00	; 0
    42f0:	b3 01       	movw	r22, r6
    42f2:	0e 94 9d 21 	call	0x433a	; 0x433a <fputc>
    42f6:	ea 94       	dec	r14
    42f8:	ee 20       	and	r14, r14
    42fa:	c1 f7       	brne	.-16     	; 0x42ec <vfprintf+0x398>
    42fc:	43 ce       	rjmp	.-890    	; 0x3f84 <vfprintf+0x30>
    42fe:	f3 01       	movw	r30, r6
    4300:	66 81       	ldd	r22, Z+6	; 0x06
    4302:	77 81       	ldd	r23, Z+7	; 0x07
    4304:	cb 01       	movw	r24, r22
    4306:	2b 96       	adiw	r28, 0x0b	; 11
    4308:	e2 e1       	ldi	r30, 0x12	; 18
    430a:	0c 94 6b 1f 	jmp	0x3ed6	; 0x3ed6 <__epilogue_restores__>

0000430e <strnlen_P>:
    430e:	fc 01       	movw	r30, r24
    4310:	05 90       	lpm	r0, Z+
    4312:	61 50       	subi	r22, 0x01	; 1
    4314:	70 40       	sbci	r23, 0x00	; 0
    4316:	01 10       	cpse	r0, r1
    4318:	d8 f7       	brcc	.-10     	; 0x4310 <strnlen_P+0x2>
    431a:	80 95       	com	r24
    431c:	90 95       	com	r25
    431e:	8e 0f       	add	r24, r30
    4320:	9f 1f       	adc	r25, r31
    4322:	08 95       	ret

00004324 <strnlen>:
    4324:	fc 01       	movw	r30, r24
    4326:	61 50       	subi	r22, 0x01	; 1
    4328:	70 40       	sbci	r23, 0x00	; 0
    432a:	01 90       	ld	r0, Z+
    432c:	01 10       	cpse	r0, r1
    432e:	d8 f7       	brcc	.-10     	; 0x4326 <strnlen+0x2>
    4330:	80 95       	com	r24
    4332:	90 95       	com	r25
    4334:	8e 0f       	add	r24, r30
    4336:	9f 1f       	adc	r25, r31
    4338:	08 95       	ret

0000433a <fputc>:
    433a:	0f 93       	push	r16
    433c:	1f 93       	push	r17
    433e:	cf 93       	push	r28
    4340:	df 93       	push	r29
    4342:	8c 01       	movw	r16, r24
    4344:	eb 01       	movw	r28, r22
    4346:	8b 81       	ldd	r24, Y+3	; 0x03
    4348:	81 ff       	sbrs	r24, 1
    434a:	1b c0       	rjmp	.+54     	; 0x4382 <fputc+0x48>
    434c:	82 ff       	sbrs	r24, 2
    434e:	0d c0       	rjmp	.+26     	; 0x436a <fputc+0x30>
    4350:	2e 81       	ldd	r18, Y+6	; 0x06
    4352:	3f 81       	ldd	r19, Y+7	; 0x07
    4354:	8c 81       	ldd	r24, Y+4	; 0x04
    4356:	9d 81       	ldd	r25, Y+5	; 0x05
    4358:	28 17       	cp	r18, r24
    435a:	39 07       	cpc	r19, r25
    435c:	64 f4       	brge	.+24     	; 0x4376 <fputc+0x3c>
    435e:	e8 81       	ld	r30, Y
    4360:	f9 81       	ldd	r31, Y+1	; 0x01
    4362:	01 93       	st	Z+, r16
    4364:	f9 83       	std	Y+1, r31	; 0x01
    4366:	e8 83       	st	Y, r30
    4368:	06 c0       	rjmp	.+12     	; 0x4376 <fputc+0x3c>
    436a:	e8 85       	ldd	r30, Y+8	; 0x08
    436c:	f9 85       	ldd	r31, Y+9	; 0x09
    436e:	80 2f       	mov	r24, r16
    4370:	09 95       	icall
    4372:	89 2b       	or	r24, r25
    4374:	31 f4       	brne	.+12     	; 0x4382 <fputc+0x48>
    4376:	8e 81       	ldd	r24, Y+6	; 0x06
    4378:	9f 81       	ldd	r25, Y+7	; 0x07
    437a:	01 96       	adiw	r24, 0x01	; 1
    437c:	9f 83       	std	Y+7, r25	; 0x07
    437e:	8e 83       	std	Y+6, r24	; 0x06
    4380:	02 c0       	rjmp	.+4      	; 0x4386 <fputc+0x4c>
    4382:	0f ef       	ldi	r16, 0xFF	; 255
    4384:	1f ef       	ldi	r17, 0xFF	; 255
    4386:	c8 01       	movw	r24, r16
    4388:	df 91       	pop	r29
    438a:	cf 91       	pop	r28
    438c:	1f 91       	pop	r17
    438e:	0f 91       	pop	r16
    4390:	08 95       	ret

00004392 <__ultoa_invert>:
    4392:	fa 01       	movw	r30, r20
    4394:	aa 27       	eor	r26, r26
    4396:	28 30       	cpi	r18, 0x08	; 8
    4398:	51 f1       	breq	.+84     	; 0x43ee <__ultoa_invert+0x5c>
    439a:	20 31       	cpi	r18, 0x10	; 16
    439c:	81 f1       	breq	.+96     	; 0x43fe <__ultoa_invert+0x6c>
    439e:	e8 94       	clt
    43a0:	6f 93       	push	r22
    43a2:	6e 7f       	andi	r22, 0xFE	; 254
    43a4:	6e 5f       	subi	r22, 0xFE	; 254
    43a6:	7f 4f       	sbci	r23, 0xFF	; 255
    43a8:	8f 4f       	sbci	r24, 0xFF	; 255
    43aa:	9f 4f       	sbci	r25, 0xFF	; 255
    43ac:	af 4f       	sbci	r26, 0xFF	; 255
    43ae:	b1 e0       	ldi	r27, 0x01	; 1
    43b0:	3e d0       	rcall	.+124    	; 0x442e <__ultoa_invert+0x9c>
    43b2:	b4 e0       	ldi	r27, 0x04	; 4
    43b4:	3c d0       	rcall	.+120    	; 0x442e <__ultoa_invert+0x9c>
    43b6:	67 0f       	add	r22, r23
    43b8:	78 1f       	adc	r23, r24
    43ba:	89 1f       	adc	r24, r25
    43bc:	9a 1f       	adc	r25, r26
    43be:	a1 1d       	adc	r26, r1
    43c0:	68 0f       	add	r22, r24
    43c2:	79 1f       	adc	r23, r25
    43c4:	8a 1f       	adc	r24, r26
    43c6:	91 1d       	adc	r25, r1
    43c8:	a1 1d       	adc	r26, r1
    43ca:	6a 0f       	add	r22, r26
    43cc:	71 1d       	adc	r23, r1
    43ce:	81 1d       	adc	r24, r1
    43d0:	91 1d       	adc	r25, r1
    43d2:	a1 1d       	adc	r26, r1
    43d4:	20 d0       	rcall	.+64     	; 0x4416 <__ultoa_invert+0x84>
    43d6:	09 f4       	brne	.+2      	; 0x43da <__ultoa_invert+0x48>
    43d8:	68 94       	set
    43da:	3f 91       	pop	r19
    43dc:	2a e0       	ldi	r18, 0x0A	; 10
    43de:	26 9f       	mul	r18, r22
    43e0:	11 24       	eor	r1, r1
    43e2:	30 19       	sub	r19, r0
    43e4:	30 5d       	subi	r19, 0xD0	; 208
    43e6:	31 93       	st	Z+, r19
    43e8:	de f6       	brtc	.-74     	; 0x43a0 <__ultoa_invert+0xe>
    43ea:	cf 01       	movw	r24, r30
    43ec:	08 95       	ret
    43ee:	46 2f       	mov	r20, r22
    43f0:	47 70       	andi	r20, 0x07	; 7
    43f2:	40 5d       	subi	r20, 0xD0	; 208
    43f4:	41 93       	st	Z+, r20
    43f6:	b3 e0       	ldi	r27, 0x03	; 3
    43f8:	0f d0       	rcall	.+30     	; 0x4418 <__ultoa_invert+0x86>
    43fa:	c9 f7       	brne	.-14     	; 0x43ee <__ultoa_invert+0x5c>
    43fc:	f6 cf       	rjmp	.-20     	; 0x43ea <__ultoa_invert+0x58>
    43fe:	46 2f       	mov	r20, r22
    4400:	4f 70       	andi	r20, 0x0F	; 15
    4402:	40 5d       	subi	r20, 0xD0	; 208
    4404:	4a 33       	cpi	r20, 0x3A	; 58
    4406:	18 f0       	brcs	.+6      	; 0x440e <__ultoa_invert+0x7c>
    4408:	49 5d       	subi	r20, 0xD9	; 217
    440a:	31 fd       	sbrc	r19, 1
    440c:	40 52       	subi	r20, 0x20	; 32
    440e:	41 93       	st	Z+, r20
    4410:	02 d0       	rcall	.+4      	; 0x4416 <__ultoa_invert+0x84>
    4412:	a9 f7       	brne	.-22     	; 0x43fe <__ultoa_invert+0x6c>
    4414:	ea cf       	rjmp	.-44     	; 0x43ea <__ultoa_invert+0x58>
    4416:	b4 e0       	ldi	r27, 0x04	; 4
    4418:	a6 95       	lsr	r26
    441a:	97 95       	ror	r25
    441c:	87 95       	ror	r24
    441e:	77 95       	ror	r23
    4420:	67 95       	ror	r22
    4422:	ba 95       	dec	r27
    4424:	c9 f7       	brne	.-14     	; 0x4418 <__ultoa_invert+0x86>
    4426:	00 97       	sbiw	r24, 0x00	; 0
    4428:	61 05       	cpc	r22, r1
    442a:	71 05       	cpc	r23, r1
    442c:	08 95       	ret
    442e:	9b 01       	movw	r18, r22
    4430:	ac 01       	movw	r20, r24
    4432:	0a 2e       	mov	r0, r26
    4434:	06 94       	lsr	r0
    4436:	57 95       	ror	r21
    4438:	47 95       	ror	r20
    443a:	37 95       	ror	r19
    443c:	27 95       	ror	r18
    443e:	ba 95       	dec	r27
    4440:	c9 f7       	brne	.-14     	; 0x4434 <__ultoa_invert+0xa2>
    4442:	62 0f       	add	r22, r18
    4444:	73 1f       	adc	r23, r19
    4446:	84 1f       	adc	r24, r20
    4448:	95 1f       	adc	r25, r21
    444a:	a0 1d       	adc	r26, r0
    444c:	08 95       	ret

0000444e <_exit>:
    444e:	f8 94       	cli

00004450 <__stop_program>:
    4450:	ff cf       	rjmp	.-2      	; 0x4450 <__stop_program>
